
stm_f411E_disco_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001000c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001a270  080101c0  080101c0  000111c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a430  0802a430  0002cc00  2**0
                  CONTENTS
  4 .ARM          00000008  0802a430  0802a430  0002b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a438  0802a438  0002cc00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a438  0802a438  0002b438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802a43c  0802a43c  0002b43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c00  20000000  0802a440  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002944  20000c00  0802b040  0002cc00  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20003544  0802b040  0002d544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002cc00  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198d3  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004785  00000000  00000000  00046503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0004ac88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103b  00000000  00000000  0004c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d416  00000000  00000000  0004d253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d67c  00000000  00000000  0006a669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa5e  00000000  00000000  00087ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00127743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba4  00000000  00000000  001277cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0012e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000c00 	.word	0x20000c00
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010194 	.word	0x08010194

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000c04 	.word	0x20000c04
 80001dc:	08010194 	.word	0x08010194

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000eb6:	f001 f869 	bl	8001f8c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	2032      	movs	r0, #50	@ 0x32
 8000ec6:	f001 f8b9 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	2123      	movs	r1, #35	@ 0x23
 8000ed4:	2032      	movs	r0, #50	@ 0x32
 8000ed6:	f001 f8b1 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000efa:	f001 f847 	bl	8001f8c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000efe:	210f      	movs	r1, #15
 8000f00:	2032      	movs	r0, #50	@ 0x32
 8000f02:	f001 f8ae 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000f1a:	2124      	movs	r1, #36	@ 0x24
 8000f1c:	2032      	movs	r0, #50	@ 0x32
 8000f1e:	f001 f8a0 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f2c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	461a      	mov	r2, r3
 8000f32:	2124      	movs	r1, #36	@ 0x24
 8000f34:	2032      	movs	r0, #50	@ 0x32
 8000f36:	f001 f881 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000f4c:	2121      	movs	r1, #33	@ 0x21
 8000f4e:	2032      	movs	r0, #50	@ 0x32
 8000f50:	f001 f887 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2121      	movs	r1, #33	@ 0x21
 8000f6e:	2032      	movs	r0, #50	@ 0x32
 8000f70:	f001 f864 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000f86:	2121      	movs	r1, #33	@ 0x21
 8000f88:	2032      	movs	r0, #50	@ 0x32
 8000f8a:	f001 f86a 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	f023 0308 	bic.w	r3, r3, #8
 8000f98:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2121      	movs	r1, #33	@ 0x21
 8000fa8:	2032      	movs	r0, #50	@ 0x32
 8000faa:	f001 f847 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b088      	sub	sp, #32
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000fca:	2123      	movs	r1, #35	@ 0x23
 8000fcc:	2032      	movs	r0, #50	@ 0x32
 8000fce:	f001 f848 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000fd6:	2124      	movs	r1, #36	@ 0x24
 8000fd8:	2032      	movs	r0, #50	@ 0x32
 8000fda:	f001 f842 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000fe2:	2128      	movs	r1, #40	@ 0x28
 8000fe4:	2032      	movs	r0, #50	@ 0x32
 8000fe6:	f001 f83c 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000ff0:	2129      	movs	r1, #41	@ 0x29
 8000ff2:	2032      	movs	r0, #50	@ 0x32
 8000ff4:	f001 f835 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000ffe:	212a      	movs	r1, #42	@ 0x2a
 8001000:	2032      	movs	r0, #50	@ 0x32
 8001002:	f001 f82e 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001006:	4603      	mov	r3, r0
 8001008:	b25b      	sxtb	r3, r3
 800100a:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800100c:	212b      	movs	r1, #43	@ 0x2b
 800100e:	2032      	movs	r0, #50	@ 0x32
 8001010:	f001 f827 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	b25b      	sxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800101a:	212c      	movs	r1, #44	@ 0x2c
 800101c:	2032      	movs	r0, #50	@ 0x32
 800101e:	f001 f820 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001022:	4603      	mov	r3, r0
 8001024:	b25b      	sxtb	r3, r3
 8001026:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001028:	212d      	movs	r1, #45	@ 0x2d
 800102a:	2032      	movs	r0, #50	@ 0x32
 800102c:	f001 f819 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	b25b      	sxtb	r3, r3
 8001034:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8001036:	7d3b      	ldrb	r3, [r7, #20]
 8001038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103c:	2b00      	cmp	r3, #0
 800103e:	d123      	bne.n	8001088 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	77fb      	strb	r3, [r7, #31]
 8001044:	e01c      	b.n	8001080 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001046:	7ffb      	ldrb	r3, [r7, #31]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3301      	adds	r3, #1
 800104c:	3320      	adds	r3, #32
 800104e:	443b      	add	r3, r7
 8001050:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29a      	uxth	r2, r3
 800105a:	7ffb      	ldrb	r3, [r7, #31]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	3320      	adds	r3, #32
 8001060:	443b      	add	r3, r7
 8001062:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	7ffb      	ldrb	r3, [r7, #31]
 800106e:	b212      	sxth	r2, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	3320      	adds	r3, #32
 8001074:	443b      	add	r3, r7
 8001076:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800107a:	7ffb      	ldrb	r3, [r7, #31]
 800107c:	3301      	adds	r3, #1
 800107e:	77fb      	strb	r3, [r7, #31]
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d9df      	bls.n	8001046 <LSM303AGR_AccReadXYZ+0x90>
 8001086:	e022      	b.n	80010ce <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	77fb      	strb	r3, [r7, #31]
 800108c:	e01c      	b.n	80010c8 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800108e:	7ffb      	ldrb	r3, [r7, #31]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	3320      	adds	r3, #32
 8001094:	443b      	add	r3, r7
 8001096:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800109a:	b29b      	uxth	r3, r3
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b29a      	uxth	r2, r3
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	3301      	adds	r3, #1
 80010a6:	3320      	adds	r3, #32
 80010a8:	443b      	add	r3, r7
 80010aa:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	7ffb      	ldrb	r3, [r7, #31]
 80010b6:	b212      	sxth	r2, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	3320      	adds	r3, #32
 80010bc:	443b      	add	r3, r7
 80010be:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80010c2:	7ffb      	ldrb	r3, [r7, #31]
 80010c4:	3301      	adds	r3, #1
 80010c6:	77fb      	strb	r3, [r7, #31]
 80010c8:	7ffb      	ldrb	r3, [r7, #31]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d9df      	bls.n	800108e <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80010ce:	7d3b      	ldrb	r3, [r7, #20]
 80010d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80010d4:	2b30      	cmp	r3, #48	@ 0x30
 80010d6:	d013      	beq.n	8001100 <LSM303AGR_AccReadXYZ+0x14a>
 80010d8:	2b30      	cmp	r3, #48	@ 0x30
 80010da:	dc14      	bgt.n	8001106 <LSM303AGR_AccReadXYZ+0x150>
 80010dc:	2b20      	cmp	r3, #32
 80010de:	d00c      	beq.n	80010fa <LSM303AGR_AccReadXYZ+0x144>
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	dc10      	bgt.n	8001106 <LSM303AGR_AccReadXYZ+0x150>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <LSM303AGR_AccReadXYZ+0x138>
 80010e8:	2b10      	cmp	r3, #16
 80010ea:	d003      	beq.n	80010f4 <LSM303AGR_AccReadXYZ+0x13e>
 80010ec:	e00b      	b.n	8001106 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80010ee:	2301      	movs	r3, #1
 80010f0:	77bb      	strb	r3, [r7, #30]
    break;
 80010f2:	e008      	b.n	8001106 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80010f4:	2302      	movs	r3, #2
 80010f6:	77bb      	strb	r3, [r7, #30]
    break;
 80010f8:	e005      	b.n	8001106 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80010fa:	2304      	movs	r3, #4
 80010fc:	77bb      	strb	r3, [r7, #30]
    break;
 80010fe:	e002      	b.n	8001106 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8001100:	230c      	movs	r3, #12
 8001102:	77bb      	strb	r3, [r7, #30]
    break;
 8001104:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	77fb      	strb	r3, [r7, #31]
 800110a:	e014      	b.n	8001136 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800110c:	7ffb      	ldrb	r3, [r7, #31]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	3320      	adds	r3, #32
 8001112:	443b      	add	r3, r7
 8001114:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001118:	b29a      	uxth	r2, r3
 800111a:	7fbb      	ldrb	r3, [r7, #30]
 800111c:	b29b      	uxth	r3, r3
 800111e:	fb12 f303 	smulbb	r3, r2, r3
 8001122:	b299      	uxth	r1, r3
 8001124:	7ffb      	ldrb	r3, [r7, #31]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	b20a      	sxth	r2, r1
 800112e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	3301      	adds	r3, #1
 8001134:	77fb      	strb	r3, [r7, #31]
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d9e7      	bls.n	800110c <LSM303AGR_AccReadXYZ+0x156>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001154:	2121      	movs	r1, #33	@ 0x21
 8001156:	2032      	movs	r0, #50	@ 0x32
 8001158:	f000 ff83 	bl	8002062 <COMPASSACCELERO_IO_Read>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f023 0304 	bic.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4313      	orrs	r3, r2
 800116e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	461a      	mov	r2, r3
 8001174:	2121      	movs	r1, #33	@ 0x21
 8001176:	2032      	movs	r0, #50	@ 0x32
 8001178:	f000 ff60 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001192:	2122      	movs	r1, #34	@ 0x22
 8001194:	2032      	movs	r0, #50	@ 0x32
 8001196:	f000 ff64 	bl	8002062 <COMPASSACCELERO_IO_Read>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2122      	movs	r1, #34	@ 0x22
 80011ac:	2032      	movs	r0, #50	@ 0x32
 80011ae:	f000 ff45 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80011c8:	2138      	movs	r1, #56	@ 0x38
 80011ca:	2032      	movs	r0, #50	@ 0x32
 80011cc:	f000 ff49 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4313      	orrs	r3, r2
 80011da:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	461a      	mov	r2, r3
 80011e0:	2138      	movs	r1, #56	@ 0x38
 80011e2:	2032      	movs	r0, #50	@ 0x32
 80011e4:	f000 ff2a 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80011e8:	230a      	movs	r3, #10
 80011ea:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	461a      	mov	r2, r3
 80011f0:	213a      	movs	r1, #58	@ 0x3a
 80011f2:	2032      	movs	r0, #50	@ 0x32
 80011f4:	f000 ff22 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80011f8:	2305      	movs	r3, #5
 80011fa:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	461a      	mov	r2, r3
 8001200:	213b      	movs	r1, #59	@ 0x3b
 8001202:	2032      	movs	r0, #50	@ 0x32
 8001204:	f000 ff1a 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	461a      	mov	r2, r3
 800120c:	213c      	movs	r1, #60	@ 0x3c
 800120e:	2032      	movs	r0, #50	@ 0x32
 8001210:	f000 ff14 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001214:	2332      	movs	r3, #50	@ 0x32
 8001216:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	461a      	mov	r2, r3
 800121c:	213d      	movs	r1, #61	@ 0x3d
 800121e:	2032      	movs	r0, #50	@ 0x32
 8001220:	f000 ff0c 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001230:	f000 fed4 	bl	8001fdc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001234:	2080      	movs	r0, #128	@ 0x80
 8001236:	f7ff ffa5 	bl	8001184 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800123a:	2004      	movs	r0, #4
 800123c:	f7ff ff83 	bl	8001146 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8001240:	2010      	movs	r0, #16
 8001242:	f7ff ffba 	bl	80011ba <LSM303AGR_AccClickITEnable>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001258:	f000 fe98 	bl	8001f8c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	461a      	mov	r2, r3
 8001264:	2120      	movs	r1, #32
 8001266:	2032      	movs	r0, #50	@ 0x32
 8001268:	f000 fee8 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	b29b      	uxth	r3, r3
 8001272:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	461a      	mov	r2, r3
 8001278:	2123      	movs	r1, #35	@ 0x23
 800127a:	2032      	movs	r0, #50	@ 0x32
 800127c:	f000 fede 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80012a0:	f000 fe74 	bl	8001f8c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80012a4:	210f      	movs	r1, #15
 80012a6:	2032      	movs	r0, #50	@ 0x32
 80012a8:	f000 fedb 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80012c0:	2124      	movs	r1, #36	@ 0x24
 80012c2:	2032      	movs	r0, #50	@ 0x32
 80012c4:	f000 fecd 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012d2:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	461a      	mov	r2, r3
 80012d8:	2124      	movs	r1, #36	@ 0x24
 80012da:	2032      	movs	r0, #50	@ 0x32
 80012dc:	f000 feae 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80012f2:	2121      	movs	r1, #33	@ 0x21
 80012f4:	2032      	movs	r0, #50	@ 0x32
 80012f6:	f000 feb4 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4313      	orrs	r3, r2
 800130c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	461a      	mov	r2, r3
 8001312:	2121      	movs	r1, #33	@ 0x21
 8001314:	2032      	movs	r0, #50	@ 0x32
 8001316:	f000 fe91 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800132c:	2121      	movs	r1, #33	@ 0x21
 800132e:	2032      	movs	r0, #50	@ 0x32
 8001330:	f000 fe97 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	f023 0308 	bic.w	r3, r3, #8
 800133e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4313      	orrs	r3, r2
 8001346:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	461a      	mov	r2, r3
 800134c:	2121      	movs	r1, #33	@ 0x21
 800134e:	2032      	movs	r0, #50	@ 0x32
 8001350:	f000 fe74 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001364:	2300      	movs	r3, #0
 8001366:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800136c:	2301      	movs	r3, #1
 800136e:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001370:	2123      	movs	r1, #35	@ 0x23
 8001372:	2032      	movs	r0, #50	@ 0x32
 8001374:	f000 fe75 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001378:	4603      	mov	r3, r0
 800137a:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800137c:	2124      	movs	r1, #36	@ 0x24
 800137e:	2032      	movs	r0, #50	@ 0x32
 8001380:	f000 fe6f 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001384:	4603      	mov	r3, r0
 8001386:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001388:	2128      	movs	r1, #40	@ 0x28
 800138a:	2032      	movs	r0, #50	@ 0x32
 800138c:	f000 fe69 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	b25b      	sxtb	r3, r3
 8001394:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001396:	2129      	movs	r1, #41	@ 0x29
 8001398:	2032      	movs	r0, #50	@ 0x32
 800139a:	f000 fe62 	bl	8002062 <COMPASSACCELERO_IO_Read>
 800139e:	4603      	mov	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80013a4:	212a      	movs	r1, #42	@ 0x2a
 80013a6:	2032      	movs	r0, #50	@ 0x32
 80013a8:	f000 fe5b 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80013b2:	212b      	movs	r1, #43	@ 0x2b
 80013b4:	2032      	movs	r0, #50	@ 0x32
 80013b6:	f000 fe54 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80013c0:	212c      	movs	r1, #44	@ 0x2c
 80013c2:	2032      	movs	r0, #50	@ 0x32
 80013c4:	f000 fe4d 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80013ce:	212d      	movs	r1, #45	@ 0x2d
 80013d0:	2032      	movs	r0, #50	@ 0x32
 80013d2:	f000 fe46 	bl	8002062 <COMPASSACCELERO_IO_Read>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80013dc:	7d3b      	ldrb	r3, [r7, #20]
 80013de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d123      	bne.n	800142e <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	77fb      	strb	r3, [r7, #31]
 80013ea:	e01c      	b.n	8001426 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	3301      	adds	r3, #1
 80013f2:	3320      	adds	r3, #32
 80013f4:	443b      	add	r3, r7
 80013f6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b29a      	uxth	r2, r3
 8001400:	7ffb      	ldrb	r3, [r7, #31]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	3320      	adds	r3, #32
 8001406:	443b      	add	r3, r7
 8001408:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29a      	uxth	r2, r3
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	b212      	sxth	r2, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	3320      	adds	r3, #32
 800141a:	443b      	add	r3, r7
 800141c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	3301      	adds	r3, #1
 8001424:	77fb      	strb	r3, [r7, #31]
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d9df      	bls.n	80013ec <LSM303DLHC_AccReadXYZ+0x90>
 800142c:	e022      	b.n	8001474 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	77fb      	strb	r3, [r7, #31]
 8001432:	e01c      	b.n	800146e <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001434:	7ffb      	ldrb	r3, [r7, #31]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	3320      	adds	r3, #32
 800143a:	443b      	add	r3, r7
 800143c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001440:	b29b      	uxth	r3, r3
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b29a      	uxth	r2, r3
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	3301      	adds	r3, #1
 800144c:	3320      	adds	r3, #32
 800144e:	443b      	add	r3, r7
 8001450:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4413      	add	r3, r2
 8001458:	b29a      	uxth	r2, r3
 800145a:	7ffb      	ldrb	r3, [r7, #31]
 800145c:	b212      	sxth	r2, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	3320      	adds	r3, #32
 8001462:	443b      	add	r3, r7
 8001464:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001468:	7ffb      	ldrb	r3, [r7, #31]
 800146a:	3301      	adds	r3, #1
 800146c:	77fb      	strb	r3, [r7, #31]
 800146e:	7ffb      	ldrb	r3, [r7, #31]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d9df      	bls.n	8001434 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001474:	7d3b      	ldrb	r3, [r7, #20]
 8001476:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800147a:	2b30      	cmp	r3, #48	@ 0x30
 800147c:	d013      	beq.n	80014a6 <LSM303DLHC_AccReadXYZ+0x14a>
 800147e:	2b30      	cmp	r3, #48	@ 0x30
 8001480:	dc14      	bgt.n	80014ac <LSM303DLHC_AccReadXYZ+0x150>
 8001482:	2b20      	cmp	r3, #32
 8001484:	d00c      	beq.n	80014a0 <LSM303DLHC_AccReadXYZ+0x144>
 8001486:	2b20      	cmp	r3, #32
 8001488:	dc10      	bgt.n	80014ac <LSM303DLHC_AccReadXYZ+0x150>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <LSM303DLHC_AccReadXYZ+0x138>
 800148e:	2b10      	cmp	r3, #16
 8001490:	d003      	beq.n	800149a <LSM303DLHC_AccReadXYZ+0x13e>
 8001492:	e00b      	b.n	80014ac <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001494:	2301      	movs	r3, #1
 8001496:	77bb      	strb	r3, [r7, #30]
    break;
 8001498:	e008      	b.n	80014ac <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 800149a:	2302      	movs	r3, #2
 800149c:	77bb      	strb	r3, [r7, #30]
    break;
 800149e:	e005      	b.n	80014ac <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80014a0:	2304      	movs	r3, #4
 80014a2:	77bb      	strb	r3, [r7, #30]
    break;
 80014a4:	e002      	b.n	80014ac <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80014a6:	230c      	movs	r3, #12
 80014a8:	77bb      	strb	r3, [r7, #30]
    break;
 80014aa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	77fb      	strb	r3, [r7, #31]
 80014b0:	e014      	b.n	80014dc <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	3320      	adds	r3, #32
 80014b8:	443b      	add	r3, r7
 80014ba:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	7fbb      	ldrb	r3, [r7, #30]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	fb12 f303 	smulbb	r3, r2, r3
 80014c8:	b299      	uxth	r1, r3
 80014ca:	7ffb      	ldrb	r3, [r7, #31]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	b20a      	sxth	r2, r1
 80014d4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	3301      	adds	r3, #1
 80014da:	77fb      	strb	r3, [r7, #31]
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d9e7      	bls.n	80014b2 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80014fa:	2121      	movs	r1, #33	@ 0x21
 80014fc:	2032      	movs	r0, #50	@ 0x32
 80014fe:	f000 fdb0 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4313      	orrs	r3, r2
 8001514:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	461a      	mov	r2, r3
 800151a:	2121      	movs	r1, #33	@ 0x21
 800151c:	2032      	movs	r0, #50	@ 0x32
 800151e:	f000 fd8d 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001538:	2122      	movs	r1, #34	@ 0x22
 800153a:	2032      	movs	r0, #50	@ 0x32
 800153c:	f000 fd91 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4313      	orrs	r3, r2
 800154a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	461a      	mov	r2, r3
 8001550:	2122      	movs	r1, #34	@ 0x22
 8001552:	2032      	movs	r0, #50	@ 0x32
 8001554:	f000 fd72 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800156e:	2138      	movs	r1, #56	@ 0x38
 8001570:	2032      	movs	r0, #50	@ 0x32
 8001572:	f000 fd76 	bl	8002062 <COMPASSACCELERO_IO_Read>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4313      	orrs	r3, r2
 8001580:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	461a      	mov	r2, r3
 8001586:	2138      	movs	r1, #56	@ 0x38
 8001588:	2032      	movs	r0, #50	@ 0x32
 800158a:	f000 fd57 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800158e:	230a      	movs	r3, #10
 8001590:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	461a      	mov	r2, r3
 8001596:	213a      	movs	r1, #58	@ 0x3a
 8001598:	2032      	movs	r0, #50	@ 0x32
 800159a:	f000 fd4f 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800159e:	2305      	movs	r3, #5
 80015a0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	461a      	mov	r2, r3
 80015a6:	213b      	movs	r1, #59	@ 0x3b
 80015a8:	2032      	movs	r0, #50	@ 0x32
 80015aa:	f000 fd47 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	461a      	mov	r2, r3
 80015b2:	213c      	movs	r1, #60	@ 0x3c
 80015b4:	2032      	movs	r0, #50	@ 0x32
 80015b6:	f000 fd41 	bl	800203c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80015ba:	2332      	movs	r3, #50	@ 0x32
 80015bc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	461a      	mov	r2, r3
 80015c2:	213d      	movs	r1, #61	@ 0x3d
 80015c4:	2032      	movs	r0, #50	@ 0x32
 80015c6:	f000 fd39 	bl	800203c <COMPASSACCELERO_IO_Write>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80015d6:	f000 fd01 	bl	8001fdc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80015da:	2080      	movs	r0, #128	@ 0x80
 80015dc:	f7ff ffa5 	bl	800152a <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80015e0:	2004      	movs	r0, #4
 80015e2:	f7ff ff83 	bl	80014ec <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80015e6:	2010      	movs	r0, #16
 80015e8:	f7ff ffba 	bl	8001560 <LSM303DLHC_AccClickITEnable>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <AI_Init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
AccelerometerData buffer[BUFFER_SIZE];
uint16_t buffer_index = 0;

static void AI_Init(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	ai_error err;

	const ai_handle act_addr[] = { activations };
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <AI_Init+0x64>)
 80015f8:	603b      	str	r3, [r7, #0]

	err = ai_accelerometer_motion_create_and_init(&accelerometer_motion,
 80015fa:	463b      	mov	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	4815      	ldr	r0, [pc, #84]	@ (8001658 <AI_Init+0x68>)
 8001602:	f009 fbb9 	bl	800ad78 <ai_accelerometer_motion_create_and_init>
 8001606:	4603      	mov	r3, r0
 8001608:	607b      	str	r3, [r7, #4]
			act_addr, NULL);
	if (err.type != AI_ERROR_NONE) {
 800160a:	793b      	ldrb	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00a      	beq.n	8001626 <AI_Init+0x36>
		printf("ai_network_create error - type=%d code=%d\r\n", err.type,
 8001610:	793b      	ldrb	r3, [r7, #4]
 8001612:	4619      	mov	r1, r3
				err.code);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f3c3 2317 	ubfx	r3, r3, #8, #24
		printf("ai_network_create error - type=%d code=%d\r\n", err.type,
 800161a:	461a      	mov	r2, r3
 800161c:	480f      	ldr	r0, [pc, #60]	@ (800165c <AI_Init+0x6c>)
 800161e:	f00c fb87 	bl	800dd30 <iprintf>
		Error_Handler();
 8001622:	f000 fbc5 	bl	8001db0 <Error_Handler>
	}
	ai_input = ai_accelerometer_motion_inputs_get(accelerometer_motion, NULL);
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <AI_Init+0x68>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f009 fc21 	bl	800ae74 <ai_accelerometer_motion_inputs_get>
 8001632:	4603      	mov	r3, r0
 8001634:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <AI_Init+0x70>)
 8001636:	6013      	str	r3, [r2, #0]
	ai_output = ai_accelerometer_motion_outputs_get(accelerometer_motion, NULL);
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <AI_Init+0x68>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f009 fc32 	bl	800aea8 <ai_accelerometer_motion_outputs_get>
 8001644:	4603      	mov	r3, r0
 8001646:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <AI_Init+0x74>)
 8001648:	6013      	str	r3, [r2, #0]
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000e78 	.word	0x20000e78
 8001658:	20000df8 	.word	0x20000df8
 800165c:	080101d0 	.word	0x080101d0
 8001660:	200016f0 	.word	0x200016f0
 8001664:	200016f4 	.word	0x200016f4

08001668 <AI_Run>:

static void AI_Run(float *pIn, float *pOut) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	ai_i32 batch;
	ai_error err;

	ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <AI_Run+0x60>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <AI_Run+0x64>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	605a      	str	r2, [r3, #4]

	batch = ai_accelerometer_motion_run(accelerometer_motion, ai_input,
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <AI_Run+0x68>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <AI_Run+0x60>)
 8001688:	6811      	ldr	r1, [r2, #0]
 800168a:	4a10      	ldr	r2, [pc, #64]	@ (80016cc <AI_Run+0x64>)
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f009 fc60 	bl	800af54 <ai_accelerometer_motion_run>
 8001694:	60f8      	str	r0, [r7, #12]
			ai_output);
	if (batch != 1) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d011      	beq.n	80016c0 <AI_Run+0x58>
		err = ai_accelerometer_motion_get_error(accelerometer_motion);
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <AI_Run+0x68>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f009 fb47 	bl	800ad34 <ai_accelerometer_motion_get_error>
 80016a6:	4603      	mov	r3, r0
 80016a8:	60bb      	str	r3, [r7, #8]
		printf("AI ai_network_run error - type=%d code=%d\r\n", err.type,
 80016aa:	7a3b      	ldrb	r3, [r7, #8]
 80016ac:	4619      	mov	r1, r3
				err.code);
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f3c3 2317 	ubfx	r3, r3, #8, #24
		printf("AI ai_network_run error - type=%d code=%d\r\n", err.type,
 80016b4:	461a      	mov	r2, r3
 80016b6:	4807      	ldr	r0, [pc, #28]	@ (80016d4 <AI_Run+0x6c>)
 80016b8:	f00c fb3a 	bl	800dd30 <iprintf>
		Error_Handler();
 80016bc:	f000 fb78 	bl	8001db0 <Error_Handler>
	}
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200016f0 	.word	0x200016f0
 80016cc:	200016f4 	.word	0x200016f4
 80016d0:	20000df8 	.word	0x20000df8
 80016d4:	080101fc 	.word	0x080101fc

080016d8 <get_current_time_ms>:

uint32_t get_current_time_ms() {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80016dc:	f001 f87c 	bl	80027d8 <HAL_GetTick>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <make_prediction>:

uint8_t make_prediction(float model_output) {
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	ed87 0a01 	vstr	s0, [r7, #4]
	return (model_output >= 0.5f) ? 1 : 0;
 80016f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	bfac      	ite	ge
 8001702:	2301      	movge	r3, #1
 8001704:	2300      	movlt	r3, #0
 8001706:	b2db      	uxtb	r3, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <normalize_accelerometer_data>:

void normalize_accelerometer_data(float *input, float *output) {
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < NUM_AXES; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	e030      	b.n	8001786 <normalize_accelerometer_data+0x72>
		float normalized = (input[i] - data_min[i])
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	4a1a      	ldr	r2, [pc, #104]	@ (800179c <normalize_accelerometer_data+0x88>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee77 6a67 	vsub.f32	s13, s14, s15
				/ (data_max[i] - data_min[i]);
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <normalize_accelerometer_data+0x8c>)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	4a13      	ldr	r2, [pc, #76]	@ (800179c <normalize_accelerometer_data+0x88>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee37 7a67 	vsub.f32	s14, s14, s15
		float normalized = (input[i] - data_min[i])
 800175c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001760:	edc7 7a02 	vstr	s15, [r7, #8]
		output[i] = normalized * (MAX_VALUE - MIN_VALUE) + MIN_VALUE;
 8001764:	edd7 7a02 	vldr	s15, [r7, #8]
 8001768:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_AXES; i++) {
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b02      	cmp	r3, #2
 800178a:	ddcb      	ble.n	8001724 <normalize_accelerometer_data+0x10>
	}
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	0801030c 	.word	0x0801030c
 80017a0:	08010318 	.word	0x08010318

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b090      	sub	sp, #64	@ 0x40
 80017a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017aa:	f000 ffaf 	bl	800270c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ae:	f000 f8d9 	bl	8001964 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017b2:	f000 f941 	bl	8001a38 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b6:	f000 fa21 	bl	8001bfc <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ba:	f000 f95d 	bl	8001a78 <MX_I2C1_Init>
  MX_I2S2_Init();
 80017be:	f000 f989 	bl	8001ad4 <MX_I2S2_Init>
  MX_I2S3_Init();
 80017c2:	f000 f9b5 	bl	8001b30 <MX_I2S3_Init>
  MX_SPI1_Init();
 80017c6:	f000 f9e3 	bl	8001b90 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80017ca:	f008 fc83 	bl	800a0d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//	dataRdyIntReceived = 0;
    const uint32_t READ_INTERVAL = 10;
 80017ce:	230a      	movs	r3, #10
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t lastReadTime = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t write_index = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	@ 0x34
	float raw_data[3];
	float normalized_data[3];
	BSP_ACCELERO_Init();
 80017da:	f000 fc55 	bl	8002088 <BSP_ACCELERO_Init>
//	uint8_t current_label = LABEL_UPDOWN; // Default label, change this based on your requirement
	AI_Init();
 80017de:	f7ff ff07 	bl	80015f0 <AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		uint32_t currentTime = get_current_time_ms();
 80017e2:	f7ff ff79 	bl	80016d8 <get_current_time_ms>
 80017e6:	6278      	str	r0, [r7, #36]	@ 0x24
		if (currentTime - lastReadTime >= READ_INTERVAL)  {
 80017e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f200 809c 	bhi.w	800192e <main+0x18a>
//			dataRdyIntReceived = 0;
			BSP_ACCELERO_GetXYZ(accDataxyz);
 80017f6:	4850      	ldr	r0, [pc, #320]	@ (8001938 <main+0x194>)
 80017f8:	f000 fd08 	bl	800220c <BSP_ACCELERO_GetXYZ>
			raw_data[0] = (float) accDataxyz[0];
 80017fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <main+0x194>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180a:	edc7 7a04 	vstr	s15, [r7, #16]
			raw_data[1] = (float) accDataxyz[1];
 800180e:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <main+0x194>)
 8001810:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181c:	edc7 7a05 	vstr	s15, [r7, #20]
			raw_data[2] = (float) accDataxyz[2];
 8001820:	4b45      	ldr	r3, [pc, #276]	@ (8001938 <main+0x194>)
 8001822:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	edc7 7a06 	vstr	s15, [r7, #24]
			normalize_accelerometer_data(raw_data, normalized_data);
 8001832:	1d3a      	adds	r2, r7, #4
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff6a 	bl	8001714 <normalize_accelerometer_data>

			aiInData[write_index + 0] = normalized_data[0];
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	493e      	ldr	r1, [pc, #248]	@ (800193c <main+0x198>)
 8001844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	601a      	str	r2, [r3, #0]
			aiInData[write_index + 1] = normalized_data[1];
 800184c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800184e:	3301      	adds	r3, #1
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	493a      	ldr	r1, [pc, #232]	@ (800193c <main+0x198>)
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	601a      	str	r2, [r3, #0]
			aiInData[write_index + 2] = normalized_data[2];
 800185a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800185c:	3302      	adds	r3, #2
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4936      	ldr	r1, [pc, #216]	@ (800193c <main+0x198>)
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	601a      	str	r2, [r3, #0]
			write_index += 3;
 8001868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800186a:	3303      	adds	r3, #3
 800186c:	637b      	str	r3, [r7, #52]	@ 0x34
			if (write_index == AI_ACCELEROMETER_MOTION_IN_1_SIZE) {
 800186e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001870:	2b1e      	cmp	r3, #30
 8001872:	d15c      	bne.n	800192e <main+0x18a>
				write_index = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34

				printf("Running inference\r\n");
 8001878:	4831      	ldr	r0, [pc, #196]	@ (8001940 <main+0x19c>)
 800187a:	f00c fac1 	bl	800de00 <puts>
				AI_Run(aiInData, aiOutData);
 800187e:	4931      	ldr	r1, [pc, #196]	@ (8001944 <main+0x1a0>)
 8001880:	482e      	ldr	r0, [pc, #184]	@ (800193c <main+0x198>)
 8001882:	f7ff fef1 	bl	8001668 <AI_Run>

				/* Output results */
				for (uint32_t i = 0; i < AI_ACCELEROMETER_MOTION_OUT_1_SIZE;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
 800188a:	e00f      	b.n	80018ac <main+0x108>
						i++) {
					printf("%8.6f ", aiOutData[i]);
 800188c:	4a2d      	ldr	r2, [pc, #180]	@ (8001944 <main+0x1a0>)
 800188e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe5e 	bl	8000558 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4829      	ldr	r0, [pc, #164]	@ (8001948 <main+0x1a4>)
 80018a2:	f00c fa45 	bl	800dd30 <iprintf>
						i++) {
 80018a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a8:	3301      	adds	r3, #1
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
				for (uint32_t i = 0; i < AI_ACCELEROMETER_MOTION_OUT_1_SIZE;
 80018ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0ec      	beq.n	800188c <main+0xe8>
				}
				int predicted_class = make_prediction(aiOutData[0]);
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <main+0x1a0>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	eeb0 0a67 	vmov.f32	s0, s15
 80018bc:	f7ff ff13 	bl	80016e6 <make_prediction>
 80018c0:	4603      	mov	r3, r0
 80018c2:	623b      	str	r3, [r7, #32]
				const char* predicted_activity = activities[predicted_class];
 80018c4:	4a21      	ldr	r2, [pc, #132]	@ (800194c <main+0x1a8>)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	61fb      	str	r3, [r7, #28]

				printf("\r\nPredicted Activity: %s\r\n", predicted_activity);
 80018ce:	69f9      	ldr	r1, [r7, #28]
 80018d0:	481f      	ldr	r0, [pc, #124]	@ (8001950 <main+0x1ac>)
 80018d2:	f00c fa2d 	bl	800dd30 <iprintf>

				sprintf(strPrediction, "Predicted Activity: %s\r\n", predicted_activity);
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	491e      	ldr	r1, [pc, #120]	@ (8001954 <main+0x1b0>)
 80018da:	481f      	ldr	r0, [pc, #124]	@ (8001958 <main+0x1b4>)
 80018dc:	f00c fa98 	bl	800de10 <siprintf>
				CDC_Transmit_FS((uint8_t*)strPrediction, strlen(strPrediction));
 80018e0:	481d      	ldr	r0, [pc, #116]	@ (8001958 <main+0x1b4>)
 80018e2:	f7fe fccd 	bl	8000280 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4619      	mov	r1, r3
 80018ea:	481b      	ldr	r0, [pc, #108]	@ (8001958 <main+0x1b4>)
 80018ec:	f008 fcb0 	bl	800a250 <CDC_Transmit_FS>
				HAL_Delay(5);
 80018f0:	2005      	movs	r0, #5
 80018f2:	f000 ff7d 	bl	80027f0 <HAL_Delay>

				sprintf(strTemp, "acc X:%d, Y:%d, Z:%d\r\n", accDataxyz[0], accDataxyz[1], accDataxyz[2]);
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <main+0x194>)
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <main+0x194>)
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4619      	mov	r1, r3
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <main+0x194>)
 8001908:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	460b      	mov	r3, r1
 8001910:	4912      	ldr	r1, [pc, #72]	@ (800195c <main+0x1b8>)
 8001912:	4813      	ldr	r0, [pc, #76]	@ (8001960 <main+0x1bc>)
 8001914:	f00c fa7c 	bl	800de10 <siprintf>
				CDC_Transmit_FS((uint8_t*)strTemp, strlen(strTemp));
 8001918:	4811      	ldr	r0, [pc, #68]	@ (8001960 <main+0x1bc>)
 800191a:	f7fe fcb1 	bl	8000280 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	480f      	ldr	r0, [pc, #60]	@ (8001960 <main+0x1bc>)
 8001924:	f008 fc94 	bl	800a250 <CDC_Transmit_FS>
				HAL_Delay(5);
 8001928:	2005      	movs	r0, #5
 800192a:	f000 ff61 	bl	80027f0 <HAL_Delay>
//			HAL_Delay(100);
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(10);
 800192e:	200a      	movs	r0, #10
 8001930:	f000 ff5e 	bl	80027f0 <HAL_Delay>
	while (1) {
 8001934:	e755      	b.n	80017e2 <main+0x3e>
 8001936:	bf00      	nop
 8001938:	20000d58 	.word	0x20000d58
 800193c:	20000dfc 	.word	0x20000dfc
 8001940:	08010228 	.word	0x08010228
 8001944:	20000e74 	.word	0x20000e74
 8001948:	0801023c 	.word	0x0801023c
 800194c:	20000068 	.word	0x20000068
 8001950:	08010244 	.word	0x08010244
 8001954:	08010260 	.word	0x08010260
 8001958:	20000dc4 	.word	0x20000dc4
 800195c:	0801027c 	.word	0x0801027c
 8001960:	20000d60 	.word	0x20000d60

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	@ 0x50
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	2230      	movs	r2, #48	@ 0x30
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f00c fb44 	bl	800e000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <SystemClock_Config+0xcc>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <SystemClock_Config+0xcc>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001996:	6413      	str	r3, [r2, #64]	@ 0x40
 8001998:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <SystemClock_Config+0xcc>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <SystemClock_Config+0xd0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <SystemClock_Config+0xd0>)
 80019ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <SystemClock_Config+0xd0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ca:	2302      	movs	r3, #2
 80019cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019d4:	2308      	movs	r3, #8
 80019d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019de:	2304      	movs	r3, #4
 80019e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019e2:	2307      	movs	r3, #7
 80019e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fa0a 	bl	8005e04 <HAL_RCC_OscConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019f6:	f000 f9db 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fa:	230f      	movs	r3, #15
 80019fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fe:	2302      	movs	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2102      	movs	r1, #2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 fc6c 	bl	80062f4 <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a22:	f000 f9c5 	bl	8001db0 <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	@ 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000

08001a38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a52:	23c0      	movs	r3, #192	@ 0xc0
 8001a54:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001a56:	2308      	movs	r3, #8
 8001a58:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 fe53 	bl	800670c <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001a6c:	f000 f9a0 	bl	8001db0 <Error_Handler>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <MX_I2C1_Init+0x54>)
 8001a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <MX_I2C1_Init+0x58>)
 8001a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab6:	f001 fa53 	bl	8002f60 <HAL_I2C_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ac0:	f000 f976 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000c1c 	.word	0x20000c1c
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	000186a0 	.word	0x000186a0

08001ad4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001ada:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <MX_I2S2_Init+0x54>)
 8001adc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001aec:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001afa:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <MX_I2S2_Init+0x58>)
 8001afc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <MX_I2S2_Init+0x50>)
 8001b12:	f002 fa87 	bl	8004024 <HAL_I2S_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001b1c:	f000 f948 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000c70 	.word	0x20000c70
 8001b28:	40003800 	.word	0x40003800
 8001b2c:	00017700 	.word	0x00017700

08001b30 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b36:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <MX_I2S3_Init+0x58>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b40:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b54:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b58:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <MX_I2S3_Init+0x5c>)
 8001b5a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_I2S3_Init+0x54>)
 8001b70:	f002 fa58 	bl	8004024 <HAL_I2S_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001b7a:	f000 f919 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000cb8 	.word	0x20000cb8
 8001b88:	40003c00 	.word	0x40003c00
 8001b8c:	00017700 	.word	0x00017700

08001b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b94:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001b96:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <MX_SPI1_Init+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001b9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001bdc:	220a      	movs	r2, #10
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_SPI1_Init+0x64>)
 8001be2:	f004 fee5 	bl	80069b0 <HAL_SPI_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bec:	f000 f8e0 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000d00 	.word	0x20000d00
 8001bf8:	40013000 	.word	0x40013000

08001bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	@ 0x30
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	4b61      	ldr	r3, [pc, #388]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a60      	ldr	r2, [pc, #384]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b5e      	ldr	r3, [pc, #376]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	4b5a      	ldr	r3, [pc, #360]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a59      	ldr	r2, [pc, #356]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b57      	ldr	r3, [pc, #348]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b53      	ldr	r3, [pc, #332]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a52      	ldr	r2, [pc, #328]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b50      	ldr	r3, [pc, #320]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b49      	ldr	r3, [pc, #292]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b45      	ldr	r3, [pc, #276]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a44      	ldr	r2, [pc, #272]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b42      	ldr	r3, [pc, #264]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a3d      	ldr	r2, [pc, #244]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <MX_GPIO_Init+0x1a0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	4838      	ldr	r0, [pc, #224]	@ (8001da0 <MX_GPIO_Init+0x1a4>)
 8001cc0:	f001 f934 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4836      	ldr	r0, [pc, #216]	@ (8001da4 <MX_GPIO_Init+0x1a8>)
 8001cca:	f001 f92f 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001cd4:	4834      	ldr	r0, [pc, #208]	@ (8001da8 <MX_GPIO_Init+0x1ac>)
 8001cd6:	f001 f929 	bl	8002f2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	4619      	mov	r1, r3
 8001cec:	482c      	ldr	r0, [pc, #176]	@ (8001da0 <MX_GPIO_Init+0x1a4>)
 8001cee:	f000 feb5 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4825      	ldr	r0, [pc, #148]	@ (8001da0 <MX_GPIO_Init+0x1a4>)
 8001d0a:	f000 fea7 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001d0e:	2332      	movs	r3, #50	@ 0x32
 8001d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d12:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	481f      	ldr	r0, [pc, #124]	@ (8001da0 <MX_GPIO_Init+0x1a4>)
 8001d24:	f000 fe9a 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4819      	ldr	r0, [pc, #100]	@ (8001da4 <MX_GPIO_Init+0x1a8>)
 8001d40:	f000 fe8c 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d48:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	4814      	ldr	r0, [pc, #80]	@ (8001dac <MX_GPIO_Init+0x1b0>)
 8001d5a:	f000 fe7f 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d5e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001d62:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <MX_GPIO_Init+0x1ac>)
 8001d78:	f000 fe70 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4806      	ldr	r0, [pc, #24]	@ (8001da8 <MX_GPIO_Init+0x1ac>)
 8001d90:	f000 fe64 	bl	8002a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d94:	bf00      	nop
 8001d96:	3730      	adds	r7, #48	@ 0x30
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40020000 	.word	0x40020000

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <Error_Handler+0x8>

08001dbc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001dc0:	4814      	ldr	r0, [pc, #80]	@ (8001e14 <I2Cx_Init+0x58>)
 8001dc2:	f001 fd6d 	bl	80038a0 <HAL_I2C_GetState>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d121      	bne.n	8001e10 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <I2Cx_Init+0x58>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <I2Cx_Init+0x5c>)
 8001dd0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <I2Cx_Init+0x58>)
 8001dd4:	2243      	movs	r2, #67	@ 0x43
 8001dd6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <I2Cx_Init+0x58>)
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <I2Cx_Init+0x60>)
 8001ddc:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <I2Cx_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <I2Cx_Init+0x58>)
 8001de6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dea:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <I2Cx_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <I2Cx_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <I2Cx_Init+0x58>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <I2Cx_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e04:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <I2Cx_Init+0x58>)
 8001e06:	f000 f86b 	bl	8001ee0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001e0a:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <I2Cx_Init+0x58>)
 8001e0c:	f001 f8a8 	bl	8002f60 <HAL_I2C_Init>
  }
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200016f8 	.word	0x200016f8
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	000186a0 	.word	0x000186a0

08001e20 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	717b      	strb	r3, [r7, #5]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001e36:	797b      	ldrb	r3, [r7, #5]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <I2Cx_WriteData+0x48>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	88f9      	ldrh	r1, [r7, #6]
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2301      	movs	r3, #1
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	4807      	ldr	r0, [pc, #28]	@ (8001e6c <I2Cx_WriteData+0x4c>)
 8001e4e:	f001 f9fb 	bl	8003248 <HAL_I2C_Mem_Write>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001e5c:	f000 f834 	bl	8001ec8 <I2Cx_Error>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000070 	.word	0x20000070
 8001e6c:	200016f8 	.word	0x200016f8

08001e70 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af04      	add	r7, sp, #16
 8001e76:	4603      	mov	r3, r0
 8001e78:	460a      	mov	r2, r1
 8001e7a:	80fb      	strh	r3, [r7, #6]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001e88:	797b      	ldrb	r3, [r7, #5]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <I2Cx_ReadData+0x50>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	88f9      	ldrh	r1, [r7, #6]
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2301      	movs	r3, #1
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f107 030e 	add.w	r3, r7, #14
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <I2Cx_ReadData+0x54>)
 8001ea2:	f001 facb 	bl	800343c <HAL_I2C_Mem_Read>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001eb0:	f000 f80a 	bl	8001ec8 <I2Cx_Error>
  }
  return value;
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000070 	.word	0x20000070
 8001ec4:	200016f8 	.word	0x200016f8

08001ec8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001ecc:	4803      	ldr	r0, [pc, #12]	@ (8001edc <I2Cx_Error+0x14>)
 8001ece:	f001 f98b 	bl	80031e8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2Cx_Init();
 8001ed2:	f7ff ff73 	bl	8001dbc <I2Cx_Init>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200016f8 	.word	0x200016f8

08001ee0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	4a24      	ldr	r2, [pc, #144]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001ef2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef8:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001f20:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001f26:	2312      	movs	r3, #18
 8001f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001f32:	2304      	movs	r3, #4
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f3e:	f000 fd8d 	bl	8002a5c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a0f      	ldr	r2, [pc, #60]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f4c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <I2Cx_MspInit+0xa4>)
 8001f54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f58:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	201f      	movs	r0, #31
 8001f60:	f000 fd45 	bl	80029ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f64:	201f      	movs	r0, #31
 8001f66:	f000 fd5e 	bl	8002a26 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	2020      	movs	r0, #32
 8001f70:	f000 fd3d 	bl	80029ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001f74:	2020      	movs	r0, #32
 8001f76:	f000 fd56 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	@ 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020400 	.word	0x40020400

08001f8c <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <COMPASSACCELERO_IO_Init+0x48>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <COMPASSACCELERO_IO_Init+0x48>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <COMPASSACCELERO_IO_Init+0x48>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <COMPASSACCELERO_IO_Init+0x4c>)
 8001fc4:	f000 fd4a 	bl	8002a5c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001fc8:	f7ff fef8 	bl	8001dbc <I2Cx_Init>
}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40021000 	.word	0x40021000

08001fdc <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8001ffe:	2330      	movs	r3, #48	@ 0x30
 8002000:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002002:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4808      	ldr	r0, [pc, #32]	@ (8002038 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8002016:	f000 fd21 	bl	8002a5c <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800201a:	2200      	movs	r2, #0
 800201c:	210f      	movs	r1, #15
 800201e:	200a      	movs	r0, #10
 8002020:	f000 fce5 	bl	80029ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002024:	200a      	movs	r0, #10
 8002026:	f000 fcfe 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40021000 	.word	0x40021000

0800203c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	80fb      	strh	r3, [r7, #6]
 8002046:	460b      	mov	r3, r1
 8002048:	717b      	strb	r3, [r7, #5]
 800204a:	4613      	mov	r3, r2
 800204c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800204e:	793a      	ldrb	r2, [r7, #4]
 8002050:	7979      	ldrb	r1, [r7, #5]
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fee3 	bl	8001e20 <I2Cx_WriteData>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	460a      	mov	r2, r1
 800206c:	80fb      	strh	r3, [r7, #6]
 800206e:	4613      	mov	r3, r2
 8002070:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002072:	797a      	ldrb	r2, [r7, #5]
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fef9 	bl	8001e70 <I2Cx_ReadData>
 800207e:	4603      	mov	r3, r0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002092:	2300      	movs	r3, #0
 8002094:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800209e:	4b58      	ldr	r3, [pc, #352]	@ (8002200 <BSP_ACCELERO_Init+0x178>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4798      	blx	r3
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b33      	cmp	r3, #51	@ 0x33
 80020a8:	d14f      	bne.n	800214a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80020aa:	4b56      	ldr	r3, [pc, #344]	@ (8002204 <BSP_ACCELERO_Init+0x17c>)
 80020ac:	4a54      	ldr	r2, [pc, #336]	@ (8002200 <BSP_ACCELERO_Init+0x178>)
 80020ae:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80020b4:	2340      	movs	r3, #64	@ 0x40
 80020b6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80020b8:	2307      	movs	r3, #7
 80020ba:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80020bc:	2300      	movs	r3, #0
 80020be:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 80020c0:	2300      	movs	r3, #0
 80020c2:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 80020c4:	2300      	movs	r3, #0
 80020c6:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 80020c8:	2308      	movs	r3, #8
 80020ca:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80020cc:	7b3a      	ldrb	r2, [r7, #12]
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	8abb      	ldrh	r3, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80020e2:	7c3a      	ldrb	r2, [r7, #16]
 80020e4:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	7cbb      	ldrb	r3, [r7, #18]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21b      	sxth	r3, r3
 8002102:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002104:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <BSP_ACCELERO_Init+0x17c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	8aba      	ldrh	r2, [r7, #20]
 800210c:	4610      	mov	r0, r2
 800210e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002114:	2310      	movs	r3, #16
 8002116:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002120:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8002122:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002124:	4313      	orrs	r3, r2
 8002126:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8002128:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800212a:	4313      	orrs	r3, r2
 800212c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800212e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8002130:	4313      	orrs	r3, r2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002136:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <BSP_ACCELERO_Init+0x17c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	8aba      	ldrh	r2, [r7, #20]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	4610      	mov	r0, r2
 8002142:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	75fb      	strb	r3, [r7, #23]
 8002148:	e054      	b.n	80021f4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800214a:	4b2f      	ldr	r3, [pc, #188]	@ (8002208 <BSP_ACCELERO_Init+0x180>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4798      	blx	r3
 8002150:	4603      	mov	r3, r0
 8002152:	2b33      	cmp	r3, #51	@ 0x33
 8002154:	d14e      	bne.n	80021f4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <BSP_ACCELERO_Init+0x17c>)
 8002158:	4a2b      	ldr	r2, [pc, #172]	@ (8002208 <BSP_ACCELERO_Init+0x180>)
 800215a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800215c:	2300      	movs	r3, #0
 800215e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8002160:	2340      	movs	r3, #64	@ 0x40
 8002162:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8002164:	2307      	movs	r3, #7
 8002166:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8002168:	2300      	movs	r3, #0
 800216a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800216c:	2300      	movs	r3, #0
 800216e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8002170:	2300      	movs	r3, #0
 8002172:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8002174:	2308      	movs	r3, #8
 8002176:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002178:	7b3a      	ldrb	r2, [r7, #12]
 800217a:	7b7b      	ldrb	r3, [r7, #13]
 800217c:	4313      	orrs	r3, r2
 800217e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8002180:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8002182:	4313      	orrs	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	8abb      	ldrh	r3, [r7, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800218e:	7c3a      	ldrb	r2, [r7, #16]
 8002190:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8002192:	4313      	orrs	r3, r2
 8002194:	b2da      	uxtb	r2, r3
 8002196:	7cbb      	ldrb	r3, [r7, #18]
 8002198:	4313      	orrs	r3, r2
 800219a:	b2da      	uxtb	r2, r3
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	4313      	orrs	r3, r2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <BSP_ACCELERO_Init+0x17c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	8aba      	ldrh	r2, [r7, #20]
 80021b8:	4610      	mov	r0, r2
 80021ba:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 80021c0:	2310      	movs	r3, #16
 80021c2:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021cc:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80021ce:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80021d4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80021da:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80021dc:	4313      	orrs	r3, r2
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <BSP_ACCELERO_Init+0x17c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	8aba      	ldrh	r2, [r7, #20]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4610      	mov	r0, r2
 80021ee:	4798      	blx	r3

    ret = ACCELERO_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000034 	.word	0x20000034
 8002204:	2000174c 	.word	0x2000174c
 8002208:	20000000 	.word	0x20000000

0800220c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8002218:	4b10      	ldr	r3, [pc, #64]	@ (800225c <BSP_ACCELERO_GetXYZ+0x50>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	2b00      	cmp	r3, #0
 8002220:	d018      	beq.n	8002254 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <BSP_ACCELERO_GetXYZ+0x50>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <BSP_ACCELERO_GetXYZ+0x50>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <BSP_ACCELERO_GetXYZ+0x54>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10e      	bne.n	8002254 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8002246:	89fb      	ldrh	r3, [r7, #14]
 8002248:	425b      	negs	r3, r3
 800224a:	b29a      	uxth	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3302      	adds	r3, #2
 8002250:	b212      	sxth	r2, r2
 8002252:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2000174c 	.word	0x2000174c
 8002260:	20000034 	.word	0x20000034

08002264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <HAL_MspInit+0x4c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <HAL_MspInit+0x4c>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002278:	6453      	str	r3, [r2, #68]	@ 0x44
 800227a:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <HAL_MspInit+0x4c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <HAL_MspInit+0x4c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	4a08      	ldr	r2, [pc, #32]	@ (80022b0 <HAL_MspInit+0x4c>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	@ 0x40
 8002296:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022a2:	2007      	movs	r0, #7
 80022a4:	f000 fb98 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_I2C_MspInit+0x84>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12c      	bne.n	8002330 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_I2C_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_I2C_MspInit+0x88>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_I2C_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80022f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f8:	2312      	movs	r3, #18
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002304:	2304      	movs	r3, #4
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	480c      	ldr	r0, [pc, #48]	@ (8002340 <HAL_I2C_MspInit+0x8c>)
 8002310:	f000 fba4 	bl	8002a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_I2C_MspInit+0x88>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	4a07      	ldr	r2, [pc, #28]	@ (800233c <HAL_I2C_MspInit+0x88>)
 800231e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002322:	6413      	str	r3, [r2, #64]	@ 0x40
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_I2C_MspInit+0x88>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40005400 	.word	0x40005400
 800233c:	40023800 	.word	0x40023800
 8002340:	40020400 	.word	0x40020400

08002344 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <HAL_I2C_MspDeInit+0x38>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10e      	bne.n	8002374 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_I2C_MspDeInit+0x3c>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	4a09      	ldr	r2, [pc, #36]	@ (8002380 <HAL_I2C_MspDeInit+0x3c>)
 800235c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002360:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8002362:	2140      	movs	r1, #64	@ 0x40
 8002364:	4807      	ldr	r0, [pc, #28]	@ (8002384 <HAL_I2C_MspDeInit+0x40>)
 8002366:	f000 fcfd 	bl	8002d64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800236a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800236e:	4805      	ldr	r0, [pc, #20]	@ (8002384 <HAL_I2C_MspDeInit+0x40>)
 8002370:	f000 fcf8 	bl	8002d64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40005400 	.word	0x40005400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	@ 0x38
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a59      	ldr	r2, [pc, #356]	@ (800250c <HAL_I2S_MspInit+0x184>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d15b      	bne.n	8002462 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	4b58      	ldr	r3, [pc, #352]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a57      	ldr	r2, [pc, #348]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b55      	ldr	r3, [pc, #340]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	623b      	str	r3, [r7, #32]
 80023c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	4b51      	ldr	r3, [pc, #324]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a50      	ldr	r2, [pc, #320]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a49      	ldr	r2, [pc, #292]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023fe:	2304      	movs	r3, #4
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800240e:	2306      	movs	r3, #6
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002416:	4619      	mov	r1, r3
 8002418:	483e      	ldr	r0, [pc, #248]	@ (8002514 <HAL_I2S_MspInit+0x18c>)
 800241a:	f000 fb1f 	bl	8002a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800241e:	2308      	movs	r3, #8
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800242e:	2305      	movs	r3, #5
 8002430:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4836      	ldr	r0, [pc, #216]	@ (8002514 <HAL_I2S_MspInit+0x18c>)
 800243a:	f000 fb0f 	bl	8002a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800243e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002450:	2305      	movs	r3, #5
 8002452:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	482f      	ldr	r0, [pc, #188]	@ (8002518 <HAL_I2S_MspInit+0x190>)
 800245c:	f000 fafe 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002460:	e04f      	b.n	8002502 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2d      	ldr	r2, [pc, #180]	@ (800251c <HAL_I2S_MspInit+0x194>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d14a      	bne.n	8002502 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	4b27      	ldr	r3, [pc, #156]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	4a26      	ldr	r2, [pc, #152]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 8002476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800247a:	6413      	str	r3, [r2, #64]	@ 0x40
 800247c:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6313      	str	r3, [r2, #48]	@ 0x30
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_I2S_MspInit+0x188>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80024c0:	2310      	movs	r3, #16
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024d0:	2306      	movs	r3, #6
 80024d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d8:	4619      	mov	r1, r3
 80024da:	4811      	ldr	r0, [pc, #68]	@ (8002520 <HAL_I2S_MspInit+0x198>)
 80024dc:	f000 fabe 	bl	8002a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80024e0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024f2:	2306      	movs	r3, #6
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	@ (8002514 <HAL_I2S_MspInit+0x18c>)
 80024fe:	f000 faad 	bl	8002a5c <HAL_GPIO_Init>
}
 8002502:	bf00      	nop
 8002504:	3738      	adds	r7, #56	@ 0x38
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40003800 	.word	0x40003800
 8002510:	40023800 	.word	0x40023800
 8002514:	40020800 	.word	0x40020800
 8002518:	40020400 	.word	0x40020400
 800251c:	40003c00 	.word	0x40003c00
 8002520:	40020000 	.word	0x40020000

08002524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_SPI_MspInit+0x84>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d12b      	bne.n	800259e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_SPI_MspInit+0x88>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_SPI_MspInit+0x88>)
 8002550:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_SPI_MspInit+0x88>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_SPI_MspInit+0x88>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <HAL_SPI_MspInit+0x88>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_SPI_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800257e:	23e0      	movs	r3, #224	@ 0xe0
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <HAL_SPI_MspInit+0x8c>)
 800259a:	f000 fa5f 	bl	8002a5c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40013000 	.word	0x40013000
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020000 	.word	0x40020000

080025b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <NMI_Handler+0x4>

080025bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <HardFault_Handler+0x4>

080025c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <MemManage_Handler+0x4>

080025cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <UsageFault_Handler+0x4>

080025dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260a:	f000 f8d1 	bl	80027b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <OTG_FS_IRQHandler+0x10>)
 800261a:	f002 fae7 	bl	8004bec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20002c38 	.word	0x20002c38

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f00b fd34 	bl	800e0c4 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20020000 	.word	0x20020000
 8002688:	00000800 	.word	0x00000800
 800268c:	20001750 	.word	0x20001750
 8002690:	20003548 	.word	0x20003548

08002694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026bc:	f7ff ffea 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	@ (80026f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	@ (80026f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026e6:	f00b fcf3 	bl	800e0d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ea:	f7ff f85b 	bl	80017a4 <main>
  bx  lr    
 80026ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	20000c00 	.word	0x20000c00
  ldr r2, =_sidata
 80026fc:	0802a440 	.word	0x0802a440
  ldr r2, =_sbss
 8002700:	20000c00 	.word	0x20000c00
  ldr r4, =_ebss
 8002704:	20003544 	.word	0x20003544

08002708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC_IRQHandler>
	...

0800270c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_Init+0x40>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0d      	ldr	r2, [pc, #52]	@ (800274c <HAL_Init+0x40>)
 8002716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800271a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <HAL_Init+0x40>)
 8002722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_Init+0x40>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002734:	2003      	movs	r0, #3
 8002736:	f000 f94f 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273a:	2000      	movs	r0, #0
 800273c:	f000 f808 	bl	8002750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002740:	f7ff fd90 	bl	8002264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023c00 	.word	0x40023c00

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_InitTick+0x54>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <HAL_InitTick+0x58>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002766:	fbb3 f3f1 	udiv	r3, r3, r1
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f967 	bl	8002a42 <HAL_SYSTICK_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00e      	b.n	800279c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d80a      	bhi.n	800279a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f000 f92f 	bl	80029ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002790:	4a06      	ldr	r2, [pc, #24]	@ (80027ac <HAL_InitTick+0x5c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000074 	.word	0x20000074
 80027a8:	2000007c 	.word	0x2000007c
 80027ac:	20000078 	.word	0x20000078

080027b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_IncTick+0x20>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_IncTick+0x24>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <HAL_IncTick+0x24>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	2000007c 	.word	0x2000007c
 80027d4:	20001754 	.word	0x20001754

080027d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return uwTick;
 80027dc:	4b03      	ldr	r3, [pc, #12]	@ (80027ec <HAL_GetTick+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20001754 	.word	0x20001754

080027f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff ffee 	bl	80027d8 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d005      	beq.n	8002816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_Delay+0x44>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002816:	bf00      	nop
 8002818:	f7ff ffde 	bl	80027d8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8f7      	bhi.n	8002818 <HAL_Delay+0x28>
  {
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000007c 	.word	0x2000007c

08002838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002848:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286a:	4a04      	ldr	r2, [pc, #16]	@ (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	60d3      	str	r3, [r2, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <__NVIC_GetPriorityGrouping+0x18>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 0307 	and.w	r3, r3, #7
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	db0b      	blt.n	80028c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4907      	ldr	r1, [pc, #28]	@ (80028d4 <__NVIC_EnableIRQ+0x38>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2001      	movs	r0, #1
 80028be:	fa00 f202 	lsl.w	r2, r0, r2
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e100 	.word	0xe000e100

080028d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db0a      	blt.n	8002902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	490c      	ldr	r1, [pc, #48]	@ (8002924 <__NVIC_SetPriority+0x4c>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002900:	e00a      	b.n	8002918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4908      	ldr	r1, [pc, #32]	@ (8002928 <__NVIC_SetPriority+0x50>)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3b04      	subs	r3, #4
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	440b      	add	r3, r1
 8002916:	761a      	strb	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	@ 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	2b04      	cmp	r3, #4
 8002948:	bf28      	it	cs
 800294a:	2304      	movcs	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3304      	adds	r3, #4
 8002952:	2b06      	cmp	r3, #6
 8002954:	d902      	bls.n	800295c <NVIC_EncodePriority+0x30>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3b03      	subs	r3, #3
 800295a:	e000      	b.n	800295e <NVIC_EncodePriority+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	401a      	ands	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43d9      	mvns	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	4313      	orrs	r3, r2
         );
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	@ 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a4:	d301      	bcc.n	80029aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00f      	b.n	80029ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <SysTick_Config+0x40>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b2:	210f      	movs	r1, #15
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	f7ff ff8e 	bl	80028d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <SysTick_Config+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c2:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <SysTick_Config+0x40>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff29 	bl	8002838 <__NVIC_SetPriorityGrouping>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a00:	f7ff ff3e 	bl	8002880 <__NVIC_GetPriorityGrouping>
 8002a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff8e 	bl	800292c <NVIC_EncodePriority>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff5d 	bl	80028d8 <__NVIC_SetPriority>
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff31 	bl	800289c <__NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffa2 	bl	8002994 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e159      	b.n	8002d2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	f040 8148 	bne.w	8002d26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d005      	beq.n	8002aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d130      	bne.n	8002b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d017      	beq.n	8002b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d123      	bne.n	8002ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a2 	beq.w	8002d26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b57      	ldr	r3, [pc, #348]	@ (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4a56      	ldr	r2, [pc, #344]	@ (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf2:	4b54      	ldr	r3, [pc, #336]	@ (8002d44 <HAL_GPIO_Init+0x2e8>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfe:	4a52      	ldr	r2, [pc, #328]	@ (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a49      	ldr	r2, [pc, #292]	@ (8002d4c <HAL_GPIO_Init+0x2f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x202>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a48      	ldr	r2, [pc, #288]	@ (8002d50 <HAL_GPIO_Init+0x2f4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x1fe>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a47      	ldr	r2, [pc, #284]	@ (8002d54 <HAL_GPIO_Init+0x2f8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x1fa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a46      	ldr	r2, [pc, #280]	@ (8002d58 <HAL_GPIO_Init+0x2fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x1f6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a45      	ldr	r2, [pc, #276]	@ (8002d5c <HAL_GPIO_Init+0x300>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x1f2>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e008      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c4e:	2307      	movs	r3, #7
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x204>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f002 0203 	and.w	r2, r2, #3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c70:	4935      	ldr	r1, [pc, #212]	@ (8002d48 <HAL_GPIO_Init+0x2ec>)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7e:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ccc:	4a24      	ldr	r2, [pc, #144]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd2:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d20:	4a0f      	ldr	r2, [pc, #60]	@ (8002d60 <HAL_GPIO_Init+0x304>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	f67f aea2 	bls.w	8002a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40020c00 	.word	0x40020c00
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e0bb      	b.n	8002ef8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d80:	2201      	movs	r2, #1
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f040 80ab 	bne.w	8002ef2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f10 <HAL_GPIO_DeInit+0x1ac>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	220f      	movs	r2, #15
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a54      	ldr	r2, [pc, #336]	@ (8002f14 <HAL_GPIO_DeInit+0x1b0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d019      	beq.n	8002dfa <HAL_GPIO_DeInit+0x96>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a53      	ldr	r2, [pc, #332]	@ (8002f18 <HAL_GPIO_DeInit+0x1b4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_GPIO_DeInit+0x92>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	@ (8002f1c <HAL_GPIO_DeInit+0x1b8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00d      	beq.n	8002df2 <HAL_GPIO_DeInit+0x8e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a51      	ldr	r2, [pc, #324]	@ (8002f20 <HAL_GPIO_DeInit+0x1bc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <HAL_GPIO_DeInit+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a50      	ldr	r2, [pc, #320]	@ (8002f24 <HAL_GPIO_DeInit+0x1c0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_GPIO_DeInit+0x86>
 8002de6:	2304      	movs	r3, #4
 8002de8:	e008      	b.n	8002dfc <HAL_GPIO_DeInit+0x98>
 8002dea:	2307      	movs	r3, #7
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_DeInit+0x98>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_DeInit+0x98>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_DeInit+0x98>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_DeInit+0x98>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d132      	bne.n	8002e72 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e0c:	4b46      	ldr	r3, [pc, #280]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	4944      	ldr	r1, [pc, #272]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e1a:	4b43      	ldr	r3, [pc, #268]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	4941      	ldr	r1, [pc, #260]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e28:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	493d      	ldr	r1, [pc, #244]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e36:	4b3c      	ldr	r3, [pc, #240]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	493a      	ldr	r1, [pc, #232]	@ (8002f28 <HAL_GPIO_DeInit+0x1c4>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e54:	4a2e      	ldr	r2, [pc, #184]	@ (8002f10 <HAL_GPIO_DeInit+0x1ac>)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	43da      	mvns	r2, r3
 8002e64:	482a      	ldr	r0, [pc, #168]	@ (8002f10 <HAL_GPIO_DeInit+0x1ac>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2103      	movs	r1, #3
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	401a      	ands	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	08d2      	lsrs	r2, r2, #3
 8002ea8:	4019      	ands	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2103      	movs	r1, #3
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	2103      	movs	r1, #3
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	f67f af40 	bls.w	8002d80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40013800 	.word	0x40013800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e12b      	b.n	80031ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff f994 	bl	80022b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	@ 0x24
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f003 fb8e 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a81      	ldr	r2, [pc, #516]	@ (80031d4 <HAL_I2C_Init+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d807      	bhi.n	8002fe4 <HAL_I2C_Init+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a80      	ldr	r2, [pc, #512]	@ (80031d8 <HAL_I2C_Init+0x278>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e006      	b.n	8002ff2 <HAL_I2C_Init+0x92>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a7d      	ldr	r2, [pc, #500]	@ (80031dc <HAL_I2C_Init+0x27c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	bf94      	ite	ls
 8002fec:	2301      	movls	r3, #1
 8002fee:	2300      	movhi	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0e7      	b.n	80031ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a78      	ldr	r2, [pc, #480]	@ (80031e0 <HAL_I2C_Init+0x280>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_I2C_Init+0x274>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d802      	bhi.n	8003034 <HAL_I2C_Init+0xd4>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3301      	adds	r3, #1
 8003032:	e009      	b.n	8003048 <HAL_I2C_Init+0xe8>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	4a69      	ldr	r2, [pc, #420]	@ (80031e4 <HAL_I2C_Init+0x284>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	3301      	adds	r3, #1
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800305a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	495c      	ldr	r1, [pc, #368]	@ (80031d4 <HAL_I2C_Init+0x274>)
 8003064:	428b      	cmp	r3, r1
 8003066:	d819      	bhi.n	800309c <HAL_I2C_Init+0x13c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e59      	subs	r1, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fbb1 f3f3 	udiv	r3, r1, r3
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800307c:	400b      	ands	r3, r1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_I2C_Init+0x138>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	e051      	b.n	800313c <HAL_I2C_Init+0x1dc>
 8003098:	2304      	movs	r3, #4
 800309a:	e04f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <HAL_I2C_Init+0x168>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e012      	b.n	80030ee <HAL_I2C_Init+0x18e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x196>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e022      	b.n	800313c <HAL_I2C_Init+0x1dc>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <HAL_I2C_Init+0x1bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e58      	subs	r0, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	440b      	add	r3, r1
 800310c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800311a:	e00f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6809      	ldr	r1, [r1, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800316a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6911      	ldr	r1, [r2, #16]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	000186a0 	.word	0x000186a0
 80031d8:	001e847f 	.word	0x001e847f
 80031dc:	003d08ff 	.word	0x003d08ff
 80031e0:	431bde83 	.word	0x431bde83
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e021      	b.n	800323e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	@ 0x24
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff f896 	bl	8002344 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	460b      	mov	r3, r1
 800325c:	813b      	strh	r3, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003262:	f7ff fab9 	bl	80027d8 <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	f040 80d9 	bne.w	8003428 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	2319      	movs	r3, #25
 800327c:	2201      	movs	r2, #1
 800327e:	496d      	ldr	r1, [pc, #436]	@ (8003434 <HAL_I2C_Mem_Write+0x1ec>)
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fc99 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
 800328e:	e0cc      	b.n	800342a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_I2C_Mem_Write+0x56>
 800329a:	2302      	movs	r3, #2
 800329c:	e0c5      	b.n	800342a <HAL_I2C_Mem_Write+0x1e2>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d007      	beq.n	80032c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2221      	movs	r2, #33	@ 0x21
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2240      	movs	r2, #64	@ 0x40
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a4d      	ldr	r2, [pc, #308]	@ (8003438 <HAL_I2C_Mem_Write+0x1f0>)
 8003304:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003306:	88f8      	ldrh	r0, [r7, #6]
 8003308:	893a      	ldrh	r2, [r7, #8]
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4603      	mov	r3, r0
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fad0 	bl	80038bc <I2C_RequestMemoryWrite>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d052      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e081      	b.n	800342a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fd5e 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06b      	b.n	800342a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11b      	bne.n	80033c8 <HAL_I2C_Mem_Write+0x180>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d017      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1aa      	bne.n	8003326 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fd51 	bl	8003e7c <I2C_WaitOnBTFFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d107      	bne.n	80033f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e016      	b.n	800342a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	00100002 	.word	0x00100002
 8003438:	ffff0000 	.word	0xffff0000

0800343c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	@ 0x30
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	4608      	mov	r0, r1
 8003446:	4611      	mov	r1, r2
 8003448:	461a      	mov	r2, r3
 800344a:	4603      	mov	r3, r0
 800344c:	817b      	strh	r3, [r7, #10]
 800344e:	460b      	mov	r3, r1
 8003450:	813b      	strh	r3, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003456:	f7ff f9bf 	bl	80027d8 <HAL_GetTick>
 800345a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b20      	cmp	r3, #32
 8003466:	f040 8214 	bne.w	8003892 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2319      	movs	r3, #25
 8003470:	2201      	movs	r2, #1
 8003472:	497b      	ldr	r1, [pc, #492]	@ (8003660 <HAL_I2C_Mem_Read+0x224>)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fb9f 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
 8003482:	e207      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Mem_Read+0x56>
 800348e:	2302      	movs	r3, #2
 8003490:	e200      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d007      	beq.n	80034b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2222      	movs	r2, #34	@ 0x22
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2240      	movs	r2, #64	@ 0x40
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003664 <HAL_I2C_Mem_Read+0x228>)
 80034f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034fa:	88f8      	ldrh	r0, [r7, #6]
 80034fc:	893a      	ldrh	r2, [r7, #8]
 80034fe:	8979      	ldrh	r1, [r7, #10]
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4603      	mov	r3, r0
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 fa6c 	bl	80039e8 <I2C_RequestMemoryRead>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e1bc      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d113      	bne.n	800354a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e190      	b.n	800386c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11b      	bne.n	800358a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e170      	b.n	800386c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358e:	2b02      	cmp	r3, #2
 8003590:	d11b      	bne.n	80035ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	e150      	b.n	800386c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035e0:	e144      	b.n	800386c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	f200 80f1 	bhi.w	80037ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d123      	bne.n	800363c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fc87 	bl	8003f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e145      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800363a:	e117      	b.n	800386c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	2b02      	cmp	r3, #2
 8003642:	d14e      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364a:	2200      	movs	r2, #0
 800364c:	4906      	ldr	r1, [pc, #24]	@ (8003668 <HAL_I2C_Mem_Read+0x22c>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fab2 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e11a      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
 800365e:	bf00      	nop
 8003660:	00100002 	.word	0x00100002
 8003664:	ffff0000 	.word	0xffff0000
 8003668:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e0:	e0c4      	b.n	800386c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	2200      	movs	r2, #0
 80036ea:	496c      	ldr	r1, [pc, #432]	@ (800389c <HAL_I2C_Mem_Read+0x460>)
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa63 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0cb      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003744:	2200      	movs	r2, #0
 8003746:	4955      	ldr	r1, [pc, #340]	@ (800389c <HAL_I2C_Mem_Read+0x460>)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa35 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e09d      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037cc:	e04e      	b.n	800386c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fb9a 	bl	8003f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e058      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b04      	cmp	r3, #4
 8003820:	d124      	bne.n	800386c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	2b03      	cmp	r3, #3
 8003828:	d107      	bne.n	800383a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f aeb6 	bne.w	80035e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
  }
}
 8003894:	4618      	mov	r0, r3
 8003896:	3728      	adds	r7, #40	@ 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	00010004 	.word	0x00010004

080038a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ae:	b2db      	uxtb	r3, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f960 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800390c:	d103      	bne.n	8003916 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003914:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e05f      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	492d      	ldr	r1, [pc, #180]	@ (80039e4 <I2C_RequestMemoryWrite+0x128>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f9bb 	bl	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04c      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa46 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e02b      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003988:	893b      	ldrh	r3, [r7, #8]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]
 8003992:	e021      	b.n	80039d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003994:	893b      	ldrh	r3, [r7, #8]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	b29b      	uxth	r3, r3
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	6a39      	ldr	r1, [r7, #32]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa20 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d107      	bne.n	80039ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e005      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ce:	893b      	ldrh	r3, [r7, #8]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00010002 	.word	0x00010002

080039e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	4608      	mov	r0, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	817b      	strh	r3, [r7, #10]
 80039fa:	460b      	mov	r3, r1
 80039fc:	813b      	strh	r3, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f8c2 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a48:	d103      	bne.n	8003a52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0aa      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	4952      	ldr	r1, [pc, #328]	@ (8003bb4 <I2C_RequestMemoryRead+0x1cc>)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f91d 	bl	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e097      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f9a8 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e076      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac4:	893b      	ldrh	r3, [r7, #8]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	e021      	b.n	8003b14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad0:	893b      	ldrh	r3, [r7, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f982 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d107      	bne.n	8003b06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e050      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0a:	893b      	ldrh	r3, [r7, #8]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b16:	6a39      	ldr	r1, [r7, #32]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f967 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d107      	bne.n	8003b3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e035      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f82b 	bl	8003bb8 <I2C_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b76:	d103      	bne.n	8003b80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e013      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b84:	897b      	ldrh	r3, [r7, #10]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	6a3a      	ldr	r2, [r7, #32]
 8003b98:	4906      	ldr	r1, [pc, #24]	@ (8003bb4 <I2C_RequestMemoryRead+0x1cc>)
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f886 	bl	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	00010002 	.word	0x00010002

08003bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc8:	e048      	b.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d044      	beq.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fe01 	bl	80027d8 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d139      	bne.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10d      	bne.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	e00c      	b.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	43da      	mvns	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d116      	bne.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e023      	b.n	8003ca4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10d      	bne.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	e00c      	b.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d093      	beq.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cba:	e071      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cca:	d123      	bne.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e067      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d041      	beq.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fe fd5c 	bl	80027d8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d136      	bne.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10c      	bne.n	8003d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e00b      	b.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d016      	beq.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e021      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	0c1b      	lsrs	r3, r3, #16
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d10c      	bne.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	43da      	mvns	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e00b      	b.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f af6d 	bne.w	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df8:	e034      	b.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f8e3 	bl	8003fc6 <I2C_IsAcknowledgeFailed>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e034      	b.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d028      	beq.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fe fce1 	bl	80027d8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11d      	bne.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b80      	cmp	r3, #128	@ 0x80
 8003e34:	d016      	beq.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6e:	2b80      	cmp	r3, #128	@ 0x80
 8003e70:	d1c3      	bne.n	8003dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e88:	e034      	b.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f89b 	bl	8003fc6 <I2C_IsAcknowledgeFailed>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e034      	b.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d028      	beq.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe fc99 	bl	80027d8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11d      	bne.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d016      	beq.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e007      	b.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d1c3      	bne.n	8003e8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f18:	e049      	b.n	8003fae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d119      	bne.n	8003f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0210 	mvn.w	r2, #16
 8003f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e030      	b.n	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5c:	f7fe fc3c 	bl	80027d8 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d302      	bcc.n	8003f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11d      	bne.n	8003fae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d016      	beq.n	8003fae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d1ae      	bne.n	8003f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fdc:	d11b      	bne.n	8004016 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fe6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f043 0204 	orr.w	r2, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e128      	b.n	8004288 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a90      	ldr	r2, [pc, #576]	@ (8004290 <HAL_I2S_Init+0x26c>)
 800404e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fe f999 	bl	8002388 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800406c:	f023 030f 	bic.w	r3, r3, #15
 8004070:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2202      	movs	r2, #2
 8004078:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d060      	beq.n	8004144 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800408a:	2310      	movs	r3, #16
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e001      	b.n	8004094 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b20      	cmp	r3, #32
 800409a:	d802      	bhi.n	80040a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80040a2:	2001      	movs	r0, #1
 80040a4:	f002 fc22 	bl	80068ec <HAL_RCCEx_GetPeriphCLKFreq>
 80040a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b2:	d125      	bne.n	8004100 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	3305      	adds	r3, #5
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	e01f      	b.n	800411e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	3305      	adds	r3, #5
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e00e      	b.n	800411e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fbb2 f2f3 	udiv	r2, r2, r3
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	461a      	mov	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	3305      	adds	r3, #5
 800411c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4a5c      	ldr	r2, [pc, #368]	@ (8004294 <HAL_I2S_Init+0x270>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	08db      	lsrs	r3, r3, #3
 8004128:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e003      	b.n	800414c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004144:	2302      	movs	r3, #2
 8004146:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d902      	bls.n	8004158 <HAL_I2S_Init+0x134>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2bff      	cmp	r3, #255	@ 0xff
 8004156:	d907      	bls.n	8004168 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415c:	f043 0210 	orr.w	r2, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e08f      	b.n	8004288 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	ea42 0103 	orr.w	r1, r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	430a      	orrs	r2, r1
 800417a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004186:	f023 030f 	bic.w	r3, r3, #15
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6851      	ldr	r1, [r2, #4]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6892      	ldr	r2, [r2, #8]
 8004192:	4311      	orrs	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68d2      	ldr	r2, [r2, #12]
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6992      	ldr	r2, [r2, #24]
 800419e:	430a      	orrs	r2, r1
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d161      	bne.n	8004278 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a38      	ldr	r2, [pc, #224]	@ (8004298 <HAL_I2S_Init+0x274>)
 80041b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a37      	ldr	r2, [pc, #220]	@ (800429c <HAL_I2S_Init+0x278>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_I2S_Init+0x1a4>
 80041c4:	4b36      	ldr	r3, [pc, #216]	@ (80042a0 <HAL_I2S_Init+0x27c>)
 80041c6:	e001      	b.n	80041cc <HAL_I2S_Init+0x1a8>
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	4932      	ldr	r1, [pc, #200]	@ (800429c <HAL_I2S_Init+0x278>)
 80041d4:	428a      	cmp	r2, r1
 80041d6:	d101      	bne.n	80041dc <HAL_I2S_Init+0x1b8>
 80041d8:	4a31      	ldr	r2, [pc, #196]	@ (80042a0 <HAL_I2S_Init+0x27c>)
 80041da:	e001      	b.n	80041e0 <HAL_I2S_Init+0x1bc>
 80041dc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80041e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80041e4:	f023 030f 	bic.w	r3, r3, #15
 80041e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2b      	ldr	r2, [pc, #172]	@ (800429c <HAL_I2S_Init+0x278>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_I2S_Init+0x1d4>
 80041f4:	4b2a      	ldr	r3, [pc, #168]	@ (80042a0 <HAL_I2S_Init+0x27c>)
 80041f6:	e001      	b.n	80041fc <HAL_I2S_Init+0x1d8>
 80041f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fc:	2202      	movs	r2, #2
 80041fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a25      	ldr	r2, [pc, #148]	@ (800429c <HAL_I2S_Init+0x278>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_I2S_Init+0x1ea>
 800420a:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <HAL_I2S_Init+0x27c>)
 800420c:	e001      	b.n	8004212 <HAL_I2S_Init+0x1ee>
 800420e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421e:	d003      	beq.n	8004228 <HAL_I2S_Init+0x204>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	e001      	b.n	8004234 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800423e:	4313      	orrs	r3, r2
 8004240:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004248:	4313      	orrs	r3, r2
 800424a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004252:	4313      	orrs	r3, r2
 8004254:	b29a      	uxth	r2, r3
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	4313      	orrs	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004260:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a0d      	ldr	r2, [pc, #52]	@ (800429c <HAL_I2S_Init+0x278>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_I2S_Init+0x24c>
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <HAL_I2S_Init+0x27c>)
 800426e:	e001      	b.n	8004274 <HAL_I2S_Init+0x250>
 8004270:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004274:	897a      	ldrh	r2, [r7, #10]
 8004276:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	0800439b 	.word	0x0800439b
 8004294:	cccccccd 	.word	0xcccccccd
 8004298:	080044b1 	.word	0x080044b1
 800429c:	40003800 	.word	0x40003800
 80042a0:	40003400 	.word	0x40003400

080042a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	881a      	ldrh	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	1c9a      	adds	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10e      	bne.n	8004334 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004324:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ffb8 	bl	80042a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	b292      	uxth	r2, r2
 8004350:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10e      	bne.n	8004392 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004382:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff93 	bl	80042b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d13a      	bne.n	800442c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d109      	bne.n	80043d4 <I2S_IRQHandler+0x3a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d102      	bne.n	80043d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ffb4 	bl	800433c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043da:	2b40      	cmp	r3, #64	@ 0x40
 80043dc:	d126      	bne.n	800442c <I2S_IRQHandler+0x92>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d11f      	bne.n	800442c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff50 	bl	80042cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b03      	cmp	r3, #3
 8004436:	d136      	bne.n	80044a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d109      	bne.n	8004456 <I2S_IRQHandler+0xbc>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444c:	2b80      	cmp	r3, #128	@ 0x80
 800444e:	d102      	bne.n	8004456 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff45 	bl	80042e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b08      	cmp	r3, #8
 800445e:	d122      	bne.n	80044a6 <I2S_IRQHandler+0x10c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b20      	cmp	r3, #32
 800446c:	d11b      	bne.n	80044a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800447c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ff13 	bl	80042cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044a6:	bf00      	nop
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a92      	ldr	r2, [pc, #584]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044ca:	4b92      	ldr	r3, [pc, #584]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044cc:	e001      	b.n	80044d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a8b      	ldr	r2, [pc, #556]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d101      	bne.n	80044ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044e8:	4b8a      	ldr	r3, [pc, #552]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044ea:	e001      	b.n	80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fc:	d004      	beq.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 8099 	bne.w	800463a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d107      	bne.n	8004522 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f925 	bl	800476c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d107      	bne.n	800453c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9c8 	bl	80048cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d13a      	bne.n	80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d035      	beq.n	80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a6e      	ldr	r2, [pc, #440]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800455a:	4b6e      	ldr	r3, [pc, #440]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800455c:	e001      	b.n	8004562 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800455e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4969      	ldr	r1, [pc, #420]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800456a:	428b      	cmp	r3, r1
 800456c:	d101      	bne.n	8004572 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800456e:	4b69      	ldr	r3, [pc, #420]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004570:	e001      	b.n	8004576 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004572:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004576:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800457a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800458a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	f043 0202 	orr.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fe88 	bl	80042cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	f040 80c3 	bne.w	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80bd 	beq.w	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a49      	ldr	r2, [pc, #292]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045ee:	4b49      	ldr	r3, [pc, #292]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045f0:	e001      	b.n	80045f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4944      	ldr	r1, [pc, #272]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045fe:	428b      	cmp	r3, r1
 8004600:	d101      	bne.n	8004606 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004602:	4b44      	ldr	r3, [pc, #272]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004604:	e001      	b.n	800460a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004606:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800460a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800460e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004610:	2300      	movs	r3, #0
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	f043 0204 	orr.w	r2, r3, #4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fe4a 	bl	80042cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004638:	e089      	b.n	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d107      	bne.n	8004654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8be 	bl	80047d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8fd 	bl	8004868 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b40      	cmp	r3, #64	@ 0x40
 8004676:	d12f      	bne.n	80046d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02a      	beq.n	80046d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004690:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1e      	ldr	r2, [pc, #120]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800469c:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800469e:	e001      	b.n	80046a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80046a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4919      	ldr	r1, [pc, #100]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ac:	428b      	cmp	r3, r1
 80046ae:	d101      	bne.n	80046b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80046b0:	4b18      	ldr	r3, [pc, #96]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046b2:	e001      	b.n	80046b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80046b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f043 0202 	orr.w	r2, r3, #2
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff fdfa 	bl	80042cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d136      	bne.n	8004750 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d031      	beq.n	8004750 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a07      	ldr	r2, [pc, #28]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046f6:	4b07      	ldr	r3, [pc, #28]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046f8:	e001      	b.n	80046fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4902      	ldr	r1, [pc, #8]	@ (8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004706:	428b      	cmp	r3, r1
 8004708:	d106      	bne.n	8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800470a:	4b02      	ldr	r3, [pc, #8]	@ (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800470c:	e006      	b.n	800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800470e:	bf00      	nop
 8004710:	40003800 	.word	0x40003800
 8004714:	40003400 	.word	0x40003400
 8004718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800471c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004720:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004730:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	f043 0204 	orr.w	r2, r3, #4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fdc0 	bl	80042cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800474c:	e000      	b.n	8004750 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800474e:	bf00      	nop
}
 8004750:	bf00      	nop
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	1c99      	adds	r1, r3, #2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6251      	str	r1, [r2, #36]	@ 0x24
 800477e:	881a      	ldrh	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d113      	bne.n	80047c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ffc9 	bl	8004758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	1c99      	adds	r1, r3, #2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80047e2:	8819      	ldrh	r1, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <I2SEx_TxISR_I2SExt+0x90>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <I2SEx_TxISR_I2SExt+0x22>
 80047ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004864 <I2SEx_TxISR_I2SExt+0x94>)
 80047f0:	e001      	b.n	80047f6 <I2SEx_TxISR_I2SExt+0x26>
 80047f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047f6:	460a      	mov	r2, r1
 80047f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d121      	bne.n	8004856 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a12      	ldr	r2, [pc, #72]	@ (8004860 <I2SEx_TxISR_I2SExt+0x90>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <I2SEx_TxISR_I2SExt+0x50>
 800481c:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <I2SEx_TxISR_I2SExt+0x94>)
 800481e:	e001      	b.n	8004824 <I2SEx_TxISR_I2SExt+0x54>
 8004820:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	490d      	ldr	r1, [pc, #52]	@ (8004860 <I2SEx_TxISR_I2SExt+0x90>)
 800482c:	428b      	cmp	r3, r1
 800482e:	d101      	bne.n	8004834 <I2SEx_TxISR_I2SExt+0x64>
 8004830:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <I2SEx_TxISR_I2SExt+0x94>)
 8004832:	e001      	b.n	8004838 <I2SEx_TxISR_I2SExt+0x68>
 8004834:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004838:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800483c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ff81 	bl	8004758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40003800 	.word	0x40003800
 8004864:	40003400 	.word	0x40003400

08004868 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68d8      	ldr	r0, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	1c99      	adds	r1, r3, #2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004880:	b282      	uxth	r2, r0
 8004882:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d113      	bne.n	80048c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ff4a 	bl	8004758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a20      	ldr	r2, [pc, #128]	@ (800495c <I2SEx_RxISR_I2SExt+0x90>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <I2SEx_RxISR_I2SExt+0x16>
 80048de:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <I2SEx_RxISR_I2SExt+0x94>)
 80048e0:	e001      	b.n	80048e6 <I2SEx_RxISR_I2SExt+0x1a>
 80048e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048e6:	68d8      	ldr	r0, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	1c99      	adds	r1, r3, #2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80048f2:	b282      	uxth	r2, r0
 80048f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d121      	bne.n	8004952 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a12      	ldr	r2, [pc, #72]	@ (800495c <I2SEx_RxISR_I2SExt+0x90>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <I2SEx_RxISR_I2SExt+0x50>
 8004918:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <I2SEx_RxISR_I2SExt+0x94>)
 800491a:	e001      	b.n	8004920 <I2SEx_RxISR_I2SExt+0x54>
 800491c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	490d      	ldr	r1, [pc, #52]	@ (800495c <I2SEx_RxISR_I2SExt+0x90>)
 8004928:	428b      	cmp	r3, r1
 800492a:	d101      	bne.n	8004930 <I2SEx_RxISR_I2SExt+0x64>
 800492c:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <I2SEx_RxISR_I2SExt+0x94>)
 800492e:	e001      	b.n	8004934 <I2SEx_RxISR_I2SExt+0x68>
 8004930:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004934:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004938:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff03 	bl	8004758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40003800 	.word	0x40003800
 8004960:	40003400 	.word	0x40003400

08004964 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e101      	b.n	8004b7a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f005 fda5 	bl	800a4e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2203      	movs	r2, #3
 800499a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049a4:	d102      	bne.n	80049ac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 f99e 	bl	8006cf2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	7c1a      	ldrb	r2, [r3, #16]
 80049be:	f88d 2000 	strb.w	r2, [sp]
 80049c2:	3304      	adds	r3, #4
 80049c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049c6:	f002 f87c 	bl	8006ac2 <USB_CoreInit>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0ce      	b.n	8004b7a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f002 f996 	bl	8006d14 <USB_SetCurrentMode>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e0bf      	b.n	8004b7a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
 80049fe:	e04a      	b.n	8004a96 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3315      	adds	r3, #21
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	3314      	adds	r3, #20
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	b298      	uxth	r0, r3
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	332e      	adds	r3, #46	@ 0x2e
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	3318      	adds	r3, #24
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	331c      	adds	r3, #28
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a68:	7bfa      	ldrb	r2, [r7, #15]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3320      	adds	r3, #32
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	3324      	adds	r3, #36	@ 0x24
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	3301      	adds	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	791b      	ldrb	r3, [r3, #4]
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d3af      	bcc.n	8004a00 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	e044      	b.n	8004b30 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aa6:	7bfa      	ldrb	r2, [r7, #15]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004abc:	7bfa      	ldrb	r2, [r7, #15]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ace:	7bfa      	ldrb	r2, [r7, #15]
 8004ad0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ad2:	7bfa      	ldrb	r2, [r7, #15]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ae8:	7bfa      	ldrb	r2, [r7, #15]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	791b      	ldrb	r3, [r3, #4]
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d3b5      	bcc.n	8004aa6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7c1a      	ldrb	r2, [r3, #16]
 8004b42:	f88d 2000 	strb.w	r2, [sp]
 8004b46:	3304      	adds	r3, #4
 8004b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b4a:	f002 f92f 	bl	8006dac <USB_DevInit>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e00c      	b.n	8004b7a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f003 f973 	bl	8007e5e <USB_DevDisconnect>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_PCD_Start+0x1c>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e022      	b.n	8004be4 <HAL_PCD_Start+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d105      	bne.n	8004bc6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f002 f880 	bl	8006cd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f003 f921 	bl	8007e1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b08d      	sub	sp, #52	@ 0x34
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 f9df 	bl	8007fc6 <USB_GetMode>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 848c 	bne.w	8005528 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f003 f943 	bl	8007ea0 <USB_ReadInterrupts>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8482 	beq.w	8005526 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 f930 	bl	8007ea0 <USB_ReadInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d107      	bne.n	8004c5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f002 0202 	and.w	r2, r2, #2
 8004c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f003 f91e 	bl	8007ea0 <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d161      	bne.n	8004d32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0210 	bic.w	r2, r2, #16
 8004c7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	0c5b      	lsrs	r3, r3, #17
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d124      	bne.n	8004cf4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d035      	beq.n	8004d22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6a38      	ldr	r0, [r7, #32]
 8004cca:	f002 ff55 	bl	8007b78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cda:	441a      	add	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cec:	441a      	add	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	615a      	str	r2, [r3, #20]
 8004cf2:	e016      	b.n	8004d22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	0c5b      	lsrs	r3, r3, #17
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	2b06      	cmp	r3, #6
 8004cfe:	d110      	bne.n	8004d22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d06:	2208      	movs	r2, #8
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6a38      	ldr	r0, [r7, #32]
 8004d0c:	f002 ff34 	bl	8007b78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d1c:	441a      	add	r2, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0210 	orr.w	r2, r2, #16
 8004d30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f003 f8b2 	bl	8007ea0 <USB_ReadInterrupts>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d46:	f040 80a7 	bne.w	8004e98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 f8b7 	bl	8007ec6 <USB_ReadDevAllOutEpInterrupt>
 8004d58:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004d5a:	e099      	b.n	8004e90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 808e 	beq.w	8004e84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f003 f8db 	bl	8007f2e <USB_ReadDevOutEPInterrupt>
 8004d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d90:	461a      	mov	r2, r3
 8004d92:	2301      	movs	r3, #1
 8004d94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fea1 	bl	8005ae0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	461a      	mov	r2, r3
 8004db6:	2308      	movs	r3, #8
 8004db8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004dba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 ff77 	bl	8005cb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2310      	movs	r3, #16
 8004ddc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d030      	beq.n	8004e4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df0:	2b80      	cmp	r3, #128	@ 0x80
 8004df2:	d109      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4413      	add	r3, r2
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	78db      	ldrb	r3, [r3, #3]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d108      	bne.n	8004e38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f005 fc5e 	bl	800a6f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e44:	461a      	mov	r2, r3
 8004e46:	2302      	movs	r3, #2
 8004e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e60:	461a      	mov	r2, r3
 8004e62:	2320      	movs	r3, #32
 8004e64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	3301      	adds	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f47f af62 	bne.w	8004d5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f002 ffff 	bl	8007ea0 <USB_ReadInterrupts>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eac:	f040 80db 	bne.w	8005066 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f003 f820 	bl	8007efa <USB_ReadDevAllInEpInterrupt>
 8004eba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004ec0:	e0cd      	b.n	800505e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80c2 	beq.w	8005052 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f003 f846 	bl	8007f6a <USB_ReadDevInEPInterrupt>
 8004ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d057      	beq.n	8004f9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69f9      	ldr	r1, [r7, #28]
 8004f06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	799b      	ldrb	r3, [r3, #6]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d132      	bne.n	8004f8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	3320      	adds	r3, #32
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3e:	4613      	mov	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4403      	add	r3, r0
 8004f48:	331c      	adds	r3, #28
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4419      	add	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4403      	add	r3, r0
 8004f5c:	3320      	adds	r3, #32
 8004f5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d113      	bne.n	8004f8e <HAL_PCD_IRQHandler+0x3a2>
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3324      	adds	r3, #36	@ 0x24
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d108      	bne.n	8004f8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f86:	461a      	mov	r2, r3
 8004f88:	2101      	movs	r1, #1
 8004f8a:	f003 f84d 	bl	8008028 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f005 fb32 	bl	800a5fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2310      	movs	r3, #16
 8004fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2340      	movs	r3, #64	@ 0x40
 8004fec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d023      	beq.n	8005040 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ffa:	6a38      	ldr	r0, [r7, #32]
 8004ffc:	f002 f83a 	bl	8007074 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	3310      	adds	r3, #16
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	3304      	adds	r3, #4
 8005012:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	78db      	ldrb	r3, [r3, #3]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d108      	bne.n	800502e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	b2db      	uxtb	r3, r3
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f005 fb75 	bl	800a718 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503a:	461a      	mov	r2, r3
 800503c:	2302      	movs	r3, #2
 800503e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800504a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fcbb 	bl	80059c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	3301      	adds	r3, #1
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	2b00      	cmp	r3, #0
 8005062:	f47f af2e 	bne.w	8004ec2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f002 ff18 	bl	8007ea0 <USB_ReadInterrupts>
 8005070:	4603      	mov	r3, r0
 8005072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800507a:	d122      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050a2:	2100      	movs	r1, #0
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fea1 	bl	8005dec <HAL_PCDEx_LPM_Callback>
 80050aa:	e002      	b.n	80050b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f005 fb13 	bl	800a6d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80050c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f002 feea 	bl	8007ea0 <USB_ReadInterrupts>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050d6:	d112      	bne.n	80050fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d102      	bne.n	80050ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f005 facf 	bl	800a68c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80050fc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f002 fecc 	bl	8007ea0 <USB_ReadInterrupts>
 8005108:	4603      	mov	r3, r0
 800510a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005112:	f040 80b7 	bne.w	8005284 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2110      	movs	r1, #16
 8005130:	4618      	mov	r0, r3
 8005132:	f001 ff9f 	bl	8007074 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800513a:	e046      	b.n	80051ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800514e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800516a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800516e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517c:	461a      	mov	r2, r3
 800517e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005182:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800519e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c6:	3301      	adds	r3, #1
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d3b2      	bcc.n	800513c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80051e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7bdb      	ldrb	r3, [r3, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005202:	f043 030b 	orr.w	r3, r3, #11
 8005206:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005218:	f043 030b 	orr.w	r3, r3, #11
 800521c:	6453      	str	r3, [r2, #68]	@ 0x44
 800521e:	e015      	b.n	800524c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800522e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005232:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005236:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005246:	f043 030b 	orr.w	r3, r3, #11
 800524a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800525a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800525e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800526e:	461a      	mov	r2, r3
 8005270:	f002 feda 	bl	8008028 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fe09 	bl	8007ea0 <USB_ReadInterrupts>
 800528e:	4603      	mov	r3, r0
 8005290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005298:	d123      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f002 fe9f 	bl	8007fe2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 ff5c 	bl	8007166 <USB_GetDevSpeed>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681c      	ldr	r4, [r3, #0]
 80052ba:	f001 fa07 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 80052be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052c4:	461a      	mov	r2, r3
 80052c6:	4620      	mov	r0, r4
 80052c8:	f001 fc60 	bl	8006b8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f005 f9be 	bl	800a64e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80052e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f002 fdda 	bl	8007ea0 <USB_ReadInterrupts>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d10a      	bne.n	800530c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f005 f99b 	bl	800a632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f002 0208 	and.w	r2, r2, #8
 800530a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f002 fdc5 	bl	8007ea0 <USB_ReadInterrupts>
 8005316:	4603      	mov	r3, r0
 8005318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531c:	2b80      	cmp	r3, #128	@ 0x80
 800531e:	d123      	bne.n	8005368 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800532c:	2301      	movs	r3, #1
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005330:	e014      	b.n	800535c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	b2db      	uxtb	r3, r3
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fb08 	bl	8005966 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	3301      	adds	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	791b      	ldrb	r3, [r3, #4]
 8005360:	461a      	mov	r2, r3
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	4293      	cmp	r3, r2
 8005366:	d3e4      	bcc.n	8005332 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f002 fd97 	bl	8007ea0 <USB_ReadInterrupts>
 8005372:	4603      	mov	r3, r0
 8005374:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005378:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800537c:	d13c      	bne.n	80053f8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800537e:	2301      	movs	r3, #1
 8005380:	627b      	str	r3, [r7, #36]	@ 0x24
 8005382:	e02b      	b.n	80053dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3318      	adds	r3, #24
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d115      	bne.n	80053d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80053aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	da12      	bge.n	80053d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	3317      	adds	r3, #23
 80053c0:	2201      	movs	r2, #1
 80053c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fac8 	bl	8005966 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	3301      	adds	r3, #1
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	791b      	ldrb	r3, [r3, #4]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d3cd      	bcc.n	8005384 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80053f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f002 fd4f 	bl	8007ea0 <USB_ReadInterrupts>
 8005402:	4603      	mov	r3, r0
 8005404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005408:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800540c:	d156      	bne.n	80054bc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800540e:	2301      	movs	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
 8005412:	e045      	b.n	80054a0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005428:	4613      	mov	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d12e      	bne.n	800549a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800543c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800543e:	2b00      	cmp	r3, #0
 8005440:	da2b      	bge.n	800549a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800544e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005452:	429a      	cmp	r2, r3
 8005454:	d121      	bne.n	800549a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005496:	6053      	str	r3, [r2, #4]
            break;
 8005498:	e008      	b.n	80054ac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	3301      	adds	r3, #1
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	791b      	ldrb	r3, [r3, #4]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d3b3      	bcc.n	8005414 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80054ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f002 fced 	bl	8007ea0 <USB_ReadInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d0:	d10a      	bne.n	80054e8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f005 f932 	bl	800a73c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80054e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f002 fcd7 	bl	8007ea0 <USB_ReadInterrupts>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d115      	bne.n	8005528 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f005 f922 	bl	800a758 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	e000      	b.n	8005528 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005526:	bf00      	nop
    }
  }
}
 8005528:	3734      	adds	r7, #52	@ 0x34
 800552a:	46bd      	mov	sp, r7
 800552c:	bd90      	pop	{r4, r7, pc}

0800552e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_PCD_SetAddress+0x1a>
 8005544:	2302      	movs	r3, #2
 8005546:	e012      	b.n	800556e <HAL_PCD_SetAddress+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f002 fc36 	bl	8007dd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	4608      	mov	r0, r1
 8005580:	4611      	mov	r1, r2
 8005582:	461a      	mov	r2, r3
 8005584:	4603      	mov	r3, r0
 8005586:	70fb      	strb	r3, [r7, #3]
 8005588:	460b      	mov	r3, r1
 800558a:	803b      	strh	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005598:	2b00      	cmp	r3, #0
 800559a:	da0f      	bge.n	80055bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	f003 020f 	and.w	r2, r3, #15
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	3310      	adds	r3, #16
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	3304      	adds	r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	705a      	strb	r2, [r3, #1]
 80055ba:	e00f      	b.n	80055dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	3304      	adds	r3, #4
 80055d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055e8:	883a      	ldrh	r2, [r7, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	78ba      	ldrb	r2, [r7, #2]
 80055f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005606:	78bb      	ldrb	r3, [r7, #2]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d102      	bne.n	8005612 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_PCD_EP_Open+0xaa>
 800561c:	2302      	movs	r3, #2
 800561e:	e00e      	b.n	800563e <HAL_PCD_EP_Open+0xc8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68f9      	ldr	r1, [r7, #12]
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fdbe 	bl	80071b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800563c:	7afb      	ldrb	r3, [r7, #11]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da0f      	bge.n	800567a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	f003 020f 	and.w	r2, r3, #15
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	3310      	adds	r3, #16
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	3304      	adds	r3, #4
 8005670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	705a      	strb	r2, [r3, #1]
 8005678:	e00f      	b.n	800569a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f003 020f 	and.w	r2, r3, #15
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	3304      	adds	r3, #4
 8005692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_PCD_EP_Close+0x6e>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e00e      	b.n	80056d2 <HAL_PCD_EP_Close+0x8c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68f9      	ldr	r1, [r7, #12]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fdfc 	bl	80072c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	460b      	mov	r3, r1
 80056e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ea:	7afb      	ldrb	r3, [r7, #11]
 80056ec:	f003 020f 	and.w	r2, r3, #15
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	3304      	adds	r3, #4
 8005702:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800571c:	7afb      	ldrb	r3, [r7, #11]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	b2da      	uxtb	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	799b      	ldrb	r3, [r3, #6]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d102      	bne.n	8005736 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	799b      	ldrb	r3, [r3, #6]
 800573e:	461a      	mov	r2, r3
 8005740:	6979      	ldr	r1, [r7, #20]
 8005742:	f001 fe99 	bl	8007478 <USB_EPStartXfer>

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 020f 	and.w	r2, r3, #15
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005772:	681b      	ldr	r3, [r3, #0]
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	460b      	mov	r3, r1
 800578e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005790:	7afb      	ldrb	r3, [r7, #11]
 8005792:	f003 020f 	and.w	r2, r3, #15
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	3310      	adds	r3, #16
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	3304      	adds	r3, #4
 80057a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2200      	movs	r2, #0
 80057b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2201      	movs	r2, #1
 80057be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	799b      	ldrb	r3, [r3, #6]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d102      	bne.n	80057da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	799b      	ldrb	r3, [r3, #6]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6979      	ldr	r1, [r7, #20]
 80057e6:	f001 fe47 	bl	8007478 <USB_EPStartXfer>

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	7912      	ldrb	r2, [r2, #4]
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e04f      	b.n	80058b2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	da0f      	bge.n	800583a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	f003 020f 	and.w	r2, r3, #15
 8005820:	4613      	mov	r3, r2
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	3310      	adds	r3, #16
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	3304      	adds	r3, #4
 8005830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	705a      	strb	r2, [r3, #1]
 8005838:	e00d      	b.n	8005856 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	3304      	adds	r3, #4
 800584e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_PCD_EP_SetStall+0x82>
 8005872:	2302      	movs	r3, #2
 8005874:	e01d      	b.n	80058b2 <HAL_PCD_EP_SetStall+0xbe>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	4618      	mov	r0, r3
 8005886:	f002 f9cf 	bl	8007c28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	7999      	ldrb	r1, [r3, #6]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058a2:	461a      	mov	r2, r3
 80058a4:	f002 fbc0 	bl	8008028 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	7912      	ldrb	r2, [r2, #4]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e042      	b.n	800595e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	da0f      	bge.n	8005900 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	f003 020f 	and.w	r2, r3, #15
 80058e6:	4613      	mov	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	3310      	adds	r3, #16
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	3304      	adds	r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	705a      	strb	r2, [r3, #1]
 80058fe:	e00f      	b.n	8005920 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	3304      	adds	r3, #4
 8005918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	b2da      	uxtb	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_PCD_EP_ClrStall+0x86>
 800593c:	2302      	movs	r3, #2
 800593e:	e00e      	b.n	800595e <HAL_PCD_EP_ClrStall+0xa4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	4618      	mov	r0, r3
 8005950:	f002 f9d8 	bl	8007d04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005976:	2b00      	cmp	r3, #0
 8005978:	da0c      	bge.n	8005994 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	f003 020f 	and.w	r2, r3, #15
 8005980:	4613      	mov	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	3310      	adds	r3, #16
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	3304      	adds	r3, #4
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e00c      	b.n	80059ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	f003 020f 	and.w	r2, r3, #15
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	3304      	adds	r3, #4
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fff7 	bl	80079a8 <USB_EPStopXfer>
 80059ba:	4603      	mov	r3, r0
 80059bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059be:	7afb      	ldrb	r3, [r7, #11]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	@ 0x28
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	3310      	adds	r3, #16
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	4413      	add	r3, r2
 80059ec:	3304      	adds	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d901      	bls.n	8005a00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e06b      	b.n	8005ad8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d902      	bls.n	8005a1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3303      	adds	r3, #3
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a24:	e02a      	b.n	8005a7c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d902      	bls.n	8005a42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3303      	adds	r3, #3
 8005a46:	089b      	lsrs	r3, r3, #2
 8005a48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68d9      	ldr	r1, [r3, #12]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	6978      	ldr	r0, [r7, #20]
 8005a60:	f002 f84c 	bl	8007afc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	441a      	add	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	441a      	add	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d809      	bhi.n	8005aa6 <PCD_WriteEmptyTxFifo+0xde>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d203      	bcs.n	8005aa6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1bf      	bne.n	8005a26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d811      	bhi.n	8005ad6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	6939      	ldr	r1, [r7, #16]
 8005ace:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	333c      	adds	r3, #60	@ 0x3c
 8005af8:	3304      	adds	r3, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	799b      	ldrb	r3, [r3, #6]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d17b      	bne.n	8005c0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d015      	beq.n	8005b4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4a61      	ldr	r2, [pc, #388]	@ (8005ca8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	f240 80b9 	bls.w	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80b3 	beq.w	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b42:	461a      	mov	r2, r3
 8005b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b48:	6093      	str	r3, [r2, #8]
 8005b4a:	e0a7      	b.n	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b62:	461a      	mov	r2, r3
 8005b64:	2320      	movs	r3, #32
 8005b66:	6093      	str	r3, [r2, #8]
 8005b68:	e098      	b.n	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8093 	bne.w	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4a4b      	ldr	r2, [pc, #300]	@ (8005ca8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d90f      	bls.n	8005b9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b9a:	6093      	str	r3, [r2, #8]
 8005b9c:	e07e      	b.n	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	0159      	lsls	r1, r3, #5
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d114      	bne.n	8005c00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005be8:	461a      	mov	r2, r3
 8005bea:	2101      	movs	r1, #1
 8005bec:	f002 fa1c 	bl	8008028 <USB_EP0_OutStart>
 8005bf0:	e006      	b.n	8005c00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	441a      	add	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f004 fcde 	bl	800a5c8 <HAL_PCD_DataOutStageCallback>
 8005c0c:	e046      	b.n	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4a26      	ldr	r2, [pc, #152]	@ (8005cac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d124      	bne.n	8005c60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c32:	6093      	str	r3, [r2, #8]
 8005c34:	e032      	b.n	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2320      	movs	r3, #32
 8005c50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f004 fcb5 	bl	800a5c8 <HAL_PCD_DataOutStageCallback>
 8005c5e:	e01d      	b.n	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d114      	bne.n	8005c90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d108      	bne.n	8005c90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	f002 f9cc 	bl	8008028 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f004 fc96 	bl	800a5c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	4f54300a 	.word	0x4f54300a
 8005cac:	4f54310a 	.word	0x4f54310a

08005cb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	333c      	adds	r3, #60	@ 0x3c
 8005cc8:	3304      	adds	r3, #4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a15      	ldr	r2, [pc, #84]	@ (8005d38 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d90e      	bls.n	8005d04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f004 fc4d 	bl	800a5a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d38 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d90c      	bls.n	8005d2c <PCD_EP_OutSetupPacket_int+0x7c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	799b      	ldrb	r3, [r3, #6]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d108      	bne.n	8005d2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d24:	461a      	mov	r2, r3
 8005d26:	2101      	movs	r1, #1
 8005d28:	f002 f97e 	bl	8008028 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	4f54300a 	.word	0x4f54300a

08005d3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d5a:	883b      	ldrh	r3, [r7, #0]
 8005d5c:	0419      	lsls	r1, r3, #16
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d68:	e028      	b.n	8005dbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4413      	add	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	73fb      	strb	r3, [r7, #15]
 8005d7c:	e00d      	b.n	8005d9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	3340      	adds	r3, #64	@ 0x40
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	0c1b      	lsrs	r3, r3, #16
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	3301      	adds	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
 8005d9a:	7bfa      	ldrb	r2, [r7, #15]
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3ec      	bcc.n	8005d7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005da4:	883b      	ldrh	r3, [r7, #0]
 8005da6:	0418      	lsls	r0, r3, #16
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	4302      	orrs	r2, r0
 8005db4:	3340      	adds	r3, #64	@ 0x40
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	887a      	ldrh	r2, [r7, #2]
 8005ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e267      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d075      	beq.n	8005f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e22:	4b88      	ldr	r3, [pc, #544]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d00c      	beq.n	8005e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e2e:	4b85      	ldr	r3, [pc, #532]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d112      	bne.n	8005e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e3a:	4b82      	ldr	r3, [pc, #520]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e46:	d10b      	bne.n	8005e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	4b7e      	ldr	r3, [pc, #504]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d05b      	beq.n	8005f0c <HAL_RCC_OscConfig+0x108>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d157      	bne.n	8005f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e242      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e68:	d106      	bne.n	8005e78 <HAL_RCC_OscConfig+0x74>
 8005e6a:	4b76      	ldr	r3, [pc, #472]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a75      	ldr	r2, [pc, #468]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xb0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0x98>
 8005e82:	4b70      	ldr	r3, [pc, #448]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a6f      	ldr	r2, [pc, #444]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6c      	ldr	r2, [pc, #432]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	4b69      	ldr	r3, [pc, #420]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a68      	ldr	r2, [pc, #416]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b66      	ldr	r3, [pc, #408]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a65      	ldr	r2, [pc, #404]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fc8c 	bl	80027d8 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fc fc88 	bl	80027d8 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	@ 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e207      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xc0>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fc78 	bl	80027d8 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fc fc74 	bl	80027d8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	@ 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e1f3      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	4b51      	ldr	r3, [pc, #324]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0xe8>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d063      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f26:	4b47      	ldr	r3, [pc, #284]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d11c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f32:	4b44      	ldr	r3, [pc, #272]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	4b41      	ldr	r3, [pc, #260]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCC_OscConfig+0x152>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e1c7      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b3b      	ldr	r3, [pc, #236]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4937      	ldr	r1, [pc, #220]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	e03a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f74:	4b34      	ldr	r3, [pc, #208]	@ (8006048 <HAL_RCC_OscConfig+0x244>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fc fc2d 	bl	80027d8 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f82:	f7fc fc29 	bl	80027d8 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e1a8      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f94:	4b2b      	ldr	r3, [pc, #172]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa0:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4925      	ldr	r1, [pc, #148]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
 8005fb4:	e015      	b.n	8005fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb6:	4b24      	ldr	r3, [pc, #144]	@ (8006048 <HAL_RCC_OscConfig+0x244>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fc fc0c 	bl	80027d8 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fc fc08 	bl	80027d8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e187      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d036      	beq.n	800605c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff6:	4b15      	ldr	r3, [pc, #84]	@ (800604c <HAL_RCC_OscConfig+0x248>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffc:	f7fc fbec 	bl	80027d8 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006004:	f7fc fbe8 	bl	80027d8 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e167      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006016:	4b0b      	ldr	r3, [pc, #44]	@ (8006044 <HAL_RCC_OscConfig+0x240>)
 8006018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x200>
 8006022:	e01b      	b.n	800605c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006024:	4b09      	ldr	r3, [pc, #36]	@ (800604c <HAL_RCC_OscConfig+0x248>)
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800602a:	f7fc fbd5 	bl	80027d8 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006030:	e00e      	b.n	8006050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006032:	f7fc fbd1 	bl	80027d8 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d907      	bls.n	8006050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e150      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
 8006044:	40023800 	.word	0x40023800
 8006048:	42470000 	.word	0x42470000
 800604c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006050:	4b88      	ldr	r3, [pc, #544]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ea      	bne.n	8006032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8097 	beq.w	8006198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606e:	4b81      	ldr	r3, [pc, #516]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	4b7d      	ldr	r3, [pc, #500]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	4a7c      	ldr	r2, [pc, #496]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006088:	6413      	str	r3, [r2, #64]	@ 0x40
 800608a:	4b7a      	ldr	r3, [pc, #488]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006096:	2301      	movs	r3, #1
 8006098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609a:	4b77      	ldr	r3, [pc, #476]	@ (8006278 <HAL_RCC_OscConfig+0x474>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d118      	bne.n	80060d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a6:	4b74      	ldr	r3, [pc, #464]	@ (8006278 <HAL_RCC_OscConfig+0x474>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a73      	ldr	r2, [pc, #460]	@ (8006278 <HAL_RCC_OscConfig+0x474>)
 80060ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b2:	f7fc fb91 	bl	80027d8 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ba:	f7fc fb8d 	bl	80027d8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e10c      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006278 <HAL_RCC_OscConfig+0x474>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d106      	bne.n	80060ee <HAL_RCC_OscConfig+0x2ea>
 80060e0:	4b64      	ldr	r3, [pc, #400]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e4:	4a63      	ldr	r2, [pc, #396]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ec:	e01c      	b.n	8006128 <HAL_RCC_OscConfig+0x324>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d10c      	bne.n	8006110 <HAL_RCC_OscConfig+0x30c>
 80060f6:	4b5f      	ldr	r3, [pc, #380]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fa:	4a5e      	ldr	r2, [pc, #376]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 80060fc:	f043 0304 	orr.w	r3, r3, #4
 8006100:	6713      	str	r3, [r2, #112]	@ 0x70
 8006102:	4b5c      	ldr	r3, [pc, #368]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006106:	4a5b      	ldr	r2, [pc, #364]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	6713      	str	r3, [r2, #112]	@ 0x70
 800610e:	e00b      	b.n	8006128 <HAL_RCC_OscConfig+0x324>
 8006110:	4b58      	ldr	r3, [pc, #352]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006114:	4a57      	ldr	r2, [pc, #348]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	6713      	str	r3, [r2, #112]	@ 0x70
 800611c:	4b55      	ldr	r3, [pc, #340]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 800611e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006120:	4a54      	ldr	r2, [pc, #336]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006122:	f023 0304 	bic.w	r3, r3, #4
 8006126:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fc fb52 	bl	80027d8 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006136:	e00a      	b.n	800614e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f7fc fb4e 	bl	80027d8 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e0cb      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614e:	4b49      	ldr	r3, [pc, #292]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0ee      	beq.n	8006138 <HAL_RCC_OscConfig+0x334>
 800615a:	e014      	b.n	8006186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800615c:	f7fc fb3c 	bl	80027d8 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006162:	e00a      	b.n	800617a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fc fb38 	bl	80027d8 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e0b5      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800617a:	4b3e      	ldr	r3, [pc, #248]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1ee      	bne.n	8006164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d105      	bne.n	8006198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800618c:	4b39      	ldr	r3, [pc, #228]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 800618e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006190:	4a38      	ldr	r2, [pc, #224]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006196:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80a1 	beq.w	80062e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061a2:	4b34      	ldr	r3, [pc, #208]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d05c      	beq.n	8006268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d141      	bne.n	800623a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b6:	4b31      	ldr	r3, [pc, #196]	@ (800627c <HAL_RCC_OscConfig+0x478>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fc fb0c 	bl	80027d8 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fc fb08 	bl	80027d8 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e087      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	019b      	lsls	r3, r3, #6
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	3b01      	subs	r3, #1
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	491b      	ldr	r1, [pc, #108]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 8006208:	4313      	orrs	r3, r2
 800620a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800620c:	4b1b      	ldr	r3, [pc, #108]	@ (800627c <HAL_RCC_OscConfig+0x478>)
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006212:	f7fc fae1 	bl	80027d8 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621a:	f7fc fadd 	bl	80027d8 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e05c      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622c:	4b11      	ldr	r3, [pc, #68]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f0      	beq.n	800621a <HAL_RCC_OscConfig+0x416>
 8006238:	e054      	b.n	80062e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800623a:	4b10      	ldr	r3, [pc, #64]	@ (800627c <HAL_RCC_OscConfig+0x478>)
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006240:	f7fc faca 	bl	80027d8 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006248:	f7fc fac6 	bl	80027d8 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e045      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625a:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <HAL_RCC_OscConfig+0x470>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f0      	bne.n	8006248 <HAL_RCC_OscConfig+0x444>
 8006266:	e03d      	b.n	80062e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e038      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
 8006274:	40023800 	.word	0x40023800
 8006278:	40007000 	.word	0x40007000
 800627c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006280:	4b1b      	ldr	r3, [pc, #108]	@ (80062f0 <HAL_RCC_OscConfig+0x4ec>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d028      	beq.n	80062e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006298:	429a      	cmp	r2, r3
 800629a:	d121      	bne.n	80062e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d11a      	bne.n	80062e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062b0:	4013      	ands	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d111      	bne.n	80062e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	3b01      	subs	r3, #1
 80062ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d107      	bne.n	80062e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062dc:	429a      	cmp	r2, r3
 80062de:	d001      	beq.n	80062e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40023800 	.word	0x40023800

080062f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e0cc      	b.n	80064a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006308:	4b68      	ldr	r3, [pc, #416]	@ (80064ac <HAL_RCC_ClockConfig+0x1b8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d90c      	bls.n	8006330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006316:	4b65      	ldr	r3, [pc, #404]	@ (80064ac <HAL_RCC_ClockConfig+0x1b8>)
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800631e:	4b63      	ldr	r3, [pc, #396]	@ (80064ac <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d001      	beq.n	8006330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0b8      	b.n	80064a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d020      	beq.n	800637e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006348:	4b59      	ldr	r3, [pc, #356]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4a58      	ldr	r2, [pc, #352]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006360:	4b53      	ldr	r3, [pc, #332]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4a52      	ldr	r2, [pc, #328]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800636a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800636c:	4b50      	ldr	r3, [pc, #320]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	494d      	ldr	r1, [pc, #308]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d044      	beq.n	8006414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d107      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006392:	4b47      	ldr	r3, [pc, #284]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d119      	bne.n	80063d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e07f      	b.n	80064a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d003      	beq.n	80063b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d107      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b2:	4b3f      	ldr	r3, [pc, #252]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e06f      	b.n	80064a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c2:	4b3b      	ldr	r3, [pc, #236]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e067      	b.n	80064a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063d2:	4b37      	ldr	r3, [pc, #220]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f023 0203 	bic.w	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	4934      	ldr	r1, [pc, #208]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e4:	f7fc f9f8 	bl	80027d8 <HAL_GetTick>
 80063e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ea:	e00a      	b.n	8006402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ec:	f7fc f9f4 	bl	80027d8 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e04f      	b.n	80064a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006402:	4b2b      	ldr	r3, [pc, #172]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 020c 	and.w	r2, r3, #12
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	429a      	cmp	r2, r3
 8006412:	d1eb      	bne.n	80063ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006414:	4b25      	ldr	r3, [pc, #148]	@ (80064ac <HAL_RCC_ClockConfig+0x1b8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d20c      	bcs.n	800643c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006422:	4b22      	ldr	r3, [pc, #136]	@ (80064ac <HAL_RCC_ClockConfig+0x1b8>)
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642a:	4b20      	ldr	r3, [pc, #128]	@ (80064ac <HAL_RCC_ClockConfig+0x1b8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d001      	beq.n	800643c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e032      	b.n	80064a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006448:	4b19      	ldr	r3, [pc, #100]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4916      	ldr	r1, [pc, #88]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	4313      	orrs	r3, r2
 8006458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006466:	4b12      	ldr	r3, [pc, #72]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	490e      	ldr	r1, [pc, #56]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800647a:	f000 f821 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 800647e:	4602      	mov	r2, r0
 8006480:	4b0b      	ldr	r3, [pc, #44]	@ (80064b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	091b      	lsrs	r3, r3, #4
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	490a      	ldr	r1, [pc, #40]	@ (80064b4 <HAL_RCC_ClockConfig+0x1c0>)
 800648c:	5ccb      	ldrb	r3, [r1, r3]
 800648e:	fa22 f303 	lsr.w	r3, r2, r3
 8006492:	4a09      	ldr	r2, [pc, #36]	@ (80064b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006496:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <HAL_RCC_ClockConfig+0x1c8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fc f958 	bl	8002750 <HAL_InitTick>

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40023c00 	.word	0x40023c00
 80064b0:	40023800 	.word	0x40023800
 80064b4:	08010324 	.word	0x08010324
 80064b8:	20000074 	.word	0x20000074
 80064bc:	20000078 	.word	0x20000078

080064c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c4:	b094      	sub	sp, #80	@ 0x50
 80064c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80064cc:	2300      	movs	r3, #0
 80064ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d0:	2300      	movs	r3, #0
 80064d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064d8:	4b79      	ldr	r3, [pc, #484]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 030c 	and.w	r3, r3, #12
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d00d      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0x40>
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	f200 80e1 	bhi.w	80066ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0x34>
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d003      	beq.n	80064fa <HAL_RCC_GetSysClockFreq+0x3a>
 80064f2:	e0db      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064f4:	4b73      	ldr	r3, [pc, #460]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80064f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80064f8:	e0db      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064fa:	4b73      	ldr	r3, [pc, #460]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80064fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064fe:	e0d8      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006500:	4b6f      	ldr	r3, [pc, #444]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006508:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800650a:	4b6d      	ldr	r3, [pc, #436]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d063      	beq.n	80065de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006516:	4b6a      	ldr	r3, [pc, #424]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	099b      	lsrs	r3, r3, #6
 800651c:	2200      	movs	r2, #0
 800651e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006520:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006528:	633b      	str	r3, [r7, #48]	@ 0x30
 800652a:	2300      	movs	r3, #0
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
 800652e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006532:	4622      	mov	r2, r4
 8006534:	462b      	mov	r3, r5
 8006536:	f04f 0000 	mov.w	r0, #0
 800653a:	f04f 0100 	mov.w	r1, #0
 800653e:	0159      	lsls	r1, r3, #5
 8006540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006544:	0150      	lsls	r0, r2, #5
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4621      	mov	r1, r4
 800654c:	1a51      	subs	r1, r2, r1
 800654e:	6139      	str	r1, [r7, #16]
 8006550:	4629      	mov	r1, r5
 8006552:	eb63 0301 	sbc.w	r3, r3, r1
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006564:	4659      	mov	r1, fp
 8006566:	018b      	lsls	r3, r1, #6
 8006568:	4651      	mov	r1, sl
 800656a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800656e:	4651      	mov	r1, sl
 8006570:	018a      	lsls	r2, r1, #6
 8006572:	4651      	mov	r1, sl
 8006574:	ebb2 0801 	subs.w	r8, r2, r1
 8006578:	4659      	mov	r1, fp
 800657a:	eb63 0901 	sbc.w	r9, r3, r1
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800658a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800658e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006592:	4690      	mov	r8, r2
 8006594:	4699      	mov	r9, r3
 8006596:	4623      	mov	r3, r4
 8006598:	eb18 0303 	adds.w	r3, r8, r3
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	462b      	mov	r3, r5
 80065a0:	eb49 0303 	adc.w	r3, r9, r3
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065b2:	4629      	mov	r1, r5
 80065b4:	024b      	lsls	r3, r1, #9
 80065b6:	4621      	mov	r1, r4
 80065b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065bc:	4621      	mov	r1, r4
 80065be:	024a      	lsls	r2, r1, #9
 80065c0:	4610      	mov	r0, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c6:	2200      	movs	r2, #0
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065d0:	f7fa faf2 	bl	8000bb8 <__aeabi_uldivmod>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4613      	mov	r3, r2
 80065da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065dc:	e058      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065de:	4b38      	ldr	r3, [pc, #224]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	099b      	lsrs	r3, r3, #6
 80065e4:	2200      	movs	r2, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	4611      	mov	r1, r2
 80065ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	2300      	movs	r3, #0
 80065f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	f04f 0000 	mov.w	r0, #0
 8006600:	f04f 0100 	mov.w	r1, #0
 8006604:	0159      	lsls	r1, r3, #5
 8006606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800660a:	0150      	lsls	r0, r2, #5
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4641      	mov	r1, r8
 8006612:	ebb2 0a01 	subs.w	sl, r2, r1
 8006616:	4649      	mov	r1, r9
 8006618:	eb63 0b01 	sbc.w	fp, r3, r1
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800662c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006630:	ebb2 040a 	subs.w	r4, r2, sl
 8006634:	eb63 050b 	sbc.w	r5, r3, fp
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	00eb      	lsls	r3, r5, #3
 8006642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006646:	00e2      	lsls	r2, r4, #3
 8006648:	4614      	mov	r4, r2
 800664a:	461d      	mov	r5, r3
 800664c:	4643      	mov	r3, r8
 800664e:	18e3      	adds	r3, r4, r3
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	464b      	mov	r3, r9
 8006654:	eb45 0303 	adc.w	r3, r5, r3
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006666:	4629      	mov	r1, r5
 8006668:	028b      	lsls	r3, r1, #10
 800666a:	4621      	mov	r1, r4
 800666c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006670:	4621      	mov	r1, r4
 8006672:	028a      	lsls	r2, r1, #10
 8006674:	4610      	mov	r0, r2
 8006676:	4619      	mov	r1, r3
 8006678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667a:	2200      	movs	r2, #0
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	61fa      	str	r2, [r7, #28]
 8006680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006684:	f7fa fa98 	bl	8000bb8 <__aeabi_uldivmod>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4613      	mov	r3, r2
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006690:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	0c1b      	lsrs	r3, r3, #16
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	3301      	adds	r3, #1
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80066a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066aa:	e002      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066ac:	4b05      	ldr	r3, [pc, #20]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80066ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3750      	adds	r7, #80	@ 0x50
 80066b8:	46bd      	mov	sp, r7
 80066ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800
 80066c4:	00f42400 	.word	0x00f42400
 80066c8:	007a1200 	.word	0x007a1200

080066cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066d0:	4b03      	ldr	r3, [pc, #12]	@ (80066e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066d2:	681b      	ldr	r3, [r3, #0]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000074 	.word	0x20000074

080066e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066e8:	f7ff fff0 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b05      	ldr	r3, [pc, #20]	@ (8006704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	0a9b      	lsrs	r3, r3, #10
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	4903      	ldr	r1, [pc, #12]	@ (8006708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066fa:	5ccb      	ldrb	r3, [r1, r3]
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40023800 	.word	0x40023800
 8006708:	08010334 	.word	0x08010334

0800670c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d105      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006730:	2b00      	cmp	r3, #0
 8006732:	d038      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006734:	4b68      	ldr	r3, [pc, #416]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800673a:	f7fc f84d 	bl	80027d8 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006742:	f7fc f849 	bl	80027d8 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0bd      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006754:	4b61      	ldr	r3, [pc, #388]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f0      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	019b      	lsls	r3, r3, #6
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	071b      	lsls	r3, r3, #28
 8006772:	495a      	ldr	r1, [pc, #360]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800677a:	4b57      	ldr	r3, [pc, #348]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800677c:	2201      	movs	r2, #1
 800677e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006780:	f7fc f82a 	bl	80027d8 <HAL_GetTick>
 8006784:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006788:	f7fc f826 	bl	80027d8 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e09a      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800679a:	4b50      	ldr	r3, [pc, #320]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8083 	beq.w	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	4b48      	ldr	r3, [pc, #288]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067bc:	4a47      	ldr	r2, [pc, #284]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80067c4:	4b45      	ldr	r3, [pc, #276]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067d0:	4b43      	ldr	r3, [pc, #268]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a42      	ldr	r2, [pc, #264]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067da:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067dc:	f7fb fffc 	bl	80027d8 <HAL_GetTick>
 80067e0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067e4:	f7fb fff8 	bl	80027d8 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e06c      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067f6:	4b3a      	ldr	r3, [pc, #232]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006802:	4b36      	ldr	r3, [pc, #216]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800680a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d02f      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	429a      	cmp	r2, r3
 800681e:	d028      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006820:	4b2e      	ldr	r3, [pc, #184]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006828:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800682a:	4b2e      	ldr	r3, [pc, #184]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800682c:	2201      	movs	r2, #1
 800682e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006830:	4b2c      	ldr	r3, [pc, #176]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006836:	4a29      	ldr	r2, [pc, #164]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800683c:	4b27      	ldr	r3, [pc, #156]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d114      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006848:	f7fb ffc6 	bl	80027d8 <HAL_GetTick>
 800684c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684e:	e00a      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006850:	f7fb ffc2 	bl	80027d8 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e034      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006866:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0ee      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800687a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800687e:	d10d      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006880:	4b16      	ldr	r3, [pc, #88]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006894:	4911      	ldr	r1, [pc, #68]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
 800689a:	e005      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800689c:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a0e      	ldr	r2, [pc, #56]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80068a6:	6093      	str	r3, [r2, #8]
 80068a8:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b4:	4909      	ldr	r1, [pc, #36]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7d1a      	ldrb	r2, [r3, #20]
 80068ca:	4b07      	ldr	r3, [pc, #28]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80068cc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	42470068 	.word	0x42470068
 80068dc:	40023800 	.word	0x40023800
 80068e0:	40007000 	.word	0x40007000
 80068e4:	42470e40 	.word	0x42470e40
 80068e8:	424711e0 	.word	0x424711e0

080068ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d141      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800690a:	4b25      	ldr	r3, [pc, #148]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d006      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006920:	d131      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006922:	4b20      	ldr	r3, [pc, #128]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006924:	617b      	str	r3, [r7, #20]
          break;
 8006926:	e031      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006928:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006934:	d109      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006936:	4b1a      	ldr	r3, [pc, #104]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800693c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006940:	4a19      	ldr	r2, [pc, #100]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	e008      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800694a:	4b15      	ldr	r3, [pc, #84]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006954:	4a15      	ldr	r2, [pc, #84]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006956:	fbb2 f3f3 	udiv	r3, r2, r3
 800695a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800695e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006962:	099b      	lsrs	r3, r3, #6
 8006964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006976:	0f1b      	lsrs	r3, r3, #28
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006982:	617b      	str	r3, [r7, #20]
          break;
 8006984:	e002      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
          break;
 800698a:	bf00      	nop
        }
      }
      break;
 800698c:	e000      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 800698e:	bf00      	nop
    }
  }
  return frequency;
 8006990:	697b      	ldr	r3, [r7, #20]
}
 8006992:	4618      	mov	r0, r3
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40023800 	.word	0x40023800
 80069a4:	00bb8000 	.word	0x00bb8000
 80069a8:	007a1200 	.word	0x007a1200
 80069ac:	00f42400 	.word	0x00f42400

080069b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e07b      	b.n	8006aba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d108      	bne.n	80069dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069d2:	d009      	beq.n	80069e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	61da      	str	r2, [r3, #28]
 80069da:	e005      	b.n	80069e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fb fd8e 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a6c:	ea42 0103 	orr.w	r1, r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	f003 0104 	and.w	r1, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8e:	f003 0210 	and.w	r2, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	f107 001c 	add.w	r0, r7, #28
 8006ad0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ad4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d123      	bne.n	8006b24 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d105      	bne.n	8006b18 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fae3 	bl	80080e4 <USB_CoreReset>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]
 8006b22:	e01b      	b.n	8006b5c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fad7 	bl	80080e4 <USB_CoreReset>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b3a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b4e:	e005      	b.n	8006b5c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b5c:	7fbb      	ldrb	r3, [r7, #30]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d10b      	bne.n	8006b7a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f043 0206 	orr.w	r2, r3, #6
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f043 0220 	orr.w	r2, r3, #32
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b86:	b004      	add	sp, #16
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d165      	bne.n	8006c6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a41      	ldr	r2, [pc, #260]	@ (8006ca8 <USB_SetTurnaroundTime+0x11c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d906      	bls.n	8006bb6 <USB_SetTurnaroundTime+0x2a>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4a40      	ldr	r2, [pc, #256]	@ (8006cac <USB_SetTurnaroundTime+0x120>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d202      	bcs.n	8006bb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bb0:	230f      	movs	r3, #15
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e062      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8006cac <USB_SetTurnaroundTime+0x120>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d306      	bcc.n	8006bcc <USB_SetTurnaroundTime+0x40>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8006cb0 <USB_SetTurnaroundTime+0x124>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d202      	bcs.n	8006bcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006bc6:	230e      	movs	r3, #14
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	e057      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a38      	ldr	r2, [pc, #224]	@ (8006cb0 <USB_SetTurnaroundTime+0x124>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d306      	bcc.n	8006be2 <USB_SetTurnaroundTime+0x56>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4a37      	ldr	r2, [pc, #220]	@ (8006cb4 <USB_SetTurnaroundTime+0x128>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d202      	bcs.n	8006be2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006bdc:	230d      	movs	r3, #13
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e04c      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a33      	ldr	r2, [pc, #204]	@ (8006cb4 <USB_SetTurnaroundTime+0x128>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d306      	bcc.n	8006bf8 <USB_SetTurnaroundTime+0x6c>
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4a32      	ldr	r2, [pc, #200]	@ (8006cb8 <USB_SetTurnaroundTime+0x12c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d802      	bhi.n	8006bf8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e041      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8006cb8 <USB_SetTurnaroundTime+0x12c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d906      	bls.n	8006c0e <USB_SetTurnaroundTime+0x82>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4a2e      	ldr	r2, [pc, #184]	@ (8006cbc <USB_SetTurnaroundTime+0x130>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d802      	bhi.n	8006c0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c08:	230b      	movs	r3, #11
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e036      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4a2a      	ldr	r2, [pc, #168]	@ (8006cbc <USB_SetTurnaroundTime+0x130>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d906      	bls.n	8006c24 <USB_SetTurnaroundTime+0x98>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4a29      	ldr	r2, [pc, #164]	@ (8006cc0 <USB_SetTurnaroundTime+0x134>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d802      	bhi.n	8006c24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c1e:	230a      	movs	r3, #10
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e02b      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4a26      	ldr	r2, [pc, #152]	@ (8006cc0 <USB_SetTurnaroundTime+0x134>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d906      	bls.n	8006c3a <USB_SetTurnaroundTime+0xae>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4a25      	ldr	r2, [pc, #148]	@ (8006cc4 <USB_SetTurnaroundTime+0x138>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d202      	bcs.n	8006c3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c34:	2309      	movs	r3, #9
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e020      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4a21      	ldr	r2, [pc, #132]	@ (8006cc4 <USB_SetTurnaroundTime+0x138>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d306      	bcc.n	8006c50 <USB_SetTurnaroundTime+0xc4>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4a20      	ldr	r2, [pc, #128]	@ (8006cc8 <USB_SetTurnaroundTime+0x13c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d802      	bhi.n	8006c50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	e015      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc8 <USB_SetTurnaroundTime+0x13c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d906      	bls.n	8006c66 <USB_SetTurnaroundTime+0xda>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <USB_SetTurnaroundTime+0x140>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d202      	bcs.n	8006c66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c60:	2307      	movs	r3, #7
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e00a      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c66:	2306      	movs	r3, #6
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e007      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d102      	bne.n	8006c78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c72:	2309      	movs	r3, #9
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	e001      	b.n	8006c7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c78:	2309      	movs	r3, #9
 8006c7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c94:	431a      	orrs	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	00d8acbf 	.word	0x00d8acbf
 8006cac:	00e4e1c0 	.word	0x00e4e1c0
 8006cb0:	00f42400 	.word	0x00f42400
 8006cb4:	01067380 	.word	0x01067380
 8006cb8:	011a499f 	.word	0x011a499f
 8006cbc:	01312cff 	.word	0x01312cff
 8006cc0:	014ca43f 	.word	0x014ca43f
 8006cc4:	016e3600 	.word	0x016e3600
 8006cc8:	01a6ab1f 	.word	0x01a6ab1f
 8006ccc:	01e84800 	.word	0x01e84800

08006cd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f043 0201 	orr.w	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f023 0201 	bic.w	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d115      	bne.n	8006d62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d42:	200a      	movs	r0, #10
 8006d44:	f7fb fd54 	bl	80027f0 <HAL_Delay>
      ms += 10U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	330a      	adds	r3, #10
 8006d4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 f939 	bl	8007fc6 <USB_GetMode>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d01e      	beq.n	8006d98 <USB_SetCurrentMode+0x84>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d5e:	d9f0      	bls.n	8006d42 <USB_SetCurrentMode+0x2e>
 8006d60:	e01a      	b.n	8006d98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d115      	bne.n	8006d94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d74:	200a      	movs	r0, #10
 8006d76:	f7fb fd3b 	bl	80027f0 <HAL_Delay>
      ms += 10U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	330a      	adds	r3, #10
 8006d7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f920 	bl	8007fc6 <USB_GetMode>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <USB_SetCurrentMode+0x84>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d90:	d9f0      	bls.n	8006d74 <USB_SetCurrentMode+0x60>
 8006d92:	e001      	b.n	8006d98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e005      	b.n	8006da4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d9c:	d101      	bne.n	8006da2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dac:	b084      	sub	sp, #16
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	e009      	b.n	8006de0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	3340      	adds	r3, #64	@ 0x40
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b0e      	cmp	r3, #14
 8006de4:	d9f2      	bls.n	8006dcc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006de6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11c      	bne.n	8006e28 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dfc:	f043 0302 	orr.w	r3, r3, #2
 8006e00:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e12:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e26:	e00b      	b.n	8006e40 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e46:	461a      	mov	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d10d      	bne.n	8006e70 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f968 	bl	8007134 <USB_SetDevSpeed>
 8006e64:	e008      	b.n	8006e78 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e66:	2101      	movs	r1, #1
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f963 	bl	8007134 <USB_SetDevSpeed>
 8006e6e:	e003      	b.n	8006e78 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e70:	2103      	movs	r1, #3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f95e 	bl	8007134 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e78:	2110      	movs	r1, #16
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f8fa 	bl	8007074 <USB_FlushTxFifo>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f924 	bl	80070d8 <USB_FlushRxFifo>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eac:	461a      	mov	r2, r3
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	613b      	str	r3, [r7, #16]
 8006ec2:	e043      	b.n	8006f4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eda:	d118      	bne.n	8006f0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e013      	b.n	8006f20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f04:	461a      	mov	r2, r3
 8006f06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	e008      	b.n	8006f20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f50:	461a      	mov	r2, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d3b5      	bcc.n	8006ec4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	e043      	b.n	8006fe6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f74:	d118      	bne.n	8006fa8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	e013      	b.n	8006fba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	e008      	b.n	8006fba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2300      	movs	r3, #0
 8006fca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fea:	461a      	mov	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d3b5      	bcc.n	8006f5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007004:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007012:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007014:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f043 0210 	orr.w	r2, r3, #16
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	4b10      	ldr	r3, [pc, #64]	@ (8007070 <USB_DevInit+0x2c4>)
 800702e:	4313      	orrs	r3, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007034:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f043 0208 	orr.w	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007048:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800704c:	2b01      	cmp	r3, #1
 800704e:	d107      	bne.n	8007060 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007058:	f043 0304 	orr.w	r3, r3, #4
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800706c:	b004      	add	sp, #16
 800706e:	4770      	bx	lr
 8007070:	803c3800 	.word	0x803c3800

08007074 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800708e:	d901      	bls.n	8007094 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e01b      	b.n	80070cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	daf2      	bge.n	8007082 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	019b      	lsls	r3, r3, #6
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070b8:	d901      	bls.n	80070be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e006      	b.n	80070cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d0f0      	beq.n	80070ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3301      	adds	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070f0:	d901      	bls.n	80070f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e018      	b.n	8007128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	daf2      	bge.n	80070e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2210      	movs	r2, #16
 8007106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007114:	d901      	bls.n	800711a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e006      	b.n	8007128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b10      	cmp	r3, #16
 8007124:	d0f0      	beq.n	8007108 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b087      	sub	sp, #28
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0306 	and.w	r3, r3, #6
 800717e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007186:	2300      	movs	r3, #0
 8007188:	75fb      	strb	r3, [r7, #23]
 800718a:	e00a      	b.n	80071a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d002      	beq.n	8007198 <USB_GetDevSpeed+0x32>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d102      	bne.n	800719e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007198:	2302      	movs	r3, #2
 800719a:	75fb      	strb	r3, [r7, #23]
 800719c:	e001      	b.n	80071a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800719e:	230f      	movs	r3, #15
 80071a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d13a      	bne.n	8007242 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	2101      	movs	r1, #1
 80071de:	fa01 f303 	lsl.w	r3, r1, r3
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071ea:	4313      	orrs	r3, r2
 80071ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d155      	bne.n	80072b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	791b      	ldrb	r3, [r3, #4]
 800721e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007220:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	059b      	lsls	r3, r3, #22
 8007226:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007228:	4313      	orrs	r3, r2
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	440a      	add	r2, r1
 8007232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	e036      	b.n	80072b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	2101      	movs	r1, #1
 8007254:	fa01 f303 	lsl.w	r3, r1, r3
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007260:	4313      	orrs	r3, r2
 8007262:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d11a      	bne.n	80072b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	791b      	ldrb	r3, [r3, #4]
 8007294:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007296:	430b      	orrs	r3, r1
 8007298:	4313      	orrs	r3, r2
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d161      	bne.n	80073a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072f2:	d11f      	bne.n	8007334 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800730e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007312:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800732e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007332:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	2101      	movs	r1, #1
 8007346:	fa01 f303 	lsl.w	r3, r1, r3
 800734a:	b29b      	uxth	r3, r3
 800734c:	43db      	mvns	r3, r3
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007354:	4013      	ands	r3, r2
 8007356:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735e:	69da      	ldr	r2, [r3, #28]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	2101      	movs	r1, #1
 800736a:	fa01 f303 	lsl.w	r3, r1, r3
 800736e:	b29b      	uxth	r3, r3
 8007370:	43db      	mvns	r3, r3
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007378:	4013      	ands	r3, r2
 800737a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	0159      	lsls	r1, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	440b      	add	r3, r1
 8007392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007396:	4619      	mov	r1, r3
 8007398:	4b35      	ldr	r3, [pc, #212]	@ (8007470 <USB_DeactivateEndpoint+0x1b0>)
 800739a:	4013      	ands	r3, r2
 800739c:	600b      	str	r3, [r1, #0]
 800739e:	e060      	b.n	8007462 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073b6:	d11f      	bne.n	80073f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	2101      	movs	r1, #1
 800740a:	fa01 f303 	lsl.w	r3, r1, r3
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	43db      	mvns	r3, r3
 8007412:	68f9      	ldr	r1, [r7, #12]
 8007414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007418:	4013      	ands	r3, r2
 800741a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	2101      	movs	r1, #1
 800742e:	fa01 f303 	lsl.w	r3, r1, r3
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	43db      	mvns	r3, r3
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800743c:	4013      	ands	r3, r2
 800743e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	0159      	lsls	r1, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	440b      	add	r3, r1
 8007456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745a:	4619      	mov	r1, r3
 800745c:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <USB_DeactivateEndpoint+0x1b4>)
 800745e:	4013      	ands	r3, r2
 8007460:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	ec337800 	.word	0xec337800
 8007474:	eff37800 	.word	0xeff37800

08007478 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	@ 0x28
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b01      	cmp	r3, #1
 8007496:	f040 817a 	bne.w	800778e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d132      	bne.n	8007508 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80074c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007500:	0cdb      	lsrs	r3, r3, #19
 8007502:	04db      	lsls	r3, r3, #19
 8007504:	6113      	str	r3, [r2, #16]
 8007506:	e092      	b.n	800762e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007522:	0cdb      	lsrs	r3, r3, #19
 8007524:	04db      	lsls	r3, r3, #19
 8007526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007542:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007546:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800754a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d11a      	bne.n	8007588 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	d903      	bls.n	8007566 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007584:	6113      	str	r3, [r2, #16]
 8007586:	e01b      	b.n	80075c0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007594:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	6919      	ldr	r1, [r3, #16]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	440b      	add	r3, r1
 80075a0:	1e59      	subs	r1, r3, #1
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80075aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80075ac:	4ba2      	ldr	r3, [pc, #648]	@ (8007838 <USB_EPStartXfer+0x3c0>)
 80075ae:	400b      	ands	r3, r1
 80075b0:	69b9      	ldr	r1, [r7, #24]
 80075b2:	0148      	lsls	r0, r1, #5
 80075b4:	69f9      	ldr	r1, [r7, #28]
 80075b6:	4401      	add	r1, r0
 80075b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075bc:	4313      	orrs	r3, r2
 80075be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d6:	69b9      	ldr	r1, [r7, #24]
 80075d8:	0148      	lsls	r0, r1, #5
 80075da:	69f9      	ldr	r1, [r7, #28]
 80075dc:	4401      	add	r1, r0
 80075de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075e2:	4313      	orrs	r3, r2
 80075e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	791b      	ldrb	r3, [r3, #4]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d11f      	bne.n	800762e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	440a      	add	r2, r1
 8007604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007608:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800760c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007628:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800762c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d14b      	bne.n	80076cc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d009      	beq.n	8007650 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007648:	461a      	mov	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	791b      	ldrb	r3, [r3, #4]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d128      	bne.n	80076aa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007664:	2b00      	cmp	r3, #0
 8007666:	d110      	bne.n	800768a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007682:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	e00f      	b.n	80076aa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	0151      	lsls	r1, r2, #5
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	440a      	add	r2, r1
 80076a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	e165      	b.n	8007998 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	791b      	ldrb	r3, [r3, #4]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d015      	beq.n	8007720 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 814d 	beq.w	8007998 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	2101      	movs	r1, #1
 8007710:	fa01 f303 	lsl.w	r3, r1, r3
 8007714:	69f9      	ldr	r1, [r7, #28]
 8007716:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800771a:	4313      	orrs	r3, r2
 800771c:	634b      	str	r3, [r1, #52]	@ 0x34
 800771e:	e13b      	b.n	8007998 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800772c:	2b00      	cmp	r3, #0
 800772e:	d110      	bne.n	8007752 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800774a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e00f      	b.n	8007772 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007770:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	68d9      	ldr	r1, [r3, #12]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	b298      	uxth	r0, r3
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4603      	mov	r3, r0
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f9b8 	bl	8007afc <USB_WritePacket>
 800778c:	e104      	b.n	8007998 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	0151      	lsls	r1, r2, #5
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	440a      	add	r2, r1
 80077a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077a8:	0cdb      	lsrs	r3, r3, #19
 80077aa:	04db      	lsls	r3, r3, #19
 80077ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077d0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d131      	bne.n	800783c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007806:	69b9      	ldr	r1, [r7, #24]
 8007808:	0148      	lsls	r0, r1, #5
 800780a:	69f9      	ldr	r1, [r7, #28]
 800780c:	4401      	add	r1, r0
 800780e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007812:	4313      	orrs	r3, r2
 8007814:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007830:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007834:	6113      	str	r3, [r2, #16]
 8007836:	e061      	b.n	80078fc <USB_EPStartXfer+0x484>
 8007838:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d123      	bne.n	800788c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800785a:	69b9      	ldr	r1, [r7, #24]
 800785c:	0148      	lsls	r0, r1, #5
 800785e:	69f9      	ldr	r1, [r7, #28]
 8007860:	4401      	add	r1, r0
 8007862:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007866:	4313      	orrs	r3, r2
 8007868:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007884:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007888:	6113      	str	r3, [r2, #16]
 800788a:	e037      	b.n	80078fc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	4413      	add	r3, r2
 8007896:	1e5a      	subs	r2, r3, #1
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	8afa      	ldrh	r2, [r7, #22]
 80078a8:	fb03 f202 	mul.w	r2, r3, r2
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	8afb      	ldrh	r3, [r7, #22]
 80078c0:	04d9      	lsls	r1, r3, #19
 80078c2:	4b38      	ldr	r3, [pc, #224]	@ (80079a4 <USB_EPStartXfer+0x52c>)
 80078c4:	400b      	ands	r3, r1
 80078c6:	69b9      	ldr	r1, [r7, #24]
 80078c8:	0148      	lsls	r0, r1, #5
 80078ca:	69f9      	ldr	r1, [r7, #28]
 80078cc:	4401      	add	r1, r0
 80078ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078d2:	4313      	orrs	r3, r2
 80078d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ec:	69b9      	ldr	r1, [r7, #24]
 80078ee:	0148      	lsls	r0, r1, #5
 80078f0:	69f9      	ldr	r1, [r7, #28]
 80078f2:	4401      	add	r1, r0
 80078f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078f8:	4313      	orrs	r3, r2
 80078fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d10d      	bne.n	800791e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68d9      	ldr	r1, [r3, #12]
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791a:	460a      	mov	r2, r1
 800791c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	791b      	ldrb	r3, [r3, #4]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d128      	bne.n	8007978 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d110      	bne.n	8007958 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	440a      	add	r2, r1
 800794c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007950:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	e00f      	b.n	8007978 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	440a      	add	r2, r1
 800796e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007976:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	440a      	add	r2, r1
 800798e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007992:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007996:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3720      	adds	r7, #32
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	1ff80000 	.word	0x1ff80000

080079a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	785b      	ldrb	r3, [r3, #1]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d14a      	bne.n	8007a5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079de:	f040 8086 	bne.w	8007aee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	7812      	ldrb	r2, [r2, #0]
 80079f6:	0151      	lsls	r1, r2, #5
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	440a      	add	r2, r1
 80079fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	7812      	ldrb	r2, [r2, #0]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d902      	bls.n	8007a40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a3e:	e056      	b.n	8007aee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a58:	d0e7      	beq.n	8007a2a <USB_EPStopXfer+0x82>
 8007a5a:	e048      	b.n	8007aee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a74:	d13b      	bne.n	8007aee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	7812      	ldrb	r2, [r2, #0]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	7812      	ldrb	r2, [r2, #0]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ab8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007abc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d902      	bls.n	8007ad4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ad2:	e00c      	b.n	8007aee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aec:	d0e7      	beq.n	8007abe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b089      	sub	sp, #36	@ 0x24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4611      	mov	r1, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	71fb      	strb	r3, [r7, #7]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d123      	bne.n	8007b6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b22:	88bb      	ldrh	r3, [r7, #4]
 8007b24:	3303      	adds	r3, #3
 8007b26:	089b      	lsrs	r3, r3, #2
 8007b28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	e018      	b.n	8007b62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	031a      	lsls	r2, r3, #12
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	3301      	adds	r3, #1
 8007b48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	3301      	adds	r3, #1
 8007b54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	61bb      	str	r3, [r7, #24]
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d3e2      	bcc.n	8007b30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3724      	adds	r7, #36	@ 0x24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b08b      	sub	sp, #44	@ 0x2c
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	089b      	lsrs	r3, r3, #2
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	623b      	str	r3, [r7, #32]
 8007ba2:	e014      	b.n	8007bce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	3301      	adds	r3, #1
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	6a3a      	ldr	r2, [r7, #32]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d3e6      	bcc.n	8007ba4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bd6:	8bfb      	ldrh	r3, [r7, #30]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01e      	beq.n	8007c1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007be6:	461a      	mov	r2, r3
 8007be8:	f107 0310 	add.w	r3, r7, #16
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	701a      	strb	r2, [r3, #0]
      i++;
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	3301      	adds	r3, #1
 8007c06:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c0e:	8bfb      	ldrh	r3, [r7, #30]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c14:	8bfb      	ldrh	r3, [r7, #30]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1ea      	bne.n	8007bf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	372c      	adds	r7, #44	@ 0x2c
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d12c      	bne.n	8007c9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	db12      	blt.n	8007c7c <USB_EPSetStall+0x54>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00f      	beq.n	8007c7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	0151      	lsls	r1, r2, #5
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	440a      	add	r2, r1
 8007c72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	e02b      	b.n	8007cf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	db12      	blt.n	8007cd6 <USB_EPSetStall+0xae>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00f      	beq.n	8007cd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	0151      	lsls	r1, r2, #5
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	440a      	add	r2, r1
 8007cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d128      	bne.n	8007d72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	791b      	ldrb	r3, [r3, #4]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d003      	beq.n	8007d50 <USB_EPClearStall+0x4c>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	791b      	ldrb	r3, [r3, #4]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d138      	bne.n	8007dc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	e027      	b.n	8007dc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	791b      	ldrb	r3, [r3, #4]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d003      	beq.n	8007da2 <USB_EPClearStall+0x9e>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	791b      	ldrb	r3, [r3, #4]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d10f      	bne.n	8007dc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	0151      	lsls	r1, r2, #5
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	440a      	add	r2, r1
 8007db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007df2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007e04:	68f9      	ldr	r1, [r7, #12]
 8007e06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e4a:	f023 0302 	bic.w	r3, r3, #2
 8007e4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e8c:	f043 0302 	orr.w	r3, r3, #2
 8007e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	0c1b      	lsrs	r3, r3, #16
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	b29b      	uxth	r3, r3
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b087      	sub	sp, #28
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	fa22 f303 	lsr.w	r3, r2, r3
 8007f9a:	01db      	lsls	r3, r3, #7
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ffc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008000:	f023 0307 	bic.w	r3, r3, #7
 8008004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	460b      	mov	r3, r1
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	333c      	adds	r3, #60	@ 0x3c
 800803e:	3304      	adds	r3, #4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4a26      	ldr	r2, [pc, #152]	@ (80080e0 <USB_EP0_OutStart+0xb8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d90a      	bls.n	8008062 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800805c:	d101      	bne.n	8008062 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	e037      	b.n	80080d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008068:	461a      	mov	r2, r3
 800806a:	2300      	movs	r3, #0
 800806c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800807c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008090:	f043 0318 	orr.w	r3, r3, #24
 8008094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80080a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080aa:	7afb      	ldrb	r3, [r7, #11]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10f      	bne.n	80080d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80080ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	4f54300a 	.word	0x4f54300a

080080e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080fc:	d901      	bls.n	8008102 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e01b      	b.n	800813a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	daf2      	bge.n	80080f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	f043 0201 	orr.w	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008126:	d901      	bls.n	800812c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e006      	b.n	800813a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b01      	cmp	r3, #1
 8008136:	d0f0      	beq.n	800811a <USB_CoreReset+0x36>

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
	...

08008148 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008154:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008158:	f002 fc96 	bl	800aa88 <USBD_static_malloc>
 800815c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d109      	bne.n	8008178 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32b0      	adds	r2, #176	@ 0xb0
 800816e:	2100      	movs	r1, #0
 8008170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008174:	2302      	movs	r3, #2
 8008176:	e0d4      	b.n	8008322 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008178:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f005 ff3e 	bl	800e000 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	32b0      	adds	r2, #176	@ 0xb0
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	32b0      	adds	r2, #176	@ 0xb0
 800819e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7c1b      	ldrb	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d138      	bne.n	8008222 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081b0:	4b5e      	ldr	r3, [pc, #376]	@ (800832c <USBD_CDC_Init+0x1e4>)
 80081b2:	7819      	ldrb	r1, [r3, #0]
 80081b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081b8:	2202      	movs	r2, #2
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f002 fb41 	bl	800a842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80081c0:	4b5a      	ldr	r3, [pc, #360]	@ (800832c <USBD_CDC_Init+0x1e4>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	f003 020f 	and.w	r2, r3, #15
 80081c8:	6879      	ldr	r1, [r7, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	440b      	add	r3, r1
 80081d4:	3324      	adds	r3, #36	@ 0x24
 80081d6:	2201      	movs	r2, #1
 80081d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081da:	4b55      	ldr	r3, [pc, #340]	@ (8008330 <USBD_CDC_Init+0x1e8>)
 80081dc:	7819      	ldrb	r1, [r3, #0]
 80081de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081e2:	2202      	movs	r2, #2
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f002 fb2c 	bl	800a842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081ea:	4b51      	ldr	r3, [pc, #324]	@ (8008330 <USBD_CDC_Init+0x1e8>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f003 020f 	and.w	r2, r3, #15
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008202:	2201      	movs	r2, #1
 8008204:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008206:	4b4b      	ldr	r3, [pc, #300]	@ (8008334 <USBD_CDC_Init+0x1ec>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	f003 020f 	and.w	r2, r3, #15
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3326      	adds	r3, #38	@ 0x26
 800821c:	2210      	movs	r2, #16
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	e035      	b.n	800828e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008222:	4b42      	ldr	r3, [pc, #264]	@ (800832c <USBD_CDC_Init+0x1e4>)
 8008224:	7819      	ldrb	r1, [r3, #0]
 8008226:	2340      	movs	r3, #64	@ 0x40
 8008228:	2202      	movs	r2, #2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f002 fb09 	bl	800a842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008230:	4b3e      	ldr	r3, [pc, #248]	@ (800832c <USBD_CDC_Init+0x1e4>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 020f 	and.w	r2, r3, #15
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	3324      	adds	r3, #36	@ 0x24
 8008246:	2201      	movs	r2, #1
 8008248:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800824a:	4b39      	ldr	r3, [pc, #228]	@ (8008330 <USBD_CDC_Init+0x1e8>)
 800824c:	7819      	ldrb	r1, [r3, #0]
 800824e:	2340      	movs	r3, #64	@ 0x40
 8008250:	2202      	movs	r2, #2
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f002 faf5 	bl	800a842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008258:	4b35      	ldr	r3, [pc, #212]	@ (8008330 <USBD_CDC_Init+0x1e8>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f003 020f 	and.w	r2, r3, #15
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	440b      	add	r3, r1
 800826c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008270:	2201      	movs	r2, #1
 8008272:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008274:	4b2f      	ldr	r3, [pc, #188]	@ (8008334 <USBD_CDC_Init+0x1ec>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	f003 020f 	and.w	r2, r3, #15
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	3326      	adds	r3, #38	@ 0x26
 800828a:	2210      	movs	r2, #16
 800828c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800828e:	4b29      	ldr	r3, [pc, #164]	@ (8008334 <USBD_CDC_Init+0x1ec>)
 8008290:	7819      	ldrb	r1, [r3, #0]
 8008292:	2308      	movs	r3, #8
 8008294:	2203      	movs	r2, #3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f002 fad3 	bl	800a842 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800829c:	4b25      	ldr	r3, [pc, #148]	@ (8008334 <USBD_CDC_Init+0x1ec>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 020f 	and.w	r2, r3, #15
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	440b      	add	r3, r1
 80082b0:	3324      	adds	r3, #36	@ 0x24
 80082b2:	2201      	movs	r2, #1
 80082b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	33b0      	adds	r3, #176	@ 0xb0
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80082ec:	2302      	movs	r3, #2
 80082ee:	e018      	b.n	8008322 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7c1b      	ldrb	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10a      	bne.n	800830e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <USBD_CDC_Init+0x1e8>)
 80082fa:	7819      	ldrb	r1, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008302:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f002 fb8a 	bl	800aa20 <USBD_LL_PrepareReceive>
 800830c:	e008      	b.n	8008320 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800830e:	4b08      	ldr	r3, [pc, #32]	@ (8008330 <USBD_CDC_Init+0x1e8>)
 8008310:	7819      	ldrb	r1, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008318:	2340      	movs	r3, #64	@ 0x40
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f002 fb80 	bl	800aa20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000107 	.word	0x20000107
 8008330:	20000108 	.word	0x20000108
 8008334:	20000109 	.word	0x20000109

08008338 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008344:	4b3a      	ldr	r3, [pc, #232]	@ (8008430 <USBD_CDC_DeInit+0xf8>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f002 fa9f 	bl	800a88e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008350:	4b37      	ldr	r3, [pc, #220]	@ (8008430 <USBD_CDC_DeInit+0xf8>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 020f 	and.w	r2, r3, #15
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	3324      	adds	r3, #36	@ 0x24
 8008366:	2200      	movs	r2, #0
 8008368:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800836a:	4b32      	ldr	r3, [pc, #200]	@ (8008434 <USBD_CDC_DeInit+0xfc>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f002 fa8c 	bl	800a88e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008376:	4b2f      	ldr	r3, [pc, #188]	@ (8008434 <USBD_CDC_DeInit+0xfc>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	f003 020f 	and.w	r2, r3, #15
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800838e:	2200      	movs	r2, #0
 8008390:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008392:	4b29      	ldr	r3, [pc, #164]	@ (8008438 <USBD_CDC_DeInit+0x100>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f002 fa78 	bl	800a88e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800839e:	4b26      	ldr	r3, [pc, #152]	@ (8008438 <USBD_CDC_DeInit+0x100>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f003 020f 	and.w	r2, r3, #15
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	3324      	adds	r3, #36	@ 0x24
 80083b4:	2200      	movs	r2, #0
 80083b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80083b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008438 <USBD_CDC_DeInit+0x100>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 020f 	and.w	r2, r3, #15
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	3326      	adds	r3, #38	@ 0x26
 80083ce:	2200      	movs	r2, #0
 80083d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	32b0      	adds	r2, #176	@ 0xb0
 80083dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01f      	beq.n	8008424 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	33b0      	adds	r3, #176	@ 0xb0
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	32b0      	adds	r2, #176	@ 0xb0
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	4618      	mov	r0, r3
 8008408:	f002 fb4c 	bl	800aaa4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32b0      	adds	r2, #176	@ 0xb0
 8008416:	2100      	movs	r1, #0
 8008418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20000107 	.word	0x20000107
 8008434:	20000108 	.word	0x20000108
 8008438:	20000109 	.word	0x20000109

0800843c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	32b0      	adds	r2, #176	@ 0xb0
 8008450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008454:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	e0bf      	b.n	80085ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008474:	2b00      	cmp	r3, #0
 8008476:	d050      	beq.n	800851a <USBD_CDC_Setup+0xde>
 8008478:	2b20      	cmp	r3, #32
 800847a:	f040 80af 	bne.w	80085dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	88db      	ldrh	r3, [r3, #6]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d03a      	beq.n	80084fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	b25b      	sxtb	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	da1b      	bge.n	80084c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	33b0      	adds	r3, #176	@ 0xb0
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80084a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	88d2      	ldrh	r2, [r2, #6]
 80084ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	88db      	ldrh	r3, [r3, #6]
 80084b2:	2b07      	cmp	r3, #7
 80084b4:	bf28      	it	cs
 80084b6:	2307      	movcs	r3, #7
 80084b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	89fa      	ldrh	r2, [r7, #14]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 fd87 	bl	8009fd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80084c6:	e090      	b.n	80085ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	785a      	ldrb	r2, [r3, #1]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	88db      	ldrh	r3, [r3, #6]
 80084d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80084d8:	d803      	bhi.n	80084e2 <USBD_CDC_Setup+0xa6>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	88db      	ldrh	r3, [r3, #6]
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	e000      	b.n	80084e4 <USBD_CDC_Setup+0xa8>
 80084e2:	2240      	movs	r2, #64	@ 0x40
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80084ea:	6939      	ldr	r1, [r7, #16]
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80084f2:	461a      	mov	r2, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 fd99 	bl	800a02c <USBD_CtlPrepareRx>
      break;
 80084fa:	e076      	b.n	80085ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	33b0      	adds	r3, #176	@ 0xb0
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	7850      	ldrb	r0, [r2, #1]
 8008512:	2200      	movs	r2, #0
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	4798      	blx	r3
      break;
 8008518:	e067      	b.n	80085ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b0b      	cmp	r3, #11
 8008520:	d851      	bhi.n	80085c6 <USBD_CDC_Setup+0x18a>
 8008522:	a201      	add	r2, pc, #4	@ (adr r2, 8008528 <USBD_CDC_Setup+0xec>)
 8008524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008528:	08008559 	.word	0x08008559
 800852c:	080085d5 	.word	0x080085d5
 8008530:	080085c7 	.word	0x080085c7
 8008534:	080085c7 	.word	0x080085c7
 8008538:	080085c7 	.word	0x080085c7
 800853c:	080085c7 	.word	0x080085c7
 8008540:	080085c7 	.word	0x080085c7
 8008544:	080085c7 	.word	0x080085c7
 8008548:	080085c7 	.word	0x080085c7
 800854c:	080085c7 	.word	0x080085c7
 8008550:	08008583 	.word	0x08008583
 8008554:	080085ad 	.word	0x080085ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b03      	cmp	r3, #3
 8008562:	d107      	bne.n	8008574 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008564:	f107 030a 	add.w	r3, r7, #10
 8008568:	2202      	movs	r2, #2
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fd31 	bl	8009fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008572:	e032      	b.n	80085da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fcbb 	bl	8009ef2 <USBD_CtlError>
            ret = USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	75fb      	strb	r3, [r7, #23]
          break;
 8008580:	e02b      	b.n	80085da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b03      	cmp	r3, #3
 800858c:	d107      	bne.n	800859e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800858e:	f107 030d 	add.w	r3, r7, #13
 8008592:	2201      	movs	r2, #1
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fd1c 	bl	8009fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800859c:	e01d      	b.n	80085da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fca6 	bl	8009ef2 <USBD_CtlError>
            ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	75fb      	strb	r3, [r7, #23]
          break;
 80085aa:	e016      	b.n	80085da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d00f      	beq.n	80085d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fc99 	bl	8009ef2 <USBD_CtlError>
            ret = USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085c4:	e008      	b.n	80085d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fc92 	bl	8009ef2 <USBD_CtlError>
          ret = USBD_FAIL;
 80085ce:	2303      	movs	r3, #3
 80085d0:	75fb      	strb	r3, [r7, #23]
          break;
 80085d2:	e002      	b.n	80085da <USBD_CDC_Setup+0x19e>
          break;
 80085d4:	bf00      	nop
 80085d6:	e008      	b.n	80085ea <USBD_CDC_Setup+0x1ae>
          break;
 80085d8:	bf00      	nop
      }
      break;
 80085da:	e006      	b.n	80085ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fc87 	bl	8009ef2 <USBD_CtlError>
      ret = USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	75fb      	strb	r3, [r7, #23]
      break;
 80085e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008606:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	32b0      	adds	r2, #176	@ 0xb0
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800861a:	2303      	movs	r3, #3
 800861c:	e065      	b.n	80086ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	32b0      	adds	r2, #176	@ 0xb0
 8008628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	f003 020f 	and.w	r2, r3, #15
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	3318      	adds	r3, #24
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02f      	beq.n	80086a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	f003 020f 	and.w	r2, r3, #15
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	3318      	adds	r3, #24
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	f003 010f 	and.w	r1, r3, #15
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	460b      	mov	r3, r1
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	440b      	add	r3, r1
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4403      	add	r3, r0
 8008670:	331c      	adds	r3, #28
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	fbb2 f1f3 	udiv	r1, r2, r3
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800867e:	2b00      	cmp	r3, #0
 8008680:	d112      	bne.n	80086a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	440b      	add	r3, r1
 8008694:	3318      	adds	r3, #24
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800869a:	78f9      	ldrb	r1, [r7, #3]
 800869c:	2300      	movs	r3, #0
 800869e:	2200      	movs	r2, #0
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f002 f99c 	bl	800a9de <USBD_LL_Transmit>
 80086a6:	e01f      	b.n	80086e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	33b0      	adds	r3, #176	@ 0xb0
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d010      	beq.n	80086e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	33b0      	adds	r3, #176	@ 0xb0
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	32b0      	adds	r2, #176	@ 0xb0
 8008708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	32b0      	adds	r2, #176	@ 0xb0
 8008718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008720:	2303      	movs	r3, #3
 8008722:	e01a      	b.n	800875a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f002 f99a 	bl	800aa62 <USBD_LL_GetRxDataSize>
 800872e:	4602      	mov	r2, r0
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	33b0      	adds	r3, #176	@ 0xb0
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008754:	4611      	mov	r1, r2
 8008756:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	32b0      	adds	r2, #176	@ 0xb0
 8008774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008778:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	e024      	b.n	80087ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	33b0      	adds	r3, #176	@ 0xb0
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d019      	beq.n	80087cc <USBD_CDC_EP0_RxReady+0x6a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800879e:	2bff      	cmp	r3, #255	@ 0xff
 80087a0:	d014      	beq.n	80087cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	33b0      	adds	r3, #176	@ 0xb0
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80087ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	22ff      	movs	r2, #255	@ 0xff
 80087c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087e0:	2182      	movs	r1, #130	@ 0x82
 80087e2:	4818      	ldr	r0, [pc, #96]	@ (8008844 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087e4:	f000 fd4f 	bl	8009286 <USBD_GetEpDesc>
 80087e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087ea:	2101      	movs	r1, #1
 80087ec:	4815      	ldr	r0, [pc, #84]	@ (8008844 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087ee:	f000 fd4a 	bl	8009286 <USBD_GetEpDesc>
 80087f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087f4:	2181      	movs	r1, #129	@ 0x81
 80087f6:	4813      	ldr	r0, [pc, #76]	@ (8008844 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087f8:	f000 fd45 	bl	8009286 <USBD_GetEpDesc>
 80087fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2210      	movs	r2, #16
 8008808:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d006      	beq.n	800881e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2200      	movs	r2, #0
 8008814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008818:	711a      	strb	r2, [r3, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d006      	beq.n	8008832 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800882c:	711a      	strb	r2, [r3, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2243      	movs	r2, #67	@ 0x43
 8008836:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008838:	4b02      	ldr	r3, [pc, #8]	@ (8008844 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	200000c4 	.word	0x200000c4

08008848 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008850:	2182      	movs	r1, #130	@ 0x82
 8008852:	4818      	ldr	r0, [pc, #96]	@ (80088b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008854:	f000 fd17 	bl	8009286 <USBD_GetEpDesc>
 8008858:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800885a:	2101      	movs	r1, #1
 800885c:	4815      	ldr	r0, [pc, #84]	@ (80088b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800885e:	f000 fd12 	bl	8009286 <USBD_GetEpDesc>
 8008862:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008864:	2181      	movs	r1, #129	@ 0x81
 8008866:	4813      	ldr	r0, [pc, #76]	@ (80088b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008868:	f000 fd0d 	bl	8009286 <USBD_GetEpDesc>
 800886c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2210      	movs	r2, #16
 8008878:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d006      	beq.n	800888e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2200      	movs	r2, #0
 8008884:	711a      	strb	r2, [r3, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f042 0202 	orr.w	r2, r2, #2
 800888c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d006      	beq.n	80088a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	711a      	strb	r2, [r3, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f042 0202 	orr.w	r2, r2, #2
 80088a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2243      	movs	r2, #67	@ 0x43
 80088a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088a8:	4b02      	ldr	r3, [pc, #8]	@ (80088b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	200000c4 	.word	0x200000c4

080088b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088c0:	2182      	movs	r1, #130	@ 0x82
 80088c2:	4818      	ldr	r0, [pc, #96]	@ (8008924 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088c4:	f000 fcdf 	bl	8009286 <USBD_GetEpDesc>
 80088c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088ca:	2101      	movs	r1, #1
 80088cc:	4815      	ldr	r0, [pc, #84]	@ (8008924 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088ce:	f000 fcda 	bl	8009286 <USBD_GetEpDesc>
 80088d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088d4:	2181      	movs	r1, #129	@ 0x81
 80088d6:	4813      	ldr	r0, [pc, #76]	@ (8008924 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088d8:	f000 fcd5 	bl	8009286 <USBD_GetEpDesc>
 80088dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2210      	movs	r2, #16
 80088e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088f8:	711a      	strb	r2, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800890c:	711a      	strb	r2, [r3, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2243      	movs	r2, #67	@ 0x43
 8008916:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008918:	4b02      	ldr	r3, [pc, #8]	@ (8008924 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800891a:	4618      	mov	r0, r3
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200000c4 	.word	0x200000c4

08008928 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	220a      	movs	r2, #10
 8008934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008936:	4b03      	ldr	r3, [pc, #12]	@ (8008944 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	20000080 	.word	0x20000080

08008948 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008958:	2303      	movs	r3, #3
 800895a:	e009      	b.n	8008970 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	33b0      	adds	r3, #176	@ 0xb0
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	32b0      	adds	r2, #176	@ 0xb0
 8008992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008996:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800899e:	2303      	movs	r3, #3
 80089a0:	e008      	b.n	80089b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	32b0      	adds	r2, #176	@ 0xb0
 80089d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e004      	b.n	80089ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
	...

080089fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	32b0      	adds	r2, #176	@ 0xb0
 8008a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a12:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a14:	2301      	movs	r3, #1
 8008a16:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e025      	b.n	8008a6e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d11f      	bne.n	8008a6c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a34:	4b10      	ldr	r3, [pc, #64]	@ (8008a78 <USBD_CDC_TransmitPacket+0x7c>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 020f 	and.w	r2, r3, #15
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4613      	mov	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4403      	add	r3, r0
 8008a4e:	3318      	adds	r3, #24
 8008a50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a52:	4b09      	ldr	r3, [pc, #36]	@ (8008a78 <USBD_CDC_TransmitPacket+0x7c>)
 8008a54:	7819      	ldrb	r1, [r3, #0]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 ffbb 	bl	800a9de <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000107 	.word	0x20000107

08008a7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	32b0      	adds	r2, #176	@ 0xb0
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	32b0      	adds	r2, #176	@ 0xb0
 8008a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e018      	b.n	8008adc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7c1b      	ldrb	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae4 <USBD_CDC_ReceivePacket+0x68>)
 8008ab4:	7819      	ldrb	r1, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 ffad 	bl	800aa20 <USBD_LL_PrepareReceive>
 8008ac6:	e008      	b.n	8008ada <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ac8:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <USBD_CDC_ReceivePacket+0x68>)
 8008aca:	7819      	ldrb	r1, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ad2:	2340      	movs	r3, #64	@ 0x40
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 ffa3 	bl	800aa20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20000108 	.word	0x20000108

08008ae8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e01f      	b.n	8008b40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	79fa      	ldrb	r2, [r7, #7]
 8008b32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f001 fe1d 	bl	800a774 <USBD_LL_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e025      	b.n	8008bac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	32ae      	adds	r2, #174	@ 0xae
 8008b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00f      	beq.n	8008b9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32ae      	adds	r2, #174	@ 0xae
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8c:	f107 020e 	add.w	r2, r7, #14
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	4602      	mov	r2, r0
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 fe25 	bl	800a80c <USBD_LL_Start>
 8008bc2:	4603      	mov	r3, r0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	78fa      	ldrb	r2, [r7, #3]
 8008c06:	4611      	mov	r1, r2
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	4798      	blx	r3
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 f90c 	bl	8009e7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008c74:	461a      	mov	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c82:	f003 031f 	and.w	r3, r3, #31
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d01a      	beq.n	8008cc0 <USBD_LL_SetupStage+0x72>
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d822      	bhi.n	8008cd4 <USBD_LL_SetupStage+0x86>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <USBD_LL_SetupStage+0x4a>
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d00a      	beq.n	8008cac <USBD_LL_SetupStage+0x5e>
 8008c96:	e01d      	b.n	8008cd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fb63 	bl	800936c <USBD_StdDevReq>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8008caa:	e020      	b.n	8008cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fbcb 	bl	8009450 <USBD_StdItfReq>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cbe:	e016      	b.n	8008cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fc2d 	bl	8009528 <USBD_StdEPReq>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd2:	e00c      	b.n	8008cee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008cda:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fdf2 	bl	800a8cc <USBD_LL_StallEP>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
      break;
 8008cec:	bf00      	nop
  }

  return ret;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	460b      	mov	r3, r1
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d16e      	bne.n	8008dee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	f040 8098 	bne.w	8008e54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d913      	bls.n	8008d58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	1ad2      	subs	r2, r2, r3
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	4293      	cmp	r3, r2
 8008d48:	bf28      	it	cs
 8008d4a:	4613      	movcs	r3, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f001 f988 	bl	800a066 <USBD_CtlContinueRx>
 8008d56:	e07d      	b.n	8008e54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d014      	beq.n	8008d90 <USBD_LL_DataOutStage+0x98>
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d81d      	bhi.n	8008da6 <USBD_LL_DataOutStage+0xae>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <USBD_LL_DataOutStage+0x7c>
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d003      	beq.n	8008d7a <USBD_LL_DataOutStage+0x82>
 8008d72:	e018      	b.n	8008da6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	75bb      	strb	r3, [r7, #22]
            break;
 8008d78:	e018      	b.n	8008dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	4619      	mov	r1, r3
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fa64 	bl	8009252 <USBD_CoreFindIF>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008d8e:	e00d      	b.n	8008dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 fa66 	bl	800926c <USBD_CoreFindEP>
 8008da0:	4603      	mov	r3, r0
 8008da2:	75bb      	strb	r3, [r7, #22]
            break;
 8008da4:	e002      	b.n	8008dac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	75bb      	strb	r3, [r7, #22]
            break;
 8008daa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008dac:	7dbb      	ldrb	r3, [r7, #22]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d119      	bne.n	8008de6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d113      	bne.n	8008de6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008dbe:	7dba      	ldrb	r2, [r7, #22]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	32ae      	adds	r2, #174	@ 0xae
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00b      	beq.n	8008de6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008dce:	7dba      	ldrb	r2, [r7, #22]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008dd6:	7dba      	ldrb	r2, [r7, #22]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	32ae      	adds	r2, #174	@ 0xae
 8008ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f001 f94e 	bl	800a088 <USBD_CtlSendStatus>
 8008dec:	e032      	b.n	8008e54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008dee:	7afb      	ldrb	r3, [r7, #11]
 8008df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fa37 	bl	800926c <USBD_CoreFindEP>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e02:	7dbb      	ldrb	r3, [r7, #22]
 8008e04:	2bff      	cmp	r3, #255	@ 0xff
 8008e06:	d025      	beq.n	8008e54 <USBD_LL_DataOutStage+0x15c>
 8008e08:	7dbb      	ldrb	r3, [r7, #22]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d122      	bne.n	8008e54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d117      	bne.n	8008e4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e1a:	7dba      	ldrb	r2, [r7, #22]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	32ae      	adds	r2, #174	@ 0xae
 8008e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00f      	beq.n	8008e4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e2a:	7dba      	ldrb	r2, [r7, #22]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e32:	7dba      	ldrb	r2, [r7, #22]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	32ae      	adds	r2, #174	@ 0xae
 8008e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	7afa      	ldrb	r2, [r7, #11]
 8008e40:	4611      	mov	r1, r2
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	4798      	blx	r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	e000      	b.n	8008e56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	460b      	mov	r3, r1
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d16f      	bne.n	8008f52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3314      	adds	r3, #20
 8008e76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d15a      	bne.n	8008f38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d914      	bls.n	8008eb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	689a      	ldr	r2, [r3, #8]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f001 f8b0 	bl	800a00a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2200      	movs	r2, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f001 fdb5 	bl	800aa20 <USBD_LL_PrepareReceive>
 8008eb6:	e03f      	b.n	8008f38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d11c      	bne.n	8008efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d316      	bcc.n	8008efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20f      	bcs.n	8008efe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f001 f891 	bl	800a00a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f001 fd92 	bl	800aa20 <USBD_LL_PrepareReceive>
 8008efc:	e01c      	b.n	8008f38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d10f      	bne.n	8008f2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f2a:	2180      	movs	r1, #128	@ 0x80
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f001 fccd 	bl	800a8cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f001 f8bb 	bl	800a0ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d03a      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7ff fe42 	bl	8008bcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f50:	e032      	b.n	8008fb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f985 	bl	800926c <USBD_CoreFindEP>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2bff      	cmp	r3, #255	@ 0xff
 8008f6a:	d025      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d122      	bne.n	8008fb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d11c      	bne.n	8008fb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f7e:	7dfa      	ldrb	r2, [r7, #23]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	32ae      	adds	r2, #174	@ 0xae
 8008f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d014      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008f8e:	7dfa      	ldrb	r2, [r7, #23]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008f96:	7dfa      	ldrb	r2, [r7, #23]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	32ae      	adds	r2, #174	@ 0xae
 8008f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	7afa      	ldrb	r2, [r7, #11]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008fae:	7dbb      	ldrb	r3, [r7, #22]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008fb4:	7dbb      	ldrb	r3, [r7, #22]
 8008fb6:	e000      	b.n	8008fba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d014      	beq.n	8009028 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	6852      	ldr	r2, [r2, #4]
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	4611      	mov	r1, r2
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009024:	2303      	movs	r3, #3
 8009026:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009028:	2340      	movs	r3, #64	@ 0x40
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fc07 	bl	800a842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2240      	movs	r2, #64	@ 0x40
 8009040:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009044:	2340      	movs	r3, #64	@ 0x40
 8009046:	2200      	movs	r2, #0
 8009048:	2180      	movs	r1, #128	@ 0x80
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 fbf9 	bl	800a842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2240      	movs	r2, #64	@ 0x40
 800905a:	621a      	str	r2, [r3, #32]

  return ret;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	78fa      	ldrb	r2, [r7, #3]
 8009076:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b04      	cmp	r3, #4
 8009098:	d006      	beq.n	80090a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2204      	movs	r2, #4
 80090ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d106      	bne.n	80090e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d110      	bne.n	8009124 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d005      	beq.n	8009124 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	32ae      	adds	r2, #174	@ 0xae
 8009144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800914c:	2303      	movs	r3, #3
 800914e:	e01c      	b.n	800918a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b03      	cmp	r3, #3
 800915a:	d115      	bne.n	8009188 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	32ae      	adds	r2, #174	@ 0xae
 8009166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	32ae      	adds	r2, #174	@ 0xae
 800917a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	78fa      	ldrb	r2, [r7, #3]
 8009182:	4611      	mov	r1, r2
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	32ae      	adds	r2, #174	@ 0xae
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e01c      	b.n	80091ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d115      	bne.n	80091ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	32ae      	adds	r2, #174	@ 0xae
 80091ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	32ae      	adds	r2, #174	@ 0xae
 80091de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	4611      	mov	r1, r2
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00e      	beq.n	8009248 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6852      	ldr	r2, [r2, #4]
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	4611      	mov	r1, r2
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009244:	2303      	movs	r3, #3
 8009246:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	460b      	mov	r3, r1
 800925c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800925e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009278:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	885b      	ldrh	r3, [r3, #2]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d91f      	bls.n	80092ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80092b2:	e013      	b.n	80092dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092b4:	f107 030a 	add.w	r3, r7, #10
 80092b8:	4619      	mov	r1, r3
 80092ba:	6978      	ldr	r0, [r7, #20]
 80092bc:	f000 f81b 	bl	80092f6 <USBD_GetNextDesc>
 80092c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	785b      	ldrb	r3, [r3, #1]
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d108      	bne.n	80092dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	789b      	ldrb	r3, [r3, #2]
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d008      	beq.n	80092ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092d8:	2300      	movs	r3, #0
 80092da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	885b      	ldrh	r3, [r3, #2]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	897b      	ldrh	r3, [r7, #10]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d8e5      	bhi.n	80092b4 <USBD_GetEpDesc+0x2e>
 80092e8:	e000      	b.n	80092ec <USBD_GetEpDesc+0x66>
          break;
 80092ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80092ec:	693b      	ldr	r3, [r7, #16]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	4413      	add	r3, r2
 800930e:	b29a      	uxth	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4413      	add	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009320:	68fb      	ldr	r3, [r7, #12]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800932e:	b480      	push	{r7}
 8009330:	b087      	sub	sp, #28
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	3301      	adds	r3, #1
 8009344:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800934c:	8a3b      	ldrh	r3, [r7, #16]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	b21a      	sxth	r2, r3
 8009352:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009356:	4313      	orrs	r3, r2
 8009358:	b21b      	sxth	r3, r3
 800935a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800935c:	89fb      	ldrh	r3, [r7, #14]
}
 800935e:	4618      	mov	r0, r3
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009382:	2b40      	cmp	r3, #64	@ 0x40
 8009384:	d005      	beq.n	8009392 <USBD_StdDevReq+0x26>
 8009386:	2b40      	cmp	r3, #64	@ 0x40
 8009388:	d857      	bhi.n	800943a <USBD_StdDevReq+0xce>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00f      	beq.n	80093ae <USBD_StdDevReq+0x42>
 800938e:	2b20      	cmp	r3, #32
 8009390:	d153      	bne.n	800943a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	32ae      	adds	r2, #174	@ 0xae
 800939c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	4798      	blx	r3
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
      break;
 80093ac:	e04a      	b.n	8009444 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	2b09      	cmp	r3, #9
 80093b4:	d83b      	bhi.n	800942e <USBD_StdDevReq+0xc2>
 80093b6:	a201      	add	r2, pc, #4	@ (adr r2, 80093bc <USBD_StdDevReq+0x50>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	08009411 	.word	0x08009411
 80093c0:	08009425 	.word	0x08009425
 80093c4:	0800942f 	.word	0x0800942f
 80093c8:	0800941b 	.word	0x0800941b
 80093cc:	0800942f 	.word	0x0800942f
 80093d0:	080093ef 	.word	0x080093ef
 80093d4:	080093e5 	.word	0x080093e5
 80093d8:	0800942f 	.word	0x0800942f
 80093dc:	08009407 	.word	0x08009407
 80093e0:	080093f9 	.word	0x080093f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa3c 	bl	8009864 <USBD_GetDescriptor>
          break;
 80093ec:	e024      	b.n	8009438 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fba1 	bl	8009b38 <USBD_SetAddress>
          break;
 80093f6:	e01f      	b.n	8009438 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fbe0 	bl	8009bc0 <USBD_SetConfig>
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]
          break;
 8009404:	e018      	b.n	8009438 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fc83 	bl	8009d14 <USBD_GetConfig>
          break;
 800940e:	e013      	b.n	8009438 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fcb4 	bl	8009d80 <USBD_GetStatus>
          break;
 8009418:	e00e      	b.n	8009438 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fce3 	bl	8009de8 <USBD_SetFeature>
          break;
 8009422:	e009      	b.n	8009438 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fd07 	bl	8009e3a <USBD_ClrFeature>
          break;
 800942c:	e004      	b.n	8009438 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fd5e 	bl	8009ef2 <USBD_CtlError>
          break;
 8009436:	bf00      	nop
      }
      break;
 8009438:	e004      	b.n	8009444 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fd58 	bl	8009ef2 <USBD_CtlError>
      break;
 8009442:	bf00      	nop
  }

  return ret;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop

08009450 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009466:	2b40      	cmp	r3, #64	@ 0x40
 8009468:	d005      	beq.n	8009476 <USBD_StdItfReq+0x26>
 800946a:	2b40      	cmp	r3, #64	@ 0x40
 800946c:	d852      	bhi.n	8009514 <USBD_StdItfReq+0xc4>
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <USBD_StdItfReq+0x26>
 8009472:	2b20      	cmp	r3, #32
 8009474:	d14e      	bne.n	8009514 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	2b02      	cmp	r3, #2
 8009482:	d840      	bhi.n	8009506 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	889b      	ldrh	r3, [r3, #4]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b01      	cmp	r3, #1
 800948c:	d836      	bhi.n	80094fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	889b      	ldrh	r3, [r3, #4]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff fedb 	bl	8009252 <USBD_CoreFindIF>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	2bff      	cmp	r3, #255	@ 0xff
 80094a4:	d01d      	beq.n	80094e2 <USBD_StdItfReq+0x92>
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d11a      	bne.n	80094e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094ac:	7bba      	ldrb	r2, [r7, #14]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	32ae      	adds	r2, #174	@ 0xae
 80094b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00f      	beq.n	80094dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80094bc:	7bba      	ldrb	r2, [r7, #14]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094c4:	7bba      	ldrb	r2, [r7, #14]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	32ae      	adds	r2, #174	@ 0xae
 80094ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094da:	e004      	b.n	80094e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094e0:	e001      	b.n	80094e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80094e2:	2303      	movs	r3, #3
 80094e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	88db      	ldrh	r3, [r3, #6]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d110      	bne.n	8009510 <USBD_StdItfReq+0xc0>
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10d      	bne.n	8009510 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fdc7 	bl	800a088 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094fa:	e009      	b.n	8009510 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fcf7 	bl	8009ef2 <USBD_CtlError>
          break;
 8009504:	e004      	b.n	8009510 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fcf2 	bl	8009ef2 <USBD_CtlError>
          break;
 800950e:	e000      	b.n	8009512 <USBD_StdItfReq+0xc2>
          break;
 8009510:	bf00      	nop
      }
      break;
 8009512:	e004      	b.n	800951e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fceb 	bl	8009ef2 <USBD_CtlError>
      break;
 800951c:	bf00      	nop
  }

  return ret;
 800951e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	889b      	ldrh	r3, [r3, #4]
 800953a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009544:	2b40      	cmp	r3, #64	@ 0x40
 8009546:	d007      	beq.n	8009558 <USBD_StdEPReq+0x30>
 8009548:	2b40      	cmp	r3, #64	@ 0x40
 800954a:	f200 817f 	bhi.w	800984c <USBD_StdEPReq+0x324>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d02a      	beq.n	80095a8 <USBD_StdEPReq+0x80>
 8009552:	2b20      	cmp	r3, #32
 8009554:	f040 817a 	bne.w	800984c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7ff fe85 	bl	800926c <USBD_CoreFindEP>
 8009562:	4603      	mov	r3, r0
 8009564:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009566:	7b7b      	ldrb	r3, [r7, #13]
 8009568:	2bff      	cmp	r3, #255	@ 0xff
 800956a:	f000 8174 	beq.w	8009856 <USBD_StdEPReq+0x32e>
 800956e:	7b7b      	ldrb	r3, [r7, #13]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f040 8170 	bne.w	8009856 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009576:	7b7a      	ldrb	r2, [r7, #13]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800957e:	7b7a      	ldrb	r2, [r7, #13]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	32ae      	adds	r2, #174	@ 0xae
 8009584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 8163 	beq.w	8009856 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009590:	7b7a      	ldrb	r2, [r7, #13]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	32ae      	adds	r2, #174	@ 0xae
 8009596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095a6:	e156      	b.n	8009856 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d008      	beq.n	80095c2 <USBD_StdEPReq+0x9a>
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	f300 8145 	bgt.w	8009840 <USBD_StdEPReq+0x318>
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 809b 	beq.w	80096f2 <USBD_StdEPReq+0x1ca>
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d03c      	beq.n	800963a <USBD_StdEPReq+0x112>
 80095c0:	e13e      	b.n	8009840 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d002      	beq.n	80095d4 <USBD_StdEPReq+0xac>
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d016      	beq.n	8009600 <USBD_StdEPReq+0xd8>
 80095d2:	e02c      	b.n	800962e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00d      	beq.n	80095f6 <USBD_StdEPReq+0xce>
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	2b80      	cmp	r3, #128	@ 0x80
 80095de:	d00a      	beq.n	80095f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 f971 	bl	800a8cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095ea:	2180      	movs	r1, #128	@ 0x80
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 f96d 	bl	800a8cc <USBD_LL_StallEP>
 80095f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095f4:	e020      	b.n	8009638 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fc7a 	bl	8009ef2 <USBD_CtlError>
              break;
 80095fe:	e01b      	b.n	8009638 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	885b      	ldrh	r3, [r3, #2]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10e      	bne.n	8009626 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009608:	7bbb      	ldrb	r3, [r7, #14]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00b      	beq.n	8009626 <USBD_StdEPReq+0xfe>
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	2b80      	cmp	r3, #128	@ 0x80
 8009612:	d008      	beq.n	8009626 <USBD_StdEPReq+0xfe>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	88db      	ldrh	r3, [r3, #6]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 f953 	bl	800a8cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fd2e 	bl	800a088 <USBD_CtlSendStatus>

              break;
 800962c:	e004      	b.n	8009638 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fc5e 	bl	8009ef2 <USBD_CtlError>
              break;
 8009636:	bf00      	nop
          }
          break;
 8009638:	e107      	b.n	800984a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b02      	cmp	r3, #2
 8009644:	d002      	beq.n	800964c <USBD_StdEPReq+0x124>
 8009646:	2b03      	cmp	r3, #3
 8009648:	d016      	beq.n	8009678 <USBD_StdEPReq+0x150>
 800964a:	e04b      	b.n	80096e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00d      	beq.n	800966e <USBD_StdEPReq+0x146>
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b80      	cmp	r3, #128	@ 0x80
 8009656:	d00a      	beq.n	800966e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 f935 	bl	800a8cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009662:	2180      	movs	r1, #128	@ 0x80
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 f931 	bl	800a8cc <USBD_LL_StallEP>
 800966a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800966c:	e040      	b.n	80096f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fc3e 	bl	8009ef2 <USBD_CtlError>
              break;
 8009676:	e03b      	b.n	80096f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	885b      	ldrh	r3, [r3, #2]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d136      	bne.n	80096ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 f93b 	bl	800a90a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fcf7 	bl	800a088 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800969a:	7bbb      	ldrb	r3, [r7, #14]
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff fde4 	bl	800926c <USBD_CoreFindEP>
 80096a4:	4603      	mov	r3, r0
 80096a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096a8:	7b7b      	ldrb	r3, [r7, #13]
 80096aa:	2bff      	cmp	r3, #255	@ 0xff
 80096ac:	d01f      	beq.n	80096ee <USBD_StdEPReq+0x1c6>
 80096ae:	7b7b      	ldrb	r3, [r7, #13]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d11c      	bne.n	80096ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096b4:	7b7a      	ldrb	r2, [r7, #13]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80096bc:	7b7a      	ldrb	r2, [r7, #13]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	32ae      	adds	r2, #174	@ 0xae
 80096c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d010      	beq.n	80096ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096cc:	7b7a      	ldrb	r2, [r7, #13]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	32ae      	adds	r2, #174	@ 0xae
 80096d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80096e2:	e004      	b.n	80096ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc03 	bl	8009ef2 <USBD_CtlError>
              break;
 80096ec:	e000      	b.n	80096f0 <USBD_StdEPReq+0x1c8>
              break;
 80096ee:	bf00      	nop
          }
          break;
 80096f0:	e0ab      	b.n	800984a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d002      	beq.n	8009704 <USBD_StdEPReq+0x1dc>
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d032      	beq.n	8009768 <USBD_StdEPReq+0x240>
 8009702:	e097      	b.n	8009834 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d007      	beq.n	800971a <USBD_StdEPReq+0x1f2>
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b80      	cmp	r3, #128	@ 0x80
 800970e:	d004      	beq.n	800971a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fbed 	bl	8009ef2 <USBD_CtlError>
                break;
 8009718:	e091      	b.n	800983e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800971a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800971e:	2b00      	cmp	r3, #0
 8009720:	da0b      	bge.n	800973a <USBD_StdEPReq+0x212>
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	3310      	adds	r3, #16
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	4413      	add	r3, r2
 8009736:	3304      	adds	r3, #4
 8009738:	e00b      	b.n	8009752 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	4413      	add	r3, r2
 8009750:	3304      	adds	r3, #4
 8009752:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2202      	movs	r2, #2
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fc37 	bl	8009fd4 <USBD_CtlSendData>
              break;
 8009766:	e06a      	b.n	800983e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800976c:	2b00      	cmp	r3, #0
 800976e:	da11      	bge.n	8009794 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	f003 020f 	and.w	r2, r3, #15
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	3324      	adds	r3, #36	@ 0x24
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d117      	bne.n	80097ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fbb0 	bl	8009ef2 <USBD_CtlError>
                  break;
 8009792:	e054      	b.n	800983e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	f003 020f 	and.w	r2, r3, #15
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	440b      	add	r3, r1
 80097a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fb9d 	bl	8009ef2 <USBD_CtlError>
                  break;
 80097b8:	e041      	b.n	800983e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	da0b      	bge.n	80097da <USBD_StdEPReq+0x2b2>
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	3310      	adds	r3, #16
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	4413      	add	r3, r2
 80097d6:	3304      	adds	r3, #4
 80097d8:	e00b      	b.n	80097f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <USBD_StdEPReq+0x2d8>
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	2b80      	cmp	r3, #128	@ 0x80
 80097fe:	d103      	bne.n	8009808 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	e00e      	b.n	8009826 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 f89b 	bl	800a948 <USBD_LL_IsStallEP>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2201      	movs	r2, #1
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	e002      	b.n	8009826 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2202      	movs	r2, #2
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fbd1 	bl	8009fd4 <USBD_CtlSendData>
              break;
 8009832:	e004      	b.n	800983e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fb5b 	bl	8009ef2 <USBD_CtlError>
              break;
 800983c:	bf00      	nop
          }
          break;
 800983e:	e004      	b.n	800984a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fb55 	bl	8009ef2 <USBD_CtlError>
          break;
 8009848:	bf00      	nop
      }
      break;
 800984a:	e005      	b.n	8009858 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fb4f 	bl	8009ef2 <USBD_CtlError>
      break;
 8009854:	e000      	b.n	8009858 <USBD_StdEPReq+0x330>
      break;
 8009856:	bf00      	nop
  }

  return ret;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	885b      	ldrh	r3, [r3, #2]
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	b29b      	uxth	r3, r3
 8009882:	3b01      	subs	r3, #1
 8009884:	2b06      	cmp	r3, #6
 8009886:	f200 8128 	bhi.w	8009ada <USBD_GetDescriptor+0x276>
 800988a:	a201      	add	r2, pc, #4	@ (adr r2, 8009890 <USBD_GetDescriptor+0x2c>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098ad 	.word	0x080098ad
 8009894:	080098c5 	.word	0x080098c5
 8009898:	08009905 	.word	0x08009905
 800989c:	08009adb 	.word	0x08009adb
 80098a0:	08009adb 	.word	0x08009adb
 80098a4:	08009a7b 	.word	0x08009a7b
 80098a8:	08009aa7 	.word	0x08009aa7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	7c12      	ldrb	r2, [r2, #16]
 80098b8:	f107 0108 	add.w	r1, r7, #8
 80098bc:	4610      	mov	r0, r2
 80098be:	4798      	blx	r3
 80098c0:	60f8      	str	r0, [r7, #12]
      break;
 80098c2:	e112      	b.n	8009aea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7c1b      	ldrb	r3, [r3, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10d      	bne.n	80098e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d4:	f107 0208 	add.w	r2, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3301      	adds	r3, #1
 80098e2:	2202      	movs	r2, #2
 80098e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098e6:	e100      	b.n	8009aea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	f107 0208 	add.w	r2, r7, #8
 80098f4:	4610      	mov	r0, r2
 80098f6:	4798      	blx	r3
 80098f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3301      	adds	r3, #1
 80098fe:	2202      	movs	r2, #2
 8009900:	701a      	strb	r2, [r3, #0]
      break;
 8009902:	e0f2      	b.n	8009aea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	885b      	ldrh	r3, [r3, #2]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b05      	cmp	r3, #5
 800990c:	f200 80ac 	bhi.w	8009a68 <USBD_GetDescriptor+0x204>
 8009910:	a201      	add	r2, pc, #4	@ (adr r2, 8009918 <USBD_GetDescriptor+0xb4>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	08009931 	.word	0x08009931
 800991c:	08009965 	.word	0x08009965
 8009920:	08009999 	.word	0x08009999
 8009924:	080099cd 	.word	0x080099cd
 8009928:	08009a01 	.word	0x08009a01
 800992c:	08009a35 	.word	0x08009a35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009952:	e091      	b.n	8009a78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 facb 	bl	8009ef2 <USBD_CtlError>
            err++;
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	3301      	adds	r3, #1
 8009960:	72fb      	strb	r3, [r7, #11]
          break;
 8009962:	e089      	b.n	8009a78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00b      	beq.n	8009988 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	7c12      	ldrb	r2, [r2, #16]
 800997c:	f107 0108 	add.w	r1, r7, #8
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
 8009984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009986:	e077      	b.n	8009a78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fab1 	bl	8009ef2 <USBD_CtlError>
            err++;
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	3301      	adds	r3, #1
 8009994:	72fb      	strb	r3, [r7, #11]
          break;
 8009996:	e06f      	b.n	8009a78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7c12      	ldrb	r2, [r2, #16]
 80099b0:	f107 0108 	add.w	r1, r7, #8
 80099b4:	4610      	mov	r0, r2
 80099b6:	4798      	blx	r3
 80099b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ba:	e05d      	b.n	8009a78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa97 	bl	8009ef2 <USBD_CtlError>
            err++;
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	3301      	adds	r3, #1
 80099c8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ca:	e055      	b.n	8009a78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00b      	beq.n	80099f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7c12      	ldrb	r2, [r2, #16]
 80099e4:	f107 0108 	add.w	r1, r7, #8
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ee:	e043      	b.n	8009a78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa7d 	bl	8009ef2 <USBD_CtlError>
            err++;
 80099f8:	7afb      	ldrb	r3, [r7, #11]
 80099fa:	3301      	adds	r3, #1
 80099fc:	72fb      	strb	r3, [r7, #11]
          break;
 80099fe:	e03b      	b.n	8009a78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00b      	beq.n	8009a24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	7c12      	ldrb	r2, [r2, #16]
 8009a18:	f107 0108 	add.w	r1, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a22:	e029      	b.n	8009a78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa63 	bl	8009ef2 <USBD_CtlError>
            err++;
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	72fb      	strb	r3, [r7, #11]
          break;
 8009a32:	e021      	b.n	8009a78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00b      	beq.n	8009a58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	7c12      	ldrb	r2, [r2, #16]
 8009a4c:	f107 0108 	add.w	r1, r7, #8
 8009a50:	4610      	mov	r0, r2
 8009a52:	4798      	blx	r3
 8009a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a56:	e00f      	b.n	8009a78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa49 	bl	8009ef2 <USBD_CtlError>
            err++;
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	3301      	adds	r3, #1
 8009a64:	72fb      	strb	r3, [r7, #11]
          break;
 8009a66:	e007      	b.n	8009a78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa41 	bl	8009ef2 <USBD_CtlError>
          err++;
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	3301      	adds	r3, #1
 8009a74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a76:	bf00      	nop
      }
      break;
 8009a78:	e037      	b.n	8009aea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	7c1b      	ldrb	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8a:	f107 0208 	add.w	r2, r7, #8
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4798      	blx	r3
 8009a92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a94:	e029      	b.n	8009aea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fa2a 	bl	8009ef2 <USBD_CtlError>
        err++;
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	72fb      	strb	r3, [r7, #11]
      break;
 8009aa4:	e021      	b.n	8009aea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7c1b      	ldrb	r3, [r3, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10d      	bne.n	8009aca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab6:	f107 0208 	add.w	r2, r7, #8
 8009aba:	4610      	mov	r0, r2
 8009abc:	4798      	blx	r3
 8009abe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	2207      	movs	r2, #7
 8009ac6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ac8:	e00f      	b.n	8009aea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa10 	bl	8009ef2 <USBD_CtlError>
        err++;
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad8:	e007      	b.n	8009aea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fa08 	bl	8009ef2 <USBD_CtlError>
      err++;
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ae8:	bf00      	nop
  }

  if (err != 0U)
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d11e      	bne.n	8009b2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	88db      	ldrh	r3, [r3, #6]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d016      	beq.n	8009b26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009af8:	893b      	ldrh	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00e      	beq.n	8009b1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	88da      	ldrh	r2, [r3, #6]
 8009b02:	893b      	ldrh	r3, [r7, #8]
 8009b04:	4293      	cmp	r3, r2
 8009b06:	bf28      	it	cs
 8009b08:	4613      	movcs	r3, r2
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b0e:	893b      	ldrh	r3, [r7, #8]
 8009b10:	461a      	mov	r2, r3
 8009b12:	68f9      	ldr	r1, [r7, #12]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fa5d 	bl	8009fd4 <USBD_CtlSendData>
 8009b1a:	e009      	b.n	8009b30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f9e7 	bl	8009ef2 <USBD_CtlError>
 8009b24:	e004      	b.n	8009b30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 faae 	bl	800a088 <USBD_CtlSendStatus>
 8009b2c:	e000      	b.n	8009b30 <USBD_GetDescriptor+0x2cc>
    return;
 8009b2e:	bf00      	nop
  }
}
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop

08009b38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	889b      	ldrh	r3, [r3, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d131      	bne.n	8009bae <USBD_SetAddress+0x76>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	88db      	ldrh	r3, [r3, #6]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d12d      	bne.n	8009bae <USBD_SetAddress+0x76>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	885b      	ldrh	r3, [r3, #2]
 8009b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b58:	d829      	bhi.n	8009bae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	885b      	ldrh	r3, [r3, #2]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d104      	bne.n	8009b7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f9bc 	bl	8009ef2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7a:	e01d      	b.n	8009bb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7bfa      	ldrb	r2, [r7, #15]
 8009b80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 ff09 	bl	800a9a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa7a 	bl	800a088 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d004      	beq.n	8009ba4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba2:	e009      	b.n	8009bb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bac:	e004      	b.n	8009bb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f99e 	bl	8009ef2 <USBD_CtlError>
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	885b      	ldrh	r3, [r3, #2]
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	4b4e      	ldr	r3, [pc, #312]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009bd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d905      	bls.n	8009bec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f985 	bl	8009ef2 <USBD_CtlError>
    return USBD_FAIL;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e08c      	b.n	8009d06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d002      	beq.n	8009bfe <USBD_SetConfig+0x3e>
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d029      	beq.n	8009c50 <USBD_SetConfig+0x90>
 8009bfc:	e075      	b.n	8009cea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bfe:	4b44      	ldr	r3, [pc, #272]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d020      	beq.n	8009c48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c06:	4b42      	ldr	r3, [pc, #264]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c10:	4b3f      	ldr	r3, [pc, #252]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7fe ffe3 	bl	8008be2 <USBD_SetClassConfig>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d008      	beq.n	8009c38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f962 	bl	8009ef2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2202      	movs	r2, #2
 8009c32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c36:	e065      	b.n	8009d04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fa25 	bl	800a088 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2203      	movs	r2, #3
 8009c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009c46:	e05d      	b.n	8009d04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fa1d 	bl	800a088 <USBD_CtlSendStatus>
      break;
 8009c4e:	e059      	b.n	8009d04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c50:	4b2f      	ldr	r3, [pc, #188]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d112      	bne.n	8009c7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009c60:	4b2b      	ldr	r3, [pc, #172]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c6a:	4b29      	ldr	r3, [pc, #164]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7fe ffd2 	bl	8008c1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa06 	bl	800a088 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c7c:	e042      	b.n	8009d04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c7e:	4b24      	ldr	r3, [pc, #144]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d02a      	beq.n	8009ce2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7fe ffc0 	bl	8008c1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7fe ff99 	bl	8008be2 <USBD_SetClassConfig>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00f      	beq.n	8009cda <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f918 	bl	8009ef2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7fe ffa5 	bl	8008c1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009cd8:	e014      	b.n	8009d04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f9d4 	bl	800a088 <USBD_CtlSendStatus>
      break;
 8009ce0:	e010      	b.n	8009d04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f9d0 	bl	800a088 <USBD_CtlSendStatus>
      break;
 8009ce8:	e00c      	b.n	8009d04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f900 	bl	8009ef2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cf2:	4b07      	ldr	r3, [pc, #28]	@ (8009d10 <USBD_SetConfig+0x150>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7fe ff8e 	bl	8008c1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	73fb      	strb	r3, [r7, #15]
      break;
 8009d02:	bf00      	nop
  }

  return ret;
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20001758 	.word	0x20001758

08009d14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	88db      	ldrh	r3, [r3, #6]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d004      	beq.n	8009d30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f8e2 	bl	8009ef2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d2e:	e023      	b.n	8009d78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	dc02      	bgt.n	8009d42 <USBD_GetConfig+0x2e>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dc03      	bgt.n	8009d48 <USBD_GetConfig+0x34>
 8009d40:	e015      	b.n	8009d6e <USBD_GetConfig+0x5a>
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d00b      	beq.n	8009d5e <USBD_GetConfig+0x4a>
 8009d46:	e012      	b.n	8009d6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3308      	adds	r3, #8
 8009d52:	2201      	movs	r2, #1
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f93c 	bl	8009fd4 <USBD_CtlSendData>
        break;
 8009d5c:	e00c      	b.n	8009d78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3304      	adds	r3, #4
 8009d62:	2201      	movs	r2, #1
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f934 	bl	8009fd4 <USBD_CtlSendData>
        break;
 8009d6c:	e004      	b.n	8009d78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f8be 	bl	8009ef2 <USBD_CtlError>
        break;
 8009d76:	bf00      	nop
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d81e      	bhi.n	8009dd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	88db      	ldrh	r3, [r3, #6]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d004      	beq.n	8009daa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f8a5 	bl	8009ef2 <USBD_CtlError>
        break;
 8009da8:	e01a      	b.n	8009de0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f043 0202 	orr.w	r2, r3, #2
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	330c      	adds	r3, #12
 8009dca:	2202      	movs	r2, #2
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f900 	bl	8009fd4 <USBD_CtlSendData>
      break;
 8009dd4:	e004      	b.n	8009de0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f88a 	bl	8009ef2 <USBD_CtlError>
      break;
 8009dde:	bf00      	nop
  }
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	885b      	ldrh	r3, [r3, #2]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d107      	bne.n	8009e0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f940 	bl	800a088 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e08:	e013      	b.n	8009e32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	885b      	ldrh	r3, [r3, #2]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d10b      	bne.n	8009e2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	889b      	ldrh	r3, [r3, #4]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f930 	bl	800a088 <USBD_CtlSendStatus>
}
 8009e28:	e003      	b.n	8009e32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f860 	bl	8009ef2 <USBD_CtlError>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d80b      	bhi.n	8009e6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	885b      	ldrh	r3, [r3, #2]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d10c      	bne.n	8009e74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f910 	bl	800a088 <USBD_CtlSendStatus>
      }
      break;
 8009e68:	e004      	b.n	8009e74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f840 	bl	8009ef2 <USBD_CtlError>
      break;
 8009e72:	e000      	b.n	8009e76 <USBD_ClrFeature+0x3c>
      break;
 8009e74:	bf00      	nop
  }
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	781a      	ldrb	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3301      	adds	r3, #1
 8009e98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	781a      	ldrb	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7ff fa40 	bl	800932e <SWAPBYTE>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7ff fa33 	bl	800932e <SWAPBYTE>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	461a      	mov	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f7ff fa26 	bl	800932e <SWAPBYTE>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	80da      	strh	r2, [r3, #6]
}
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009efc:	2180      	movs	r1, #128	@ 0x80
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fce4 	bl	800a8cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f04:	2100      	movs	r1, #0
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fce0 	bl	800a8cc <USBD_LL_StallEP>
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d036      	beq.n	8009f98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f2e:	6938      	ldr	r0, [r7, #16]
 8009f30:	f000 f836 	bl	8009fa0 <USBD_GetLen>
 8009f34:	4603      	mov	r3, r0
 8009f36:	3301      	adds	r3, #1
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	4413      	add	r3, r2
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7812      	ldrb	r2, [r2, #0]
 8009f4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	3301      	adds	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	4413      	add	r3, r2
 8009f5a:	2203      	movs	r2, #3
 8009f5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	3301      	adds	r3, #1
 8009f62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f64:	e013      	b.n	8009f8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	7812      	ldrb	r2, [r2, #0]
 8009f70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	3301      	adds	r3, #1
 8009f76:	613b      	str	r3, [r7, #16]
    idx++;
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	4413      	add	r3, r2
 8009f84:	2200      	movs	r2, #0
 8009f86:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e7      	bne.n	8009f66 <USBD_GetString+0x52>
 8009f96:	e000      	b.n	8009f9a <USBD_GetString+0x86>
    return;
 8009f98:	bf00      	nop
  }
}
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fb0:	e005      	b.n	8009fbe <USBD_GetLen+0x1e>
  {
    len++;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1f5      	bne.n	8009fb2 <USBD_GetLen+0x12>
  }

  return len;
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fcef 	bl	800a9de <USBD_LL_Transmit>

  return USBD_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	2100      	movs	r1, #0
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fcde 	bl	800a9de <USBD_LL_Transmit>

  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2203      	movs	r2, #3
 800a03c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	2100      	movs	r1, #0
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fce2 	bl	800aa20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	2100      	movs	r1, #0
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 fcd1 	bl	800aa20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2204      	movs	r2, #4
 800a094:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a098:	2300      	movs	r3, #0
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fc9d 	bl	800a9de <USBD_LL_Transmit>

  return USBD_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2205      	movs	r2, #5
 800a0ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0be:	2300      	movs	r3, #0
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fcab 	bl	800aa20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4912      	ldr	r1, [pc, #72]	@ (800a124 <MX_USB_DEVICE_Init+0x50>)
 800a0dc:	4812      	ldr	r0, [pc, #72]	@ (800a128 <MX_USB_DEVICE_Init+0x54>)
 800a0de:	f7fe fd03 	bl	8008ae8 <USBD_Init>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0e8:	f7f7 fe62 	bl	8001db0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0ec:	490f      	ldr	r1, [pc, #60]	@ (800a12c <MX_USB_DEVICE_Init+0x58>)
 800a0ee:	480e      	ldr	r0, [pc, #56]	@ (800a128 <MX_USB_DEVICE_Init+0x54>)
 800a0f0:	f7fe fd2a 	bl	8008b48 <USBD_RegisterClass>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0fa:	f7f7 fe59 	bl	8001db0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0fe:	490c      	ldr	r1, [pc, #48]	@ (800a130 <MX_USB_DEVICE_Init+0x5c>)
 800a100:	4809      	ldr	r0, [pc, #36]	@ (800a128 <MX_USB_DEVICE_Init+0x54>)
 800a102:	f7fe fc21 	bl	8008948 <USBD_CDC_RegisterInterface>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a10c:	f7f7 fe50 	bl	8001db0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a110:	4805      	ldr	r0, [pc, #20]	@ (800a128 <MX_USB_DEVICE_Init+0x54>)
 800a112:	f7fe fd4f 	bl	8008bb4 <USBD_Start>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a11c:	f7f7 fe48 	bl	8001db0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a120:	bf00      	nop
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000120 	.word	0x20000120
 800a128:	2000175c 	.word	0x2000175c
 800a12c:	2000008c 	.word	0x2000008c
 800a130:	2000010c 	.word	0x2000010c

0800a134 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a138:	2200      	movs	r2, #0
 800a13a:	4905      	ldr	r1, [pc, #20]	@ (800a150 <CDC_Init_FS+0x1c>)
 800a13c:	4805      	ldr	r0, [pc, #20]	@ (800a154 <CDC_Init_FS+0x20>)
 800a13e:	f7fe fc1d 	bl	800897c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a142:	4905      	ldr	r1, [pc, #20]	@ (800a158 <CDC_Init_FS+0x24>)
 800a144:	4803      	ldr	r0, [pc, #12]	@ (800a154 <CDC_Init_FS+0x20>)
 800a146:	f7fe fc3b 	bl	80089c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a14a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20002238 	.word	0x20002238
 800a154:	2000175c 	.word	0x2000175c
 800a158:	20001a38 	.word	0x20001a38

0800a15c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a160:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a162:	4618      	mov	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	6039      	str	r1, [r7, #0]
 800a176:	71fb      	strb	r3, [r7, #7]
 800a178:	4613      	mov	r3, r2
 800a17a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a17c:	79fb      	ldrb	r3, [r7, #7]
 800a17e:	2b23      	cmp	r3, #35	@ 0x23
 800a180:	d84a      	bhi.n	800a218 <CDC_Control_FS+0xac>
 800a182:	a201      	add	r2, pc, #4	@ (adr r2, 800a188 <CDC_Control_FS+0x1c>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a219 	.word	0x0800a219
 800a18c:	0800a219 	.word	0x0800a219
 800a190:	0800a219 	.word	0x0800a219
 800a194:	0800a219 	.word	0x0800a219
 800a198:	0800a219 	.word	0x0800a219
 800a19c:	0800a219 	.word	0x0800a219
 800a1a0:	0800a219 	.word	0x0800a219
 800a1a4:	0800a219 	.word	0x0800a219
 800a1a8:	0800a219 	.word	0x0800a219
 800a1ac:	0800a219 	.word	0x0800a219
 800a1b0:	0800a219 	.word	0x0800a219
 800a1b4:	0800a219 	.word	0x0800a219
 800a1b8:	0800a219 	.word	0x0800a219
 800a1bc:	0800a219 	.word	0x0800a219
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a219 	.word	0x0800a219
 800a1c8:	0800a219 	.word	0x0800a219
 800a1cc:	0800a219 	.word	0x0800a219
 800a1d0:	0800a219 	.word	0x0800a219
 800a1d4:	0800a219 	.word	0x0800a219
 800a1d8:	0800a219 	.word	0x0800a219
 800a1dc:	0800a219 	.word	0x0800a219
 800a1e0:	0800a219 	.word	0x0800a219
 800a1e4:	0800a219 	.word	0x0800a219
 800a1e8:	0800a219 	.word	0x0800a219
 800a1ec:	0800a219 	.word	0x0800a219
 800a1f0:	0800a219 	.word	0x0800a219
 800a1f4:	0800a219 	.word	0x0800a219
 800a1f8:	0800a219 	.word	0x0800a219
 800a1fc:	0800a219 	.word	0x0800a219
 800a200:	0800a219 	.word	0x0800a219
 800a204:	0800a219 	.word	0x0800a219
 800a208:	0800a219 	.word	0x0800a219
 800a20c:	0800a219 	.word	0x0800a219
 800a210:	0800a219 	.word	0x0800a219
 800a214:	0800a219 	.word	0x0800a219
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a218:	bf00      	nop
  }

  return (USBD_OK);
 800a21a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	4805      	ldr	r0, [pc, #20]	@ (800a24c <CDC_Receive_FS+0x24>)
 800a236:	f7fe fbc3 	bl	80089c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a23a:	4804      	ldr	r0, [pc, #16]	@ (800a24c <CDC_Receive_FS+0x24>)
 800a23c:	f7fe fc1e 	bl	8008a7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a240:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	2000175c 	.word	0x2000175c

0800a250 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a260:	4b0d      	ldr	r3, [pc, #52]	@ (800a298 <CDC_Transmit_FS+0x48>)
 800a262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a266:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a272:	2301      	movs	r3, #1
 800a274:	e00b      	b.n	800a28e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a276:	887b      	ldrh	r3, [r7, #2]
 800a278:	461a      	mov	r2, r3
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4806      	ldr	r0, [pc, #24]	@ (800a298 <CDC_Transmit_FS+0x48>)
 800a27e:	f7fe fb7d 	bl	800897c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a282:	4805      	ldr	r0, [pc, #20]	@ (800a298 <CDC_Transmit_FS+0x48>)
 800a284:	f7fe fbba 	bl	80089fc <USBD_CDC_TransmitPacket>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	2000175c 	.word	0x2000175c

0800a29c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a2ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
	...

0800a2c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2212      	movs	r2, #18
 800a2d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2d2:	4b03      	ldr	r3, [pc, #12]	@ (800a2e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	2000013c 	.word	0x2000013c

0800a2e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2204      	movs	r2, #4
 800a2f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2f6:	4b03      	ldr	r3, [pc, #12]	@ (800a304 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	20000150 	.word	0x20000150

0800a308 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	6039      	str	r1, [r7, #0]
 800a312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4907      	ldr	r1, [pc, #28]	@ (800a33c <USBD_FS_ProductStrDescriptor+0x34>)
 800a31e:	4808      	ldr	r0, [pc, #32]	@ (800a340 <USBD_FS_ProductStrDescriptor+0x38>)
 800a320:	f7ff fdf8 	bl	8009f14 <USBD_GetString>
 800a324:	e004      	b.n	800a330 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	4904      	ldr	r1, [pc, #16]	@ (800a33c <USBD_FS_ProductStrDescriptor+0x34>)
 800a32a:	4805      	ldr	r0, [pc, #20]	@ (800a340 <USBD_FS_ProductStrDescriptor+0x38>)
 800a32c:	f7ff fdf2 	bl	8009f14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a330:	4b02      	ldr	r3, [pc, #8]	@ (800a33c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20002a38 	.word	0x20002a38
 800a340:	08010294 	.word	0x08010294

0800a344 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	4904      	ldr	r1, [pc, #16]	@ (800a364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a354:	4804      	ldr	r0, [pc, #16]	@ (800a368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a356:	f7ff fddd 	bl	8009f14 <USBD_GetString>
  return USBD_StrDesc;
 800a35a:	4b02      	ldr	r3, [pc, #8]	@ (800a364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20002a38 	.word	0x20002a38
 800a368:	080102ac 	.word	0x080102ac

0800a36c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	221a      	movs	r2, #26
 800a37c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a37e:	f000 f843 	bl	800a408 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a382:	4b02      	ldr	r3, [pc, #8]	@ (800a38c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000154 	.word	0x20000154

0800a390 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d105      	bne.n	800a3ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	4907      	ldr	r1, [pc, #28]	@ (800a3c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3a6:	4808      	ldr	r0, [pc, #32]	@ (800a3c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3a8:	f7ff fdb4 	bl	8009f14 <USBD_GetString>
 800a3ac:	e004      	b.n	800a3b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	4904      	ldr	r1, [pc, #16]	@ (800a3c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3b2:	4805      	ldr	r0, [pc, #20]	@ (800a3c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3b4:	f7ff fdae 	bl	8009f14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b8:	4b02      	ldr	r3, [pc, #8]	@ (800a3c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20002a38 	.word	0x20002a38
 800a3c8:	080102c0 	.word	0x080102c0

0800a3cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	6039      	str	r1, [r7, #0]
 800a3d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d105      	bne.n	800a3ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	4907      	ldr	r1, [pc, #28]	@ (800a400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3e2:	4808      	ldr	r0, [pc, #32]	@ (800a404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3e4:	f7ff fd96 	bl	8009f14 <USBD_GetString>
 800a3e8:	e004      	b.n	800a3f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	4904      	ldr	r1, [pc, #16]	@ (800a400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3ee:	4805      	ldr	r0, [pc, #20]	@ (800a404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3f0:	f7ff fd90 	bl	8009f14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3f4:	4b02      	ldr	r3, [pc, #8]	@ (800a400 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20002a38 	.word	0x20002a38
 800a404:	080102cc 	.word	0x080102cc

0800a408 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a40e:	4b0f      	ldr	r3, [pc, #60]	@ (800a44c <Get_SerialNum+0x44>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a414:	4b0e      	ldr	r3, [pc, #56]	@ (800a450 <Get_SerialNum+0x48>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a41a:	4b0e      	ldr	r3, [pc, #56]	@ (800a454 <Get_SerialNum+0x4c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4413      	add	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a42e:	2208      	movs	r2, #8
 800a430:	4909      	ldr	r1, [pc, #36]	@ (800a458 <Get_SerialNum+0x50>)
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f000 f814 	bl	800a460 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a438:	2204      	movs	r2, #4
 800a43a:	4908      	ldr	r1, [pc, #32]	@ (800a45c <Get_SerialNum+0x54>)
 800a43c:	68b8      	ldr	r0, [r7, #8]
 800a43e:	f000 f80f 	bl	800a460 <IntToUnicode>
  }
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	1fff7a10 	.word	0x1fff7a10
 800a450:	1fff7a14 	.word	0x1fff7a14
 800a454:	1fff7a18 	.word	0x1fff7a18
 800a458:	20000156 	.word	0x20000156
 800a45c:	20000166 	.word	0x20000166

0800a460 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	4613      	mov	r3, r2
 800a46c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a472:	2300      	movs	r3, #0
 800a474:	75fb      	strb	r3, [r7, #23]
 800a476:	e027      	b.n	800a4c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	0f1b      	lsrs	r3, r3, #28
 800a47c:	2b09      	cmp	r3, #9
 800a47e:	d80b      	bhi.n	800a498 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	0f1b      	lsrs	r3, r3, #28
 800a484:	b2da      	uxtb	r2, r3
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	4619      	mov	r1, r3
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	440b      	add	r3, r1
 800a490:	3230      	adds	r2, #48	@ 0x30
 800a492:	b2d2      	uxtb	r2, r2
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	e00a      	b.n	800a4ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	0f1b      	lsrs	r3, r3, #28
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	440b      	add	r3, r1
 800a4a8:	3237      	adds	r2, #55	@ 0x37
 800a4aa:	b2d2      	uxtb	r2, r2
 800a4ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	4413      	add	r3, r2
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	75fb      	strb	r3, [r7, #23]
 800a4c8:	7dfa      	ldrb	r2, [r7, #23]
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d3d3      	bcc.n	800a478 <IntToUnicode+0x18>
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	@ 0x28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	609a      	str	r2, [r3, #8]
 800a4f4:	60da      	str	r2, [r3, #12]
 800a4f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a500:	d147      	bne.n	800a592 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a502:	2300      	movs	r3, #0
 800a504:	613b      	str	r3, [r7, #16]
 800a506:	4b25      	ldr	r3, [pc, #148]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50a:	4a24      	ldr	r2, [pc, #144]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a50c:	f043 0301 	orr.w	r3, r3, #1
 800a510:	6313      	str	r3, [r2, #48]	@ 0x30
 800a512:	4b22      	ldr	r3, [pc, #136]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a51e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a524:	2300      	movs	r3, #0
 800a526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a528:	2300      	movs	r3, #0
 800a52a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a52c:	f107 0314 	add.w	r3, r7, #20
 800a530:	4619      	mov	r1, r3
 800a532:	481b      	ldr	r0, [pc, #108]	@ (800a5a0 <HAL_PCD_MspInit+0xc0>)
 800a534:	f7f8 fa92 	bl	8002a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a538:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a53c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a53e:	2302      	movs	r3, #2
 800a540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a542:	2300      	movs	r3, #0
 800a544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a546:	2303      	movs	r3, #3
 800a548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a54a:	230a      	movs	r3, #10
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a54e:	f107 0314 	add.w	r3, r7, #20
 800a552:	4619      	mov	r1, r3
 800a554:	4812      	ldr	r0, [pc, #72]	@ (800a5a0 <HAL_PCD_MspInit+0xc0>)
 800a556:	f7f8 fa81 	bl	8002a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a55a:	4b10      	ldr	r3, [pc, #64]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a55c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a55e:	4a0f      	ldr	r2, [pc, #60]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a564:	6353      	str	r3, [r2, #52]	@ 0x34
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	4b0c      	ldr	r3, [pc, #48]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56e:	4a0b      	ldr	r2, [pc, #44]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a574:	6453      	str	r3, [r2, #68]	@ 0x44
 800a576:	4b09      	ldr	r3, [pc, #36]	@ (800a59c <HAL_PCD_MspInit+0xbc>)
 800a578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a57a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a582:	2200      	movs	r2, #0
 800a584:	2100      	movs	r1, #0
 800a586:	2043      	movs	r0, #67	@ 0x43
 800a588:	f7f8 fa31 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a58c:	2043      	movs	r0, #67	@ 0x43
 800a58e:	f7f8 fa4a 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a592:	bf00      	nop
 800a594:	3728      	adds	r7, #40	@ 0x28
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	40023800 	.word	0x40023800
 800a5a0:	40020000 	.word	0x40020000

0800a5a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	f7fe fb47 	bl	8008c4e <USBD_LL_SetupStage>
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	440b      	add	r3, r1
 800a5e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f7fe fb81 	bl	8008cf8 <USBD_LL_DataOutStage>
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a610:	78fa      	ldrb	r2, [r7, #3]
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	4613      	mov	r3, r2
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	440b      	add	r3, r1
 800a61e:	3320      	adds	r3, #32
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	4619      	mov	r1, r3
 800a626:	f7fe fc1a 	bl	8008e5e <USBD_LL_DataInStage>
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fd54 	bl	80090ee <USBD_LL_SOF>
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a656:	2301      	movs	r3, #1
 800a658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	79db      	ldrb	r3, [r3, #7]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d001      	beq.n	800a666 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a662:	f7f7 fba5 	bl	8001db0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a66c:	7bfa      	ldrb	r2, [r7, #15]
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe fcf8 	bl	8009066 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe fca0 	bl	8008fc2 <USBD_LL_Reset>
}
 800a682:	bf00      	nop
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe fcf3 	bl	8009086 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a6b2:	f043 0301 	orr.w	r3, r3, #1
 800a6b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	7adb      	ldrb	r3, [r3, #11]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d005      	beq.n	800a6cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6c0:	4b04      	ldr	r3, [pc, #16]	@ (800a6d4 <HAL_PCD_SuspendCallback+0x48>)
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	4a03      	ldr	r2, [pc, #12]	@ (800a6d4 <HAL_PCD_SuspendCallback+0x48>)
 800a6c6:	f043 0306 	orr.w	r3, r3, #6
 800a6ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	e000ed00 	.word	0xe000ed00

0800a6d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fce9 	bl	80090be <USBD_LL_Resume>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a706:	78fa      	ldrb	r2, [r7, #3]
 800a708:	4611      	mov	r1, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fd41 	bl	8009192 <USBD_LL_IsoOUTIncomplete>
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a72a:	78fa      	ldrb	r2, [r7, #3]
 800a72c:	4611      	mov	r1, r2
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe fcfd 	bl	800912e <USBD_LL_IsoINIncomplete>
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fd53 	bl	80091f6 <USBD_LL_DevConnected>
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fd50 	bl	800920c <USBD_LL_DevDisconnected>
}
 800a76c:	bf00      	nop
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d13c      	bne.n	800a7fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a784:	4a20      	ldr	r2, [pc, #128]	@ (800a808 <USBD_LL_Init+0x94>)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a1e      	ldr	r2, [pc, #120]	@ (800a808 <USBD_LL_Init+0x94>)
 800a790:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a794:	4b1c      	ldr	r3, [pc, #112]	@ (800a808 <USBD_LL_Init+0x94>)
 800a796:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a79a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a79c:	4b1a      	ldr	r3, [pc, #104]	@ (800a808 <USBD_LL_Init+0x94>)
 800a79e:	2204      	movs	r2, #4
 800a7a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a7a2:	4b19      	ldr	r3, [pc, #100]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7a4:	2202      	movs	r2, #2
 800a7a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7a8:	4b17      	ldr	r3, [pc, #92]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a7ae:	4b16      	ldr	r3, [pc, #88]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a7b4:	4b14      	ldr	r3, [pc, #80]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a7ba:	4b13      	ldr	r3, [pc, #76]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a7c0:	4b11      	ldr	r3, [pc, #68]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a7c6:	4b10      	ldr	r3, [pc, #64]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7d2:	480d      	ldr	r0, [pc, #52]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7d4:	f7fa f8c6 	bl	8004964 <HAL_PCD_Init>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a7de:	f7f7 fae7 	bl	8001db0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a7e2:	2180      	movs	r1, #128	@ 0x80
 800a7e4:	4808      	ldr	r0, [pc, #32]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7e6:	f7fb faf0 	bl	8005dca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a7ea:	2240      	movs	r2, #64	@ 0x40
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	4806      	ldr	r0, [pc, #24]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7f0:	f7fb faa4 	bl	8005d3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a7f4:	2280      	movs	r2, #128	@ 0x80
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4803      	ldr	r0, [pc, #12]	@ (800a808 <USBD_LL_Init+0x94>)
 800a7fa:	f7fb fa9f 	bl	8005d3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20002c38 	.word	0x20002c38

0800a80c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a822:	4618      	mov	r0, r3
 800a824:	f7fa f9ad 	bl	8004b82 <HAL_PCD_Start>
 800a828:	4603      	mov	r3, r0
 800a82a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 f942 	bl	800aab8 <USBD_Get_USB_Status>
 800a834:	4603      	mov	r3, r0
 800a836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a838:	7bbb      	ldrb	r3, [r7, #14]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	4608      	mov	r0, r1
 800a84c:	4611      	mov	r1, r2
 800a84e:	461a      	mov	r2, r3
 800a850:	4603      	mov	r3, r0
 800a852:	70fb      	strb	r3, [r7, #3]
 800a854:	460b      	mov	r3, r1
 800a856:	70bb      	strb	r3, [r7, #2]
 800a858:	4613      	mov	r3, r2
 800a85a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a86a:	78bb      	ldrb	r3, [r7, #2]
 800a86c:	883a      	ldrh	r2, [r7, #0]
 800a86e:	78f9      	ldrb	r1, [r7, #3]
 800a870:	f7fa fe81 	bl	8005576 <HAL_PCD_EP_Open>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f91c 	bl	800aab8 <USBD_Get_USB_Status>
 800a880:	4603      	mov	r3, r0
 800a882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a884:	7bbb      	ldrb	r3, [r7, #14]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	460b      	mov	r3, r1
 800a898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8a8:	78fa      	ldrb	r2, [r7, #3]
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fa feca 	bl	8005646 <HAL_PCD_EP_Close>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 f8fd 	bl	800aab8 <USBD_Get_USB_Status>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fa ff82 	bl	80057f4 <HAL_PCD_EP_SetStall>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f8de 	bl	800aab8 <USBD_Get_USB_Status>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a900:	7bbb      	ldrb	r3, [r7, #14]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	460b      	mov	r3, r1
 800a914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fa ffc6 	bl	80058ba <HAL_PCD_EP_ClrStall>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 f8bf 	bl	800aab8 <USBD_Get_USB_Status>
 800a93a:	4603      	mov	r3, r0
 800a93c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a95a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a95c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a960:	2b00      	cmp	r3, #0
 800a962:	da0b      	bge.n	800a97c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a96a:	68f9      	ldr	r1, [r7, #12]
 800a96c:	4613      	mov	r3, r2
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	4413      	add	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	440b      	add	r3, r1
 800a976:	3316      	adds	r3, #22
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	e00b      	b.n	800a994 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a982:	68f9      	ldr	r1, [r7, #12]
 800a984:	4613      	mov	r3, r2
 800a986:	00db      	lsls	r3, r3, #3
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	440b      	add	r3, r1
 800a98e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a992:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9ba:	78fa      	ldrb	r2, [r7, #3]
 800a9bc:	4611      	mov	r1, r2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fa fdb5 	bl	800552e <HAL_PCD_SetAddress>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 f874 	bl	800aab8 <USBD_Get_USB_Status>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b086      	sub	sp, #24
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a9fc:	7af9      	ldrb	r1, [r7, #11]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	f7fa febd 	bl	8005780 <HAL_PCD_EP_Transmit>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f853 	bl	800aab8 <USBD_Get_USB_Status>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa16:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	607a      	str	r2, [r7, #4]
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa3e:	7af9      	ldrb	r1, [r7, #11]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	f7fa fe49 	bl	80056da <HAL_PCD_EP_Receive>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 f832 	bl	800aab8 <USBD_Get_USB_Status>
 800aa54:	4603      	mov	r3, r0
 800aa56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa58:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa74:	78fa      	ldrb	r2, [r7, #3]
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fa fe69 	bl	8005750 <HAL_PCD_EP_GetRxCount>
 800aa7e:	4603      	mov	r3, r0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa90:	4b03      	ldr	r3, [pc, #12]	@ (800aaa0 <USBD_static_malloc+0x18>)
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	2000311c 	.word	0x2000311c

0800aaa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]

}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d817      	bhi.n	800aafc <USBD_Get_USB_Status+0x44>
 800aacc:	a201      	add	r2, pc, #4	@ (adr r2, 800aad4 <USBD_Get_USB_Status+0x1c>)
 800aace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad2:	bf00      	nop
 800aad4:	0800aae5 	.word	0x0800aae5
 800aad8:	0800aaeb 	.word	0x0800aaeb
 800aadc:	0800aaf1 	.word	0x0800aaf1
 800aae0:	0800aaf7 	.word	0x0800aaf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
    break;
 800aae8:	e00b      	b.n	800ab02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aaea:	2303      	movs	r3, #3
 800aaec:	73fb      	strb	r3, [r7, #15]
    break;
 800aaee:	e008      	b.n	800ab02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf4:	e005      	b.n	800ab02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	73fb      	strb	r3, [r7, #15]
    break;
 800aafa:	e002      	b.n	800ab02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	73fb      	strb	r3, [r7, #15]
    break;
 800ab00:	bf00      	nop
  }
  return usb_status;
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <accelerometer_motion_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool accelerometer_motion_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_accelerometer_motion_activations_map, 1, params)) {
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	4830      	ldr	r0, [pc, #192]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab20:	f000 faf2 	bl	800b108 <ai_platform_get_activations_map>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d04f      	beq.n	800abca <accelerometer_motion_configure_activations+0xba>
    /* Updating activations (byte) offsets */
    
    serving_default_conv1d_input0_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 0);
 800ab2a:	4b2d      	ldr	r3, [pc, #180]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a2d      	ldr	r2, [pc, #180]	@ (800abe4 <accelerometer_motion_configure_activations+0xd4>)
 800ab30:	6093      	str	r3, [r2, #8]
    serving_default_conv1d_input0_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 0);
 800ab32:	4b2b      	ldr	r3, [pc, #172]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a2b      	ldr	r2, [pc, #172]	@ (800abe4 <accelerometer_motion_configure_activations+0xd4>)
 800ab38:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 120);
 800ab3a:	4b29      	ldr	r3, [pc, #164]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3378      	adds	r3, #120	@ 0x78
 800ab40:	4a29      	ldr	r2, [pc, #164]	@ (800abe8 <accelerometer_motion_configure_activations+0xd8>)
 800ab42:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 120);
 800ab44:	4b26      	ldr	r3, [pc, #152]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3378      	adds	r3, #120	@ 0x78
 800ab4a:	4a27      	ldr	r2, [pc, #156]	@ (800abe8 <accelerometer_motion_configure_activations+0xd8>)
 800ab4c:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 120);
 800ab4e:	4b24      	ldr	r3, [pc, #144]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3378      	adds	r3, #120	@ 0x78
 800ab54:	4a25      	ldr	r2, [pc, #148]	@ (800abec <accelerometer_motion_configure_activations+0xdc>)
 800ab56:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 120);
 800ab58:	4b21      	ldr	r3, [pc, #132]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3378      	adds	r3, #120	@ 0x78
 800ab5e:	4a23      	ldr	r2, [pc, #140]	@ (800abec <accelerometer_motion_configure_activations+0xdc>)
 800ab60:	60d3      	str	r3, [r2, #12]
    pool_4_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 120);
 800ab62:	4b1f      	ldr	r3, [pc, #124]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3378      	adds	r3, #120	@ 0x78
 800ab68:	4a21      	ldr	r2, [pc, #132]	@ (800abf0 <accelerometer_motion_configure_activations+0xe0>)
 800ab6a:	6093      	str	r3, [r2, #8]
    pool_4_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 120);
 800ab6c:	4b1c      	ldr	r3, [pc, #112]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3378      	adds	r3, #120	@ 0x78
 800ab72:	4a1f      	ldr	r2, [pc, #124]	@ (800abf0 <accelerometer_motion_configure_activations+0xe0>)
 800ab74:	60d3      	str	r3, [r2, #12]
    gemm_6_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 1144);
 800ab76:	4b1a      	ldr	r3, [pc, #104]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800ab7e:	4a1d      	ldr	r2, [pc, #116]	@ (800abf4 <accelerometer_motion_configure_activations+0xe4>)
 800ab80:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 1144);
 800ab82:	4b17      	ldr	r3, [pc, #92]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800ab8a:	4a1a      	ldr	r2, [pc, #104]	@ (800abf4 <accelerometer_motion_configure_activations+0xe4>)
 800ab8c:	60d3      	str	r3, [r2, #12]
    nl_6_nl_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 0);
 800ab8e:	4b14      	ldr	r3, [pc, #80]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a19      	ldr	r2, [pc, #100]	@ (800abf8 <accelerometer_motion_configure_activations+0xe8>)
 800ab94:	6093      	str	r3, [r2, #8]
    nl_6_nl_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 0);
 800ab96:	4b12      	ldr	r3, [pc, #72]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a17      	ldr	r2, [pc, #92]	@ (800abf8 <accelerometer_motion_configure_activations+0xe8>)
 800ab9c:	60d3      	str	r3, [r2, #12]
    gemm_7_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 400);
 800ab9e:	4b10      	ldr	r3, [pc, #64]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800aba6:	4a15      	ldr	r2, [pc, #84]	@ (800abfc <accelerometer_motion_configure_activations+0xec>)
 800aba8:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 400);
 800abaa:	4b0d      	ldr	r3, [pc, #52]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800abb2:	4a12      	ldr	r2, [pc, #72]	@ (800abfc <accelerometer_motion_configure_activations+0xec>)
 800abb4:	60d3      	str	r3, [r2, #12]
    nl_8_output_array.data = AI_PTR(g_accelerometer_motion_activations_map[0] + 0);
 800abb6:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a11      	ldr	r2, [pc, #68]	@ (800ac00 <accelerometer_motion_configure_activations+0xf0>)
 800abbc:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(g_accelerometer_motion_activations_map[0] + 0);
 800abbe:	4b08      	ldr	r3, [pc, #32]	@ (800abe0 <accelerometer_motion_configure_activations+0xd0>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a0f      	ldr	r2, [pc, #60]	@ (800ac00 <accelerometer_motion_configure_activations+0xf0>)
 800abc4:	60d3      	str	r3, [r2, #12]
    return true;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e005      	b.n	800abd6 <accelerometer_motion_configure_activations+0xc6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800abca:	2213      	movs	r2, #19
 800abcc:	2130      	movs	r1, #48	@ 0x30
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fb1c 	bl	800b20c <ai_platform_network_set_error>
  return false;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	2000333c 	.word	0x2000333c
 800abe4:	20000170 	.word	0x20000170
 800abe8:	20000180 	.word	0x20000180
 800abec:	20000190 	.word	0x20000190
 800abf0:	200001a0 	.word	0x200001a0
 800abf4:	200001b0 	.word	0x200001b0
 800abf8:	200001c0 	.word	0x200001c0
 800abfc:	200001d0 	.word	0x200001d0
 800ac00:	200001e0 	.word	0x200001e0

0800ac04 <accelerometer_motion_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool accelerometer_motion_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_accelerometer_motion_weights_map, 1, params)) {
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	2101      	movs	r1, #1
 800ac12:	4841      	ldr	r0, [pc, #260]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac14:	f000 fa24 	bl	800b060 <ai_platform_get_weights_map>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d071      	beq.n	800ad02 <accelerometer_motion_configure_weights+0xfe>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ac1e:	4b3f      	ldr	r3, [pc, #252]	@ (800ad1c <accelerometer_motion_configure_weights+0x118>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac26:	4a3d      	ldr	r2, [pc, #244]	@ (800ad1c <accelerometer_motion_configure_weights+0x118>)
 800ac28:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_accelerometer_motion_weights_map[0] + 0);
 800ac2a:	4b3b      	ldr	r3, [pc, #236]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a3b      	ldr	r2, [pc, #236]	@ (800ad1c <accelerometer_motion_configure_weights+0x118>)
 800ac30:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_accelerometer_motion_weights_map[0] + 0);
 800ac32:	4b39      	ldr	r3, [pc, #228]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a39      	ldr	r2, [pc, #228]	@ (800ad1c <accelerometer_motion_configure_weights+0x118>)
 800ac38:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac3a:	4b39      	ldr	r3, [pc, #228]	@ (800ad20 <accelerometer_motion_configure_weights+0x11c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac42:	4a37      	ldr	r2, [pc, #220]	@ (800ad20 <accelerometer_motion_configure_weights+0x11c>)
 800ac44:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_accelerometer_motion_weights_map[0] + 2304);
 800ac46:	4b34      	ldr	r3, [pc, #208]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac4e:	4a34      	ldr	r2, [pc, #208]	@ (800ad20 <accelerometer_motion_configure_weights+0x11c>)
 800ac50:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_accelerometer_motion_weights_map[0] + 2304);
 800ac52:	4b31      	ldr	r3, [pc, #196]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac5a:	4a31      	ldr	r2, [pc, #196]	@ (800ad20 <accelerometer_motion_configure_weights+0x11c>)
 800ac5c:	60d3      	str	r3, [r2, #12]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800ac5e:	4b31      	ldr	r3, [pc, #196]	@ (800ad24 <accelerometer_motion_configure_weights+0x120>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac66:	4a2f      	ldr	r2, [pc, #188]	@ (800ad24 <accelerometer_motion_configure_weights+0x120>)
 800ac68:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_accelerometer_motion_weights_map[0] + 2560);
 800ac6a:	4b2b      	ldr	r3, [pc, #172]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 800ac72:	4a2c      	ldr	r2, [pc, #176]	@ (800ad24 <accelerometer_motion_configure_weights+0x120>)
 800ac74:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_accelerometer_motion_weights_map[0] + 2560);
 800ac76:	4b28      	ldr	r3, [pc, #160]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 800ac7e:	4a29      	ldr	r2, [pc, #164]	@ (800ad24 <accelerometer_motion_configure_weights+0x120>)
 800ac80:	60d3      	str	r3, [r2, #12]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac82:	4b29      	ldr	r3, [pc, #164]	@ (800ad28 <accelerometer_motion_configure_weights+0x124>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac8a:	4a27      	ldr	r2, [pc, #156]	@ (800ad28 <accelerometer_motion_configure_weights+0x124>)
 800ac8c:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_accelerometer_motion_weights_map[0] + 104960);
 800ac8e:	4b22      	ldr	r3, [pc, #136]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f503 33cd 	add.w	r3, r3, #104960	@ 0x19a00
 800ac96:	4a24      	ldr	r2, [pc, #144]	@ (800ad28 <accelerometer_motion_configure_weights+0x124>)
 800ac98:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_accelerometer_motion_weights_map[0] + 104960);
 800ac9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f503 33cd 	add.w	r3, r3, #104960	@ 0x19a00
 800aca2:	4a21      	ldr	r2, [pc, #132]	@ (800ad28 <accelerometer_motion_configure_weights+0x124>)
 800aca4:	60d3      	str	r3, [r2, #12]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800aca6:	4b21      	ldr	r3, [pc, #132]	@ (800ad2c <accelerometer_motion_configure_weights+0x128>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800acae:	4a1f      	ldr	r2, [pc, #124]	@ (800ad2c <accelerometer_motion_configure_weights+0x128>)
 800acb0:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_accelerometer_motion_weights_map[0] + 105360);
 800acb2:	4b19      	ldr	r3, [pc, #100]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f503 33cd 	add.w	r3, r3, #104960	@ 0x19a00
 800acba:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800acbe:	4a1b      	ldr	r2, [pc, #108]	@ (800ad2c <accelerometer_motion_configure_weights+0x128>)
 800acc0:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_accelerometer_motion_weights_map[0] + 105360);
 800acc2:	4b15      	ldr	r3, [pc, #84]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f503 33cd 	add.w	r3, r3, #104960	@ 0x19a00
 800acca:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800acce:	4a17      	ldr	r2, [pc, #92]	@ (800ad2c <accelerometer_motion_configure_weights+0x128>)
 800acd0:	60d3      	str	r3, [r2, #12]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800acd2:	4b17      	ldr	r3, [pc, #92]	@ (800ad30 <accelerometer_motion_configure_weights+0x12c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800acda:	4a15      	ldr	r2, [pc, #84]	@ (800ad30 <accelerometer_motion_configure_weights+0x12c>)
 800acdc:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_accelerometer_motion_weights_map[0] + 105760);
 800acde:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f503 33ce 	add.w	r3, r3, #105472	@ 0x19c00
 800ace6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800acea:	4a11      	ldr	r2, [pc, #68]	@ (800ad30 <accelerometer_motion_configure_weights+0x12c>)
 800acec:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_accelerometer_motion_weights_map[0] + 105760);
 800acee:	4b0a      	ldr	r3, [pc, #40]	@ (800ad18 <accelerometer_motion_configure_weights+0x114>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f503 33ce 	add.w	r3, r3, #105472	@ 0x19c00
 800acf6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800acfa:	4a0d      	ldr	r2, [pc, #52]	@ (800ad30 <accelerometer_motion_configure_weights+0x12c>)
 800acfc:	60d3      	str	r3, [r2, #12]
    return true;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e005      	b.n	800ad0e <accelerometer_motion_configure_weights+0x10a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ad02:	2212      	movs	r2, #18
 800ad04:	2130      	movs	r1, #48	@ 0x30
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fa80 	bl	800b20c <ai_platform_network_set_error>
  return false;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20003340 	.word	0x20003340
 800ad1c:	200001f0 	.word	0x200001f0
 800ad20:	20000200 	.word	0x20000200
 800ad24:	20000210 	.word	0x20000210
 800ad28:	20000220 	.word	0x20000220
 800ad2c:	20000230 	.word	0x20000230
 800ad30:	20000240 	.word	0x20000240

0800ad34 <ai_accelerometer_motion_get_error>:
}


AI_API_ENTRY
ai_error ai_accelerometer_motion_get_error(ai_handle network)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fa59 	bl	800b1f4 <ai_platform_network_get_error>
 800ad42:	4603      	mov	r3, r0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <ai_accelerometer_motion_create>:


AI_API_ENTRY
ai_error ai_accelerometer_motion_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ad56:	2300      	movs	r3, #0
 800ad58:	9301      	str	r3, [sp, #4]
 800ad5a:	2305      	movs	r3, #5
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	2301      	movs	r3, #1
 800ad60:	4a04      	ldr	r2, [pc, #16]	@ (800ad74 <ai_accelerometer_motion_create+0x28>)
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fb41 	bl	800b3ec <ai_platform_network_create>
 800ad6a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20000994 	.word	0x20000994

0800ad78 <ai_accelerometer_motion_create_and_init>:


AI_API_ENTRY
ai_error ai_accelerometer_motion_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b094      	sub	sp, #80	@ 0x50
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_accelerometer_motion_create(network, AI_ACCELEROMETER_MOTION_DATA_CONFIG);
 800ad84:	2100      	movs	r1, #0
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff ffe0 	bl	800ad4c <ai_accelerometer_motion_create>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800ad90:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <ai_accelerometer_motion_create_and_init+0x24>
    return err;
 800ad98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad9a:	e067      	b.n	800ae6c <ai_accelerometer_motion_create_and_init+0xf4>
  }
  
  if (ai_accelerometer_motion_data_params_get(&params) != true) {
 800ad9c:	f107 0310 	add.w	r3, r7, #16
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 f8e7 	bl	800af74 <ai_accelerometer_motion_data_params_get>
 800ada6:	4603      	mov	r3, r0
 800ada8:	f083 0301 	eor.w	r3, r3, #1
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d008      	beq.n	800adc4 <ai_accelerometer_motion_create_and_init+0x4c>
    err = ai_accelerometer_motion_get_error(*network);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff ffbc 	bl	800ad34 <ai_accelerometer_motion_get_error>
 800adbc:	4603      	mov	r3, r0
 800adbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800adc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adc2:	e053      	b.n	800ae6c <ai_accelerometer_motion_create_and_init+0xf4>
  }
#if defined(AI_ACCELEROMETER_MOTION_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800adc4:	2300      	movs	r3, #0
 800adc6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800adca:	e012      	b.n	800adf2 <ai_accelerometer_motion_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800adcc:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800add0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	4413      	add	r3, r2
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	f107 0310 	add.w	r3, r7, #16
 800ade0:	330c      	adds	r3, #12
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f92c 	bl	800b040 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ade8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800adec:	3301      	adds	r3, #1
 800adee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d004      	beq.n	800ae02 <ai_accelerometer_motion_create_and_init+0x8a>
 800adf8:	8bfb      	ldrh	r3, [r7, #30]
 800adfa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d3e4      	bcc.n	800adcc <ai_accelerometer_motion_create_and_init+0x54>
  }
#endif
#if defined(AI_ACCELEROMETER_MOTION_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ae02:	2300      	movs	r3, #0
 800ae04:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ae08:	e012      	b.n	800ae30 <ai_accelerometer_motion_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800ae0a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800ae0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	4413      	add	r3, r2
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	f107 0310 	add.w	r3, r7, #16
 800ae1e:	3304      	adds	r3, #4
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f90d 	bl	800b040 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ae26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <ai_accelerometer_motion_create_and_init+0xc8>
 800ae36:	8afb      	ldrh	r3, [r7, #22]
 800ae38:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d3e4      	bcc.n	800ae0a <ai_accelerometer_motion_create_and_init+0x92>
  }
#endif
  if (ai_accelerometer_motion_init(*network, &params) != true) {
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f107 0210 	add.w	r2, r7, #16
 800ae48:	4611      	mov	r1, r2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 f846 	bl	800aedc <ai_accelerometer_motion_init>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f083 0301 	eor.w	r3, r3, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d006      	beq.n	800ae6a <ai_accelerometer_motion_create_and_init+0xf2>
    err = ai_accelerometer_motion_get_error(*network);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff ff67 	bl	800ad34 <ai_accelerometer_motion_get_error>
 800ae66:	4603      	mov	r3, r0
 800ae68:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800ae6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3750      	adds	r7, #80	@ 0x50
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <ai_accelerometer_motion_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_accelerometer_motion_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d104      	bne.n	800ae8e <ai_accelerometer_motion_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ae84:	4b06      	ldr	r3, [pc, #24]	@ (800aea0 <ai_accelerometer_motion_inputs_get+0x2c>)
 800ae86:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a06      	ldr	r2, [pc, #24]	@ (800aea4 <ai_accelerometer_motion_inputs_get+0x30>)
 800ae8c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f9c1 	bl	800b218 <ai_platform_inputs_get>
 800ae96:	4603      	mov	r3, r0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20000994 	.word	0x20000994
 800aea4:	a1c00100 	.word	0xa1c00100

0800aea8 <ai_accelerometer_motion_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_accelerometer_motion_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d104      	bne.n	800aec2 <ai_accelerometer_motion_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800aeb8:	4b06      	ldr	r3, [pc, #24]	@ (800aed4 <ai_accelerometer_motion_outputs_get+0x2c>)
 800aeba:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a06      	ldr	r2, [pc, #24]	@ (800aed8 <ai_accelerometer_motion_outputs_get+0x30>)
 800aec0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fa1d 	bl	800b304 <ai_platform_outputs_get>
 800aeca:	4603      	mov	r3, r0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20000994 	.word	0x20000994
 800aed8:	a1c00100 	.word	0xa1c00100

0800aedc <ai_accelerometer_motion_init>:


AI_API_ENTRY
ai_bool ai_accelerometer_motion_init(
  ai_handle network, const ai_network_params* params)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fac1 	bl	800b470 <ai_platform_network_init>
 800aeee:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800aef0:	2301      	movs	r3, #1
 800aef2:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <ai_accelerometer_motion_init+0x22>
 800aefa:	2300      	movs	r3, #0
 800aefc:	e026      	b.n	800af4c <ai_accelerometer_motion_init+0x70>
  ok &= accelerometer_motion_configure_weights(net_ctx, params);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7ff fe7f 	bl	800ac04 <accelerometer_motion_configure_weights>
 800af06:	4603      	mov	r3, r0
 800af08:	461a      	mov	r2, r3
 800af0a:	7afb      	ldrb	r3, [r7, #11]
 800af0c:	4013      	ands	r3, r2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bf14      	ite	ne
 800af12:	2301      	movne	r3, #1
 800af14:	2300      	moveq	r3, #0
 800af16:	72fb      	strb	r3, [r7, #11]
  ok &= accelerometer_motion_configure_activations(net_ctx, params);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7ff fdf8 	bl	800ab10 <accelerometer_motion_configure_activations>
 800af20:	4603      	mov	r3, r0
 800af22:	461a      	mov	r2, r3
 800af24:	7afb      	ldrb	r3, [r7, #11]
 800af26:	4013      	ands	r3, r2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bf14      	ite	ne
 800af2c:	2301      	movne	r3, #1
 800af2e:	2300      	moveq	r3, #0
 800af30:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fb6a 	bl	800b60c <ai_platform_network_post_init>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	4013      	ands	r3, r2
 800af40:	2b00      	cmp	r3, #0
 800af42:	bf14      	ite	ne
 800af44:	2301      	movne	r3, #1
 800af46:	2300      	moveq	r3, #0
 800af48:	72fb      	strb	r3, [r7, #11]

  return ok;
 800af4a:	7afb      	ldrb	r3, [r7, #11]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <ai_accelerometer_motion_run>:


AI_API_ENTRY
ai_i32 ai_accelerometer_motion_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 fb81 	bl	800b66c <ai_platform_network_process>
 800af6a:	4603      	mov	r3, r0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <ai_accelerometer_motion_data_params_get>:
 * @ingroup accelerometer_motion_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_accelerometer_motion_data_params_get(ai_network_params* params)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <ai_accelerometer_motion_data_params_get+0x12>
 800af82:	2300      	movs	r3, #0
 800af84:	e016      	b.n	800afb4 <ai_accelerometer_motion_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800af86:	4a0d      	ldr	r2, [pc, #52]	@ (800afbc <ai_accelerometer_motion_data_params_get+0x48>)
 800af88:	f107 0310 	add.w	r3, r7, #16
 800af8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af90:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ACCELEROMETER_MOTION_DATA_ACTIVATIONS_COUNT, g_accelerometer_motion_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800af94:	4a0a      	ldr	r2, [pc, #40]	@ (800afc0 <ai_accelerometer_motion_data_params_get+0x4c>)
 800af96:	f107 0308 	add.w	r3, r7, #8
 800af9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af9e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ACCELEROMETER_MOTION_DATA_WEIGHTS_COUNT, g_accelerometer_motion_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800afa2:	f107 0210 	add.w	r2, r7, #16
 800afa6:	f107 0308 	add.w	r3, r7, #8
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f8ff 	bl	800b1b0 <ai_platform_bind_network_params>
 800afb2:	4603      	mov	r3, r0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	080102fc 	.word	0x080102fc
 800afc0:	08010304 	.word	0x08010304

0800afc4 <ai_buffer_get_size>:
 800afc4:	b378      	cbz	r0, 800b026 <ai_buffer_get_size+0x62>
 800afc6:	b410      	push	{r4}
 800afc8:	6803      	ldr	r3, [r0, #0]
 800afca:	4a17      	ldr	r2, [pc, #92]	@ (800b028 <ai_buffer_get_size+0x64>)
 800afcc:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800afd0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d01e      	beq.n	800b016 <ai_buffer_get_size+0x52>
 800afd8:	6984      	ldr	r4, [r0, #24]
 800afda:	6862      	ldr	r2, [r4, #4]
 800afdc:	7d03      	ldrb	r3, [r0, #20]
 800afde:	6941      	ldr	r1, [r0, #20]
 800afe0:	f1a3 0301 	sub.w	r3, r3, #1
 800afe4:	fab3 f383 	clz	r3, r3
 800afe8:	095b      	lsrs	r3, r3, #5
 800afea:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800afee:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800aff2:	da0b      	bge.n	800b00c <ai_buffer_get_size+0x48>
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d102      	bne.n	800affe <ai_buffer_get_size+0x3a>
 800aff8:	2802      	cmp	r0, #2
 800affa:	d007      	beq.n	800b00c <ai_buffer_get_size+0x48>
 800affc:	2302      	movs	r3, #2
 800affe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800b002:	3301      	adds	r3, #1
 800b004:	4298      	cmp	r0, r3
 800b006:	fb01 f202 	mul.w	r2, r1, r2
 800b00a:	d1f3      	bne.n	800aff4 <ai_buffer_get_size+0x30>
 800b00c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800b010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	2900      	cmp	r1, #0
 800b018:	d0de      	beq.n	800afd8 <ai_buffer_get_size+0x14>
 800b01a:	6984      	ldr	r4, [r0, #24]
 800b01c:	6862      	ldr	r2, [r4, #4]
 800b01e:	321f      	adds	r2, #31
 800b020:	f022 021f 	bic.w	r2, r2, #31
 800b024:	e7da      	b.n	800afdc <ai_buffer_get_size+0x18>
 800b026:	4770      	bx	lr
 800b028:	000400c0 	.word	0x000400c0

0800b02c <ai_buffer_array_sane>:
 800b02c:	b138      	cbz	r0, 800b03e <ai_buffer_array_sane+0x12>
 800b02e:	6843      	ldr	r3, [r0, #4]
 800b030:	b123      	cbz	r3, 800b03c <ai_buffer_array_sane+0x10>
 800b032:	8840      	ldrh	r0, [r0, #2]
 800b034:	3800      	subs	r0, #0
 800b036:	bf18      	it	ne
 800b038:	2001      	movne	r0, #1
 800b03a:	4770      	bx	lr
 800b03c:	4618      	mov	r0, r3
 800b03e:	4770      	bx	lr

0800b040 <ai_buffer_array_item_set_address>:
 800b040:	b150      	cbz	r0, 800b058 <ai_buffer_array_item_set_address+0x18>
 800b042:	6843      	ldr	r3, [r0, #4]
 800b044:	b14b      	cbz	r3, 800b05a <ai_buffer_array_item_set_address+0x1a>
 800b046:	8840      	ldrh	r0, [r0, #2]
 800b048:	b900      	cbnz	r0, 800b04c <ai_buffer_array_item_set_address+0xc>
 800b04a:	4770      	bx	lr
 800b04c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b050:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b054:	2001      	movs	r0, #1
 800b056:	605a      	str	r2, [r3, #4]
 800b058:	4770      	bx	lr
 800b05a:	4618      	mov	r0, r3
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop

0800b060 <ai_platform_get_weights_map>:
 800b060:	2a00      	cmp	r2, #0
 800b062:	d037      	beq.n	800b0d4 <ai_platform_get_weights_map+0x74>
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	4604      	mov	r4, r0
 800b068:	b1a0      	cbz	r0, 800b094 <ai_platform_get_weights_map+0x34>
 800b06a:	460f      	mov	r7, r1
 800b06c:	b191      	cbz	r1, 800b094 <ai_platform_get_weights_map+0x34>
 800b06e:	4b25      	ldr	r3, [pc, #148]	@ (800b104 <ai_platform_get_weights_map+0xa4>)
 800b070:	6810      	ldr	r0, [r2, #0]
 800b072:	4298      	cmp	r0, r3
 800b074:	4615      	mov	r5, r2
 800b076:	d00f      	beq.n	800b098 <ai_platform_get_weights_map+0x38>
 800b078:	6855      	ldr	r5, [r2, #4]
 800b07a:	b15d      	cbz	r5, 800b094 <ai_platform_get_weights_map+0x34>
 800b07c:	682e      	ldr	r6, [r5, #0]
 800b07e:	429e      	cmp	r6, r3
 800b080:	d02a      	beq.n	800b0d8 <ai_platform_get_weights_map+0x78>
 800b082:	f1a1 0001 	sub.w	r0, r1, #1
 800b086:	6025      	str	r5, [r4, #0]
 800b088:	fab0 f080 	clz	r0, r0
 800b08c:	0940      	lsrs	r0, r0, #5
 800b08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b090:	42a7      	cmp	r7, r4
 800b092:	d034      	beq.n	800b0fe <ai_platform_get_weights_map+0x9e>
 800b094:	2000      	movs	r0, #0
 800b096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b098:	1d10      	adds	r0, r2, #4
 800b09a:	f7ff ffc7 	bl	800b02c <ai_buffer_array_sane>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0f8      	beq.n	800b094 <ai_platform_get_weights_map+0x34>
 800b0a2:	88eb      	ldrh	r3, [r5, #6]
 800b0a4:	429f      	cmp	r7, r3
 800b0a6:	d1f5      	bne.n	800b094 <ai_platform_get_weights_map+0x34>
 800b0a8:	f04f 0c00 	mov.w	ip, #0
 800b0ac:	1f20      	subs	r0, r4, #4
 800b0ae:	46e6      	mov	lr, ip
 800b0b0:	68ab      	ldr	r3, [r5, #8]
 800b0b2:	4463      	add	r3, ip
 800b0b4:	f10c 0c1c 	add.w	ip, ip, #28
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	b12b      	cbz	r3, 800b0c8 <ai_platform_get_weights_map+0x68>
 800b0bc:	f10e 0e01 	add.w	lr, lr, #1
 800b0c0:	4577      	cmp	r7, lr
 800b0c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0c6:	d1f3      	bne.n	800b0b0 <ai_platform_get_weights_map+0x50>
 800b0c8:	eba7 000e 	sub.w	r0, r7, lr
 800b0cc:	fab0 f080 	clz	r0, r0
 800b0d0:	0940      	lsrs	r0, r0, #5
 800b0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	4770      	bx	lr
 800b0d8:	1f20      	subs	r0, r4, #4
 800b0da:	462a      	mov	r2, r5
 800b0dc:	2400      	movs	r4, #0
 800b0de:	e000      	b.n	800b0e2 <ai_platform_get_weights_map+0x82>
 800b0e0:	461c      	mov	r4, r3
 800b0e2:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b0e6:	42b3      	cmp	r3, r6
 800b0e8:	d0d2      	beq.n	800b090 <ai_platform_get_weights_map+0x30>
 800b0ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0ee:	1c63      	adds	r3, r4, #1
 800b0f0:	429f      	cmp	r7, r3
 800b0f2:	d1f5      	bne.n	800b0e0 <ai_platform_get_weights_map+0x80>
 800b0f4:	3402      	adds	r4, #2
 800b0f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b0fa:	42b3      	cmp	r3, r6
 800b0fc:	d1ca      	bne.n	800b094 <ai_platform_get_weights_map+0x34>
 800b0fe:	2001      	movs	r0, #1
 800b100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b102:	bf00      	nop
 800b104:	a1facade 	.word	0xa1facade

0800b108 <ai_platform_get_activations_map>:
 800b108:	2a00      	cmp	r2, #0
 800b10a:	d038      	beq.n	800b17e <ai_platform_get_activations_map+0x76>
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	4604      	mov	r4, r0
 800b110:	b1a0      	cbz	r0, 800b13c <ai_platform_get_activations_map+0x34>
 800b112:	460f      	mov	r7, r1
 800b114:	b191      	cbz	r1, 800b13c <ai_platform_get_activations_map+0x34>
 800b116:	4b25      	ldr	r3, [pc, #148]	@ (800b1ac <ai_platform_get_activations_map+0xa4>)
 800b118:	6810      	ldr	r0, [r2, #0]
 800b11a:	4298      	cmp	r0, r3
 800b11c:	4615      	mov	r5, r2
 800b11e:	d00f      	beq.n	800b140 <ai_platform_get_activations_map+0x38>
 800b120:	6a15      	ldr	r5, [r2, #32]
 800b122:	b15d      	cbz	r5, 800b13c <ai_platform_get_activations_map+0x34>
 800b124:	682e      	ldr	r6, [r5, #0]
 800b126:	429e      	cmp	r6, r3
 800b128:	d02b      	beq.n	800b182 <ai_platform_get_activations_map+0x7a>
 800b12a:	f1a1 0001 	sub.w	r0, r1, #1
 800b12e:	6025      	str	r5, [r4, #0]
 800b130:	fab0 f080 	clz	r0, r0
 800b134:	0940      	lsrs	r0, r0, #5
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b138:	42a7      	cmp	r7, r4
 800b13a:	d035      	beq.n	800b1a8 <ai_platform_get_activations_map+0xa0>
 800b13c:	2000      	movs	r0, #0
 800b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b140:	f102 000c 	add.w	r0, r2, #12
 800b144:	f7ff ff72 	bl	800b02c <ai_buffer_array_sane>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d0f7      	beq.n	800b13c <ai_platform_get_activations_map+0x34>
 800b14c:	89eb      	ldrh	r3, [r5, #14]
 800b14e:	429f      	cmp	r7, r3
 800b150:	d1f4      	bne.n	800b13c <ai_platform_get_activations_map+0x34>
 800b152:	f04f 0c00 	mov.w	ip, #0
 800b156:	1f20      	subs	r0, r4, #4
 800b158:	46e6      	mov	lr, ip
 800b15a:	692b      	ldr	r3, [r5, #16]
 800b15c:	4463      	add	r3, ip
 800b15e:	f10c 0c1c 	add.w	ip, ip, #28
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	b12b      	cbz	r3, 800b172 <ai_platform_get_activations_map+0x6a>
 800b166:	f10e 0e01 	add.w	lr, lr, #1
 800b16a:	4577      	cmp	r7, lr
 800b16c:	f840 3f04 	str.w	r3, [r0, #4]!
 800b170:	d1f3      	bne.n	800b15a <ai_platform_get_activations_map+0x52>
 800b172:	eba7 000e 	sub.w	r0, r7, lr
 800b176:	fab0 f080 	clz	r0, r0
 800b17a:	0940      	lsrs	r0, r0, #5
 800b17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17e:	2000      	movs	r0, #0
 800b180:	4770      	bx	lr
 800b182:	1f20      	subs	r0, r4, #4
 800b184:	462a      	mov	r2, r5
 800b186:	2400      	movs	r4, #0
 800b188:	e000      	b.n	800b18c <ai_platform_get_activations_map+0x84>
 800b18a:	461c      	mov	r4, r3
 800b18c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b190:	42b3      	cmp	r3, r6
 800b192:	d0d1      	beq.n	800b138 <ai_platform_get_activations_map+0x30>
 800b194:	f840 3f04 	str.w	r3, [r0, #4]!
 800b198:	1c63      	adds	r3, r4, #1
 800b19a:	429f      	cmp	r7, r3
 800b19c:	d1f5      	bne.n	800b18a <ai_platform_get_activations_map+0x82>
 800b19e:	3402      	adds	r4, #2
 800b1a0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b1a4:	42b3      	cmp	r3, r6
 800b1a6:	d1c9      	bne.n	800b13c <ai_platform_get_activations_map+0x34>
 800b1a8:	2001      	movs	r0, #1
 800b1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ac:	a1facade 	.word	0xa1facade

0800b1b0 <ai_platform_bind_network_params>:
 800b1b0:	b1a0      	cbz	r0, 800b1dc <ai_platform_bind_network_params+0x2c>
 800b1b2:	b1b1      	cbz	r1, 800b1e2 <ai_platform_bind_network_params+0x32>
 800b1b4:	b1c2      	cbz	r2, 800b1e8 <ai_platform_bind_network_params+0x38>
 800b1b6:	b410      	push	{r4}
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	4c0d      	ldr	r4, [pc, #52]	@ (800b1f0 <ai_platform_bind_network_params+0x40>)
 800b1bc:	f843 4b04 	str.w	r4, [r3], #4
 800b1c0:	f100 0c0c 	add.w	ip, r0, #12
 800b1c4:	c903      	ldmia	r1, {r0, r1}
 800b1c6:	e883 0003 	stmia.w	r3, {r0, r1}
 800b1ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1ce:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	4603      	mov	r3, r0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	4770      	bx	lr
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	4770      	bx	lr
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	a1facade 	.word	0xa1facade

0800b1f4 <ai_platform_network_get_error>:
 800b1f4:	4b04      	ldr	r3, [pc, #16]	@ (800b208 <ai_platform_network_get_error+0x14>)
 800b1f6:	6802      	ldr	r2, [r0, #0]
 800b1f8:	4393      	bics	r3, r2
 800b1fa:	d102      	bne.n	800b202 <ai_platform_network_get_error+0xe>
 800b1fc:	300c      	adds	r0, #12
 800b1fe:	f000 bc77 	b.w	800baf0 <core_get_error>
 800b202:	f241 0010 	movw	r0, #4112	@ 0x1010
 800b206:	4770      	bx	lr
 800b208:	a1c00100 	.word	0xa1c00100

0800b20c <ai_platform_network_set_error>:
 800b20c:	b110      	cbz	r0, 800b214 <ai_platform_network_set_error+0x8>
 800b20e:	300c      	adds	r0, #12
 800b210:	f000 bc74 	b.w	800bafc <core_set_error>
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop

0800b218 <ai_platform_inputs_get>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	4b38      	ldr	r3, [pc, #224]	@ (800b300 <ai_platform_inputs_get+0xe8>)
 800b21e:	6802      	ldr	r2, [r0, #0]
 800b220:	b085      	sub	sp, #20
 800b222:	4393      	bics	r3, r2
 800b224:	9003      	str	r0, [sp, #12]
 800b226:	9102      	str	r1, [sp, #8]
 800b228:	d160      	bne.n	800b2ec <ai_platform_inputs_get+0xd4>
 800b22a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d04f      	beq.n	800b2d0 <ai_platform_inputs_get+0xb8>
 800b230:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800b234:	f1ba 0f00 	cmp.w	sl, #0
 800b238:	d04a      	beq.n	800b2d0 <ai_platform_inputs_get+0xb8>
 800b23a:	f04f 0b00 	mov.w	fp, #0
 800b23e:	465d      	mov	r5, fp
 800b240:	e016      	b.n	800b270 <ai_platform_inputs_get+0x58>
 800b242:	9901      	ldr	r1, [sp, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	507a      	str	r2, [r7, r1]
 800b248:	69b1      	ldr	r1, [r6, #24]
 800b24a:	684e      	ldr	r6, [r1, #4]
 800b24c:	60a3      	str	r3, [r4, #8]
 800b24e:	f04f 0201 	mov.w	r2, #1
 800b252:	7522      	strb	r2, [r4, #20]
 800b254:	6961      	ldr	r1, [r4, #20]
 800b256:	6020      	str	r0, [r4, #0]
 800b258:	f369 211f 	bfi	r1, r9, #8, #24
 800b25c:	2300      	movs	r3, #0
 800b25e:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800b262:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800b266:	f8c4 c004 	str.w	ip, [r4, #4]
 800b26a:	3501      	adds	r5, #1
 800b26c:	f10b 0b1c 	add.w	fp, fp, #28
 800b270:	f8ba 3000 	ldrh.w	r3, [sl]
 800b274:	42ab      	cmp	r3, r5
 800b276:	b2aa      	uxth	r2, r5
 800b278:	d93c      	bls.n	800b2f4 <ai_platform_inputs_get+0xdc>
 800b27a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b27e:	00e9      	lsls	r1, r5, #3
 800b280:	9101      	str	r1, [sp, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d036      	beq.n	800b2f4 <ai_platform_inputs_get+0xdc>
 800b286:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b28a:	2e00      	cmp	r6, #0
 800b28c:	d032      	beq.n	800b2f4 <ai_platform_inputs_get+0xdc>
 800b28e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b292:	69b2      	ldr	r2, [r6, #24]
 800b294:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800b298:	6810      	ldr	r0, [r2, #0]
 800b29a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b29e:	68b3      	ldr	r3, [r6, #8]
 800b2a0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b2a4:	f001 fe7e 	bl	800cfa4 <ai_array_to_buffer_fmt>
 800b2a8:	69b1      	ldr	r1, [r6, #24]
 800b2aa:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800b2ae:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b2b2:	445c      	add	r4, fp
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0c8      	beq.n	800b24a <ai_platform_inputs_get+0x32>
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800b2be:	6831      	ldr	r1, [r6, #0]
 800b2c0:	6059      	str	r1, [r3, #4]
 800b2c2:	b111      	cbz	r1, 800b2ca <ai_platform_inputs_get+0xb2>
 800b2c4:	8849      	ldrh	r1, [r1, #2]
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	d1bb      	bne.n	800b242 <ai_platform_inputs_get+0x2a>
 800b2ca:	69b1      	ldr	r1, [r6, #24]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e7bc      	b.n	800b24a <ai_platform_inputs_get+0x32>
 800b2d0:	9803      	ldr	r0, [sp, #12]
 800b2d2:	2218      	movs	r2, #24
 800b2d4:	2111      	movs	r1, #17
 800b2d6:	300c      	adds	r0, #12
 800b2d8:	f000 fc10 	bl	800bafc <core_set_error>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4610      	mov	r0, r2
 800b2e0:	9b02      	ldr	r3, [sp, #8]
 800b2e2:	b103      	cbz	r3, 800b2e6 <ai_platform_inputs_get+0xce>
 800b2e4:	801a      	strh	r2, [r3, #0]
 800b2e6:	b005      	add	sp, #20
 800b2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	b005      	add	sp, #20
 800b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f4:	2a00      	cmp	r2, #0
 800b2f6:	d0eb      	beq.n	800b2d0 <ai_platform_inputs_get+0xb8>
 800b2f8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b2fc:	6858      	ldr	r0, [r3, #4]
 800b2fe:	e7ef      	b.n	800b2e0 <ai_platform_inputs_get+0xc8>
 800b300:	a1c00100 	.word	0xa1c00100

0800b304 <ai_platform_outputs_get>:
 800b304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	4b37      	ldr	r3, [pc, #220]	@ (800b3e8 <ai_platform_outputs_get+0xe4>)
 800b30a:	6802      	ldr	r2, [r0, #0]
 800b30c:	b085      	sub	sp, #20
 800b30e:	4393      	bics	r3, r2
 800b310:	9003      	str	r0, [sp, #12]
 800b312:	9102      	str	r1, [sp, #8]
 800b314:	d15d      	bne.n	800b3d2 <ai_platform_outputs_get+0xce>
 800b316:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d94c      	bls.n	800b3b6 <ai_platform_outputs_get+0xb2>
 800b31c:	f04f 0b00 	mov.w	fp, #0
 800b320:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800b324:	465d      	mov	r5, fp
 800b326:	46d8      	mov	r8, fp
 800b328:	e016      	b.n	800b358 <ai_platform_outputs_get+0x54>
 800b32a:	9a01      	ldr	r2, [sp, #4]
 800b32c:	2101      	movs	r1, #1
 800b32e:	50b9      	str	r1, [r7, r2]
 800b330:	69b2      	ldr	r2, [r6, #24]
 800b332:	6856      	ldr	r6, [r2, #4]
 800b334:	6020      	str	r0, [r4, #0]
 800b336:	f04f 0201 	mov.w	r2, #1
 800b33a:	7522      	strb	r2, [r4, #20]
 800b33c:	6960      	ldr	r0, [r4, #20]
 800b33e:	f8c4 c004 	str.w	ip, [r4, #4]
 800b342:	f369 201f 	bfi	r0, r9, #8, #24
 800b346:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800b34a:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800b34e:	9b00      	ldr	r3, [sp, #0]
 800b350:	61a3      	str	r3, [r4, #24]
 800b352:	3501      	adds	r5, #1
 800b354:	f10b 0b1c 	add.w	fp, fp, #28
 800b358:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	b2aa      	uxth	r2, r5
 800b360:	d93b      	bls.n	800b3da <ai_platform_outputs_get+0xd6>
 800b362:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b366:	00e9      	lsls	r1, r5, #3
 800b368:	9101      	str	r1, [sp, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d035      	beq.n	800b3da <ai_platform_outputs_get+0xd6>
 800b36e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b372:	2e00      	cmp	r6, #0
 800b374:	d031      	beq.n	800b3da <ai_platform_outputs_get+0xd6>
 800b376:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b37a:	69b2      	ldr	r2, [r6, #24]
 800b37c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b380:	68b3      	ldr	r3, [r6, #8]
 800b382:	6810      	ldr	r0, [r2, #0]
 800b384:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b388:	68f3      	ldr	r3, [r6, #12]
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	f001 fe0a 	bl	800cfa4 <ai_array_to_buffer_fmt>
 800b390:	69b2      	ldr	r2, [r6, #24]
 800b392:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800b396:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b39a:	445c      	add	r4, fp
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0c8      	beq.n	800b332 <ai_platform_outputs_get+0x2e>
 800b3a0:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 800b3a4:	6832      	ldr	r2, [r6, #0]
 800b3a6:	605a      	str	r2, [r3, #4]
 800b3a8:	b112      	cbz	r2, 800b3b0 <ai_platform_outputs_get+0xac>
 800b3aa:	8852      	ldrh	r2, [r2, #2]
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d1bc      	bne.n	800b32a <ai_platform_outputs_get+0x26>
 800b3b0:	69b2      	ldr	r2, [r6, #24]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e7bd      	b.n	800b332 <ai_platform_outputs_get+0x2e>
 800b3b6:	9803      	ldr	r0, [sp, #12]
 800b3b8:	2218      	movs	r2, #24
 800b3ba:	2111      	movs	r1, #17
 800b3bc:	300c      	adds	r0, #12
 800b3be:	f000 fb9d 	bl	800bafc <core_set_error>
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	9b02      	ldr	r3, [sp, #8]
 800b3c8:	b103      	cbz	r3, 800b3cc <ai_platform_outputs_get+0xc8>
 800b3ca:	801a      	strh	r2, [r3, #0]
 800b3cc:	b005      	add	sp, #20
 800b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	b005      	add	sp, #20
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	d0eb      	beq.n	800b3b6 <ai_platform_outputs_get+0xb2>
 800b3de:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b3e2:	6858      	ldr	r0, [r3, #4]
 800b3e4:	e7ef      	b.n	800b3c6 <ai_platform_outputs_get+0xc2>
 800b3e6:	bf00      	nop
 800b3e8:	a1c00100 	.word	0xa1c00100

0800b3ec <ai_platform_network_create>:
 800b3ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	b083      	sub	sp, #12
 800b3f2:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800b3f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800b3fa:	b320      	cbz	r0, 800b446 <ai_platform_network_create+0x5a>
 800b3fc:	6002      	str	r2, [r0, #0]
 800b3fe:	4616      	mov	r6, r2
 800b400:	461f      	mov	r7, r3
 800b402:	4604      	mov	r4, r0
 800b404:	f000 fb72 	bl	800baec <core_init>
 800b408:	b970      	cbnz	r0, 800b428 <ai_platform_network_create+0x3c>
 800b40a:	2530      	movs	r5, #48	@ 0x30
 800b40c:	2300      	movs	r3, #0
 800b40e:	6023      	str	r3, [r4, #0]
 800b410:	2410      	movs	r4, #16
 800b412:	4642      	mov	r2, r8
 800b414:	4649      	mov	r1, r9
 800b416:	4638      	mov	r0, r7
 800b418:	f001 fe6e 	bl	800d0f8 <ai_version_get>
 800b41c:	60b0      	str	r0, [r6, #8]
 800b41e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800b422:	b003      	add	sp, #12
 800b424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b428:	2200      	movs	r2, #0
 800b42a:	4649      	mov	r1, r9
 800b42c:	4638      	mov	r0, r7
 800b42e:	f001 fe63 	bl	800d0f8 <ai_version_get>
 800b432:	2200      	movs	r2, #0
 800b434:	4605      	mov	r5, r0
 800b436:	2105      	movs	r1, #5
 800b438:	2001      	movs	r0, #1
 800b43a:	f001 fe5d 	bl	800d0f8 <ai_version_get>
 800b43e:	4285      	cmp	r5, r0
 800b440:	d008      	beq.n	800b454 <ai_platform_network_create+0x68>
 800b442:	2501      	movs	r5, #1
 800b444:	e7e2      	b.n	800b40c <ai_platform_network_create+0x20>
 800b446:	2510      	movs	r5, #16
 800b448:	462c      	mov	r4, r5
 800b44a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800b44e:	b003      	add	sp, #12
 800b450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b454:	4b05      	ldr	r3, [pc, #20]	@ (800b46c <ai_platform_network_create+0x80>)
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	a801      	add	r0, sp, #4
 800b45a:	f000 fb5b 	bl	800bb14 <ai_check_custom_types>
 800b45e:	b110      	cbz	r0, 800b466 <ai_platform_network_create+0x7a>
 800b460:	2400      	movs	r4, #0
 800b462:	4625      	mov	r5, r4
 800b464:	e7d5      	b.n	800b412 <ai_platform_network_create+0x26>
 800b466:	2502      	movs	r5, #2
 800b468:	e7d0      	b.n	800b40c <ai_platform_network_create+0x20>
 800b46a:	bf00      	nop
 800b46c:	84048403 	.word	0x84048403

0800b470 <ai_platform_network_init>:
 800b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	4b63      	ldr	r3, [pc, #396]	@ (800b604 <ai_platform_network_init+0x194>)
 800b476:	6802      	ldr	r2, [r0, #0]
 800b478:	4393      	bics	r3, r2
 800b47a:	b083      	sub	sp, #12
 800b47c:	d156      	bne.n	800b52c <ai_platform_network_init+0xbc>
 800b47e:	4604      	mov	r4, r0
 800b480:	460f      	mov	r7, r1
 800b482:	2900      	cmp	r1, #0
 800b484:	f000 80a9 	beq.w	800b5da <ai_platform_network_init+0x16a>
 800b488:	680b      	ldr	r3, [r1, #0]
 800b48a:	495f      	ldr	r1, [pc, #380]	@ (800b608 <ai_platform_network_init+0x198>)
 800b48c:	428b      	cmp	r3, r1
 800b48e:	d113      	bne.n	800b4b8 <ai_platform_network_init+0x48>
 800b490:	495c      	ldr	r1, [pc, #368]	@ (800b604 <ai_platform_network_init+0x194>)
 800b492:	89bd      	ldrh	r5, [r7, #12]
 800b494:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800b498:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800b49c:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800b4a0:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 800b4a4:	68be      	ldr	r6, [r7, #8]
 800b4a6:	428a      	cmp	r2, r1
 800b4a8:	d02c      	beq.n	800b504 <ai_platform_network_init+0x94>
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	6123      	str	r3, [r4, #16]
 800b4ae:	4627      	mov	r7, r4
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	b003      	add	sp, #12
 800b4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800b4c2:	f7ff fd7f 	bl	800afc4 <ai_buffer_get_size>
 800b4c6:	f107 081c 	add.w	r8, r7, #28
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	463e      	mov	r6, r7
 800b4d2:	6a3f      	ldr	r7, [r7, #32]
 800b4d4:	f7ff fd76 	bl	800afc4 <ai_buffer_get_size>
 800b4d8:	2d00      	cmp	r5, #0
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	bf0a      	itet	eq
 800b4de:	46a9      	moveq	r9, r5
 800b4e0:	f04f 0901 	movne.w	r9, #1
 800b4e4:	462e      	moveq	r6, r5
 800b4e6:	b330      	cbz	r0, 800b536 <ai_platform_network_init+0xc6>
 800b4e8:	2f00      	cmp	r7, #0
 800b4ea:	f000 8084 	beq.w	800b5f6 <ai_platform_network_init+0x186>
 800b4ee:	f04f 0a01 	mov.w	sl, #1
 800b4f2:	f1bb 0f00 	cmp.w	fp, #0
 800b4f6:	d021      	beq.n	800b53c <ai_platform_network_init+0xcc>
 800b4f8:	2500      	movs	r5, #0
 800b4fa:	6822      	ldr	r2, [r4, #0]
 800b4fc:	4941      	ldr	r1, [pc, #260]	@ (800b604 <ai_platform_network_init+0x194>)
 800b4fe:	428a      	cmp	r2, r1
 800b500:	46ab      	mov	fp, r5
 800b502:	d1d2      	bne.n	800b4aa <ai_platform_network_init+0x3a>
 800b504:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800b506:	454a      	cmp	r2, r9
 800b508:	4a3f      	ldr	r2, [pc, #252]	@ (800b608 <ai_platform_network_init+0x198>)
 800b50a:	d221      	bcs.n	800b550 <ai_platform_network_init+0xe0>
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d15c      	bne.n	800b5ca <ai_platform_network_init+0x15a>
 800b510:	6266      	str	r6, [r4, #36]	@ 0x24
 800b512:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800b516:	f8a4 b020 	strh.w	fp, [r4, #32]
 800b51a:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800b51e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800b522:	8525      	strh	r5, [r4, #40]	@ 0x28
 800b524:	4620      	mov	r0, r4
 800b526:	f000 fb1f 	bl	800bb68 <ai_layers_init_all>
 800b52a:	e7be      	b.n	800b4aa <ai_platform_network_init+0x3a>
 800b52c:	2700      	movs	r7, #0
 800b52e:	4638      	mov	r0, r7
 800b530:	b003      	add	sp, #12
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	4680      	mov	r8, r0
 800b538:	4682      	mov	sl, r0
 800b53a:	e7da      	b.n	800b4f2 <ai_platform_network_init+0x82>
 800b53c:	2d00      	cmp	r5, #0
 800b53e:	d0dc      	beq.n	800b4fa <ai_platform_network_init+0x8a>
 800b540:	2212      	movs	r2, #18
 800b542:	2110      	movs	r1, #16
 800b544:	f104 000c 	add.w	r0, r4, #12
 800b548:	f000 fad8 	bl	800bafc <core_set_error>
 800b54c:	465f      	mov	r7, fp
 800b54e:	e7af      	b.n	800b4b0 <ai_platform_network_init+0x40>
 800b550:	4293      	cmp	r3, r2
 800b552:	d0dd      	beq.n	800b510 <ai_platform_network_init+0xa0>
 800b554:	f1b9 0f00 	cmp.w	r9, #0
 800b558:	d018      	beq.n	800b58c <ai_platform_network_init+0x11c>
 800b55a:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	f8cd 9004 	str.w	r9, [sp, #4]
 800b564:	2700      	movs	r7, #0
 800b566:	4699      	mov	r9, r3
 800b568:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b56a:	eb06 0e07 	add.w	lr, r6, r7
 800b56e:	eb03 0c07 	add.w	ip, r3, r7
 800b572:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b576:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b57a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b57e:	371c      	adds	r7, #28
 800b580:	45b9      	cmp	r9, r7
 800b582:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b586:	d1ef      	bne.n	800b568 <ai_platform_network_init+0xf8>
 800b588:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b58c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b58e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800b592:	4553      	cmp	r3, sl
 800b594:	f8a4 b020 	strh.w	fp, [r4, #32]
 800b598:	d325      	bcc.n	800b5e6 <ai_platform_network_init+0x176>
 800b59a:	f1ba 0f00 	cmp.w	sl, #0
 800b59e:	d0be      	beq.n	800b51e <ai_platform_network_init+0xae>
 800b5a0:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 800b5a4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b5a8:	f04f 0c00 	mov.w	ip, #0
 800b5ac:	eb08 070c 	add.w	r7, r8, ip
 800b5b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5b4:	4466      	add	r6, ip
 800b5b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b5b8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b5bc:	f10c 0c1c 	add.w	ip, ip, #28
 800b5c0:	45f4      	cmp	ip, lr
 800b5c2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800b5c6:	d1f1      	bne.n	800b5ac <ai_platform_network_init+0x13c>
 800b5c8:	e7a9      	b.n	800b51e <ai_platform_network_init+0xae>
 800b5ca:	2212      	movs	r2, #18
 800b5cc:	2116      	movs	r1, #22
 800b5ce:	f104 000c 	add.w	r0, r4, #12
 800b5d2:	f000 fa93 	bl	800bafc <core_set_error>
 800b5d6:	2700      	movs	r7, #0
 800b5d8:	e76a      	b.n	800b4b0 <ai_platform_network_init+0x40>
 800b5da:	2211      	movs	r2, #17
 800b5dc:	2110      	movs	r1, #16
 800b5de:	300c      	adds	r0, #12
 800b5e0:	f000 fa8c 	bl	800bafc <core_set_error>
 800b5e4:	e764      	b.n	800b4b0 <ai_platform_network_init+0x40>
 800b5e6:	2213      	movs	r2, #19
 800b5e8:	2116      	movs	r1, #22
 800b5ea:	f104 000c 	add.w	r0, r4, #12
 800b5ee:	f000 fa85 	bl	800bafc <core_set_error>
 800b5f2:	2700      	movs	r7, #0
 800b5f4:	e75c      	b.n	800b4b0 <ai_platform_network_init+0x40>
 800b5f6:	2213      	movs	r2, #19
 800b5f8:	2110      	movs	r1, #16
 800b5fa:	f104 000c 	add.w	r0, r4, #12
 800b5fe:	f000 fa7d 	bl	800bafc <core_set_error>
 800b602:	e755      	b.n	800b4b0 <ai_platform_network_init+0x40>
 800b604:	a1c00100 	.word	0xa1c00100
 800b608:	a1facade 	.word	0xa1facade

0800b60c <ai_platform_network_post_init>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4b16      	ldr	r3, [pc, #88]	@ (800b668 <ai_platform_network_post_init+0x5c>)
 800b610:	6802      	ldr	r2, [r0, #0]
 800b612:	ea02 0103 	and.w	r1, r2, r3
 800b616:	4393      	bics	r3, r2
 800b618:	d108      	bne.n	800b62c <ai_platform_network_post_init+0x20>
 800b61a:	6903      	ldr	r3, [r0, #16]
 800b61c:	f013 0502 	ands.w	r5, r3, #2
 800b620:	4604      	mov	r4, r0
 800b622:	d005      	beq.n	800b630 <ai_platform_network_post_init+0x24>
 800b624:	428a      	cmp	r2, r1
 800b626:	d00a      	beq.n	800b63e <ai_platform_network_post_init+0x32>
 800b628:	2001      	movs	r0, #1
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	2000      	movs	r0, #0
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	2210      	movs	r2, #16
 800b632:	2111      	movs	r1, #17
 800b634:	300c      	adds	r0, #12
 800b636:	f000 fa61 	bl	800bafc <core_set_error>
 800b63a:	4628      	mov	r0, r5
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
 800b63e:	f000 faa1 	bl	800bb84 <ai_layers_post_init_all>
 800b642:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d0ef      	beq.n	800b628 <ai_platform_network_post_init+0x1c>
 800b648:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800b64a:	e008      	b.n	800b65e <ai_platform_network_post_init+0x52>
 800b64c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800b650:	4798      	blx	r3
 800b652:	692b      	ldr	r3, [r5, #16]
 800b654:	42ab      	cmp	r3, r5
 800b656:	d0e7      	beq.n	800b628 <ai_platform_network_post_init+0x1c>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0e5      	beq.n	800b628 <ai_platform_network_post_init+0x1c>
 800b65c:	461d      	mov	r5, r3
 800b65e:	4629      	mov	r1, r5
 800b660:	2000      	movs	r0, #0
 800b662:	2d00      	cmp	r5, #0
 800b664:	d1f2      	bne.n	800b64c <ai_platform_network_post_init+0x40>
 800b666:	e7df      	b.n	800b628 <ai_platform_network_post_init+0x1c>
 800b668:	a1c00100 	.word	0xa1c00100

0800b66c <ai_platform_network_process>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	4bb5      	ldr	r3, [pc, #724]	@ (800b948 <ai_platform_network_process+0x2dc>)
 800b672:	4605      	mov	r5, r0
 800b674:	6800      	ldr	r0, [r0, #0]
 800b676:	b085      	sub	sp, #20
 800b678:	4383      	bics	r3, r0
 800b67a:	9202      	str	r2, [sp, #8]
 800b67c:	f040 8140 	bne.w	800b900 <ai_platform_network_process+0x294>
 800b680:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 8125 	beq.w	800b8d2 <ai_platform_network_process+0x266>
 800b688:	692b      	ldr	r3, [r5, #16]
 800b68a:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800b68e:	f003 0303 	and.w	r3, r3, #3
 800b692:	2700      	movs	r7, #0
 800b694:	2b03      	cmp	r3, #3
 800b696:	61af      	str	r7, [r5, #24]
 800b698:	f040 8137 	bne.w	800b90a <ai_platform_network_process+0x29e>
 800b69c:	2900      	cmp	r1, #0
 800b69e:	f000 811e 	beq.w	800b8de <ai_platform_network_process+0x272>
 800b6a2:	f1ba 0f00 	cmp.w	sl, #0
 800b6a6:	f000 811a 	beq.w	800b8de <ai_platform_network_process+0x272>
 800b6aa:	f8ba 3000 	ldrh.w	r3, [sl]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 8115 	beq.w	800b8de <ai_platform_network_process+0x272>
 800b6b4:	698b      	ldr	r3, [r1, #24]
 800b6b6:	9503      	str	r5, [sp, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	460e      	mov	r6, r1
 800b6be:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d072      	beq.n	800b7ac <ai_platform_network_process+0x140>
 800b6c6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800b6ca:	2c00      	cmp	r4, #0
 800b6cc:	d06e      	beq.n	800b7ac <ai_platform_network_process+0x140>
 800b6ce:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b6d2:	f8d3 9000 	ldr.w	r9, [r3]
 800b6d6:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800b6da:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800b6de:	f000 81d3 	beq.w	800ba88 <ai_platform_network_process+0x41c>
 800b6e2:	69a3      	ldr	r3, [r4, #24]
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	685d      	ldr	r5, [r3, #4]
 800b6ea:	f7ff fc6b 	bl	800afc4 <ai_buffer_get_size>
 800b6ee:	4285      	cmp	r5, r0
 800b6f0:	f0c0 8116 	bcc.w	800b920 <ai_platform_network_process+0x2b4>
 800b6f4:	68e0      	ldr	r0, [r4, #12]
 800b6f6:	69b1      	ldr	r1, [r6, #24]
 800b6f8:	68c2      	ldr	r2, [r0, #12]
 800b6fa:	68cb      	ldr	r3, [r1, #12]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	f040 810f 	bne.w	800b920 <ai_platform_network_process+0x2b4>
 800b702:	6882      	ldr	r2, [r0, #8]
 800b704:	688b      	ldr	r3, [r1, #8]
 800b706:	429a      	cmp	r2, r3
 800b708:	f040 810a 	bne.w	800b920 <ai_platform_network_process+0x2b4>
 800b70c:	6842      	ldr	r2, [r0, #4]
 800b70e:	684b      	ldr	r3, [r1, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	f040 8105 	bne.w	800b920 <ai_platform_network_process+0x2b4>
 800b716:	69a3      	ldr	r3, [r4, #24]
 800b718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b71c:	f001 fcda 	bl	800d0d4 <ai_array_get_data_byte_size>
 800b720:	4605      	mov	r5, r0
 800b722:	4620      	mov	r0, r4
 800b724:	f001 fcee 	bl	800d104 <get_tensor_byte_size>
 800b728:	4285      	cmp	r5, r0
 800b72a:	f0c0 80f9 	bcc.w	800b920 <ai_platform_network_process+0x2b4>
 800b72e:	69a3      	ldr	r3, [r4, #24]
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	f001 fc37 	bl	800cfa4 <ai_array_to_buffer_fmt>
 800b736:	6833      	ldr	r3, [r6, #0]
 800b738:	4058      	eors	r0, r3
 800b73a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b73e:	f040 81a5 	bne.w	800ba8c <ai_platform_network_process+0x420>
 800b742:	6873      	ldr	r3, [r6, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 819f 	beq.w	800ba88 <ai_platform_network_process+0x41c>
 800b74a:	69b3      	ldr	r3, [r6, #24]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f000 81a5 	beq.w	800ba9e <ai_platform_network_process+0x432>
 800b754:	9a01      	ldr	r2, [sp, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	bf38      	it	cc
 800b75a:	461a      	movcc	r2, r3
 800b75c:	4620      	mov	r0, r4
 800b75e:	9201      	str	r2, [sp, #4]
 800b760:	f001 fcd0 	bl	800d104 <get_tensor_byte_size>
 800b764:	f8c8 0008 	str.w	r0, [r8, #8]
 800b768:	69b3      	ldr	r3, [r6, #24]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	fb00 f303 	mul.w	r3, r0, r3
 800b770:	f8c8 300c 	str.w	r3, [r8, #12]
 800b774:	6871      	ldr	r1, [r6, #4]
 800b776:	f8c8 1004 	str.w	r1, [r8, #4]
 800b77a:	440b      	add	r3, r1
 800b77c:	f849 300b 	str.w	r3, [r9, fp]
 800b780:	69a0      	ldr	r0, [r4, #24]
 800b782:	6803      	ldr	r3, [r0, #0]
 800b784:	009a      	lsls	r2, r3, #2
 800b786:	f107 0701 	add.w	r7, r7, #1
 800b78a:	f106 061c 	add.w	r6, r6, #28
 800b78e:	f100 80b1 	bmi.w	800b8f4 <ai_platform_network_process+0x288>
 800b792:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b796:	1a9b      	subs	r3, r3, r2
 800b798:	4419      	add	r1, r3
 800b79a:	6081      	str	r1, [r0, #8]
 800b79c:	69a3      	ldr	r3, [r4, #24]
 800b79e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b7a2:	60da      	str	r2, [r3, #12]
 800b7a4:	f8ba 3000 	ldrh.w	r3, [sl]
 800b7a8:	42bb      	cmp	r3, r7
 800b7aa:	d888      	bhi.n	800b6be <ai_platform_network_process+0x52>
 800b7ac:	9d03      	ldr	r5, [sp, #12]
 800b7ae:	9b02      	ldr	r3, [sp, #8]
 800b7b0:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 817c 	beq.w	800bab0 <ai_platform_network_process+0x444>
 800b7b8:	2a01      	cmp	r2, #1
 800b7ba:	f240 80bd 	bls.w	800b938 <ai_platform_network_process+0x2cc>
 800b7be:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 800b7c2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 80b6 	beq.w	800b938 <ai_platform_network_process+0x2cc>
 800b7cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b7d0:	2700      	movs	r7, #0
 800b7d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 80bd 	beq.w	800b956 <ai_platform_network_process+0x2ea>
 800b7dc:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b7e0:	2e00      	cmp	r6, #0
 800b7e2:	f000 80b8 	beq.w	800b956 <ai_platform_network_process+0x2ea>
 800b7e6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b7ea:	681c      	ldr	r4, [r3, #0]
 800b7ec:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800b7f0:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800b7f4:	f000 8160 	beq.w	800bab8 <ai_platform_network_process+0x44c>
 800b7f8:	69b3      	ldr	r3, [r6, #24]
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	9302      	str	r3, [sp, #8]
 800b800:	4658      	mov	r0, fp
 800b802:	f7ff fbdf 	bl	800afc4 <ai_buffer_get_size>
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	4283      	cmp	r3, r0
 800b80a:	f0c0 8095 	bcc.w	800b938 <ai_platform_network_process+0x2cc>
 800b80e:	68f0      	ldr	r0, [r6, #12]
 800b810:	f8db 1018 	ldr.w	r1, [fp, #24]
 800b814:	68c2      	ldr	r2, [r0, #12]
 800b816:	68cb      	ldr	r3, [r1, #12]
 800b818:	429a      	cmp	r2, r3
 800b81a:	f040 808d 	bne.w	800b938 <ai_platform_network_process+0x2cc>
 800b81e:	6882      	ldr	r2, [r0, #8]
 800b820:	688b      	ldr	r3, [r1, #8]
 800b822:	429a      	cmp	r2, r3
 800b824:	f040 8088 	bne.w	800b938 <ai_platform_network_process+0x2cc>
 800b828:	6842      	ldr	r2, [r0, #4]
 800b82a:	684b      	ldr	r3, [r1, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	f040 8083 	bne.w	800b938 <ai_platform_network_process+0x2cc>
 800b832:	69b3      	ldr	r3, [r6, #24]
 800b834:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b838:	f001 fc4c 	bl	800d0d4 <ai_array_get_data_byte_size>
 800b83c:	9002      	str	r0, [sp, #8]
 800b83e:	4630      	mov	r0, r6
 800b840:	f001 fc60 	bl	800d104 <get_tensor_byte_size>
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	4283      	cmp	r3, r0
 800b848:	d376      	bcc.n	800b938 <ai_platform_network_process+0x2cc>
 800b84a:	69b3      	ldr	r3, [r6, #24]
 800b84c:	6818      	ldr	r0, [r3, #0]
 800b84e:	f001 fba9 	bl	800cfa4 <ai_array_to_buffer_fmt>
 800b852:	f8db 3000 	ldr.w	r3, [fp]
 800b856:	4058      	eors	r0, r3
 800b858:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b85c:	f040 8134 	bne.w	800bac8 <ai_platform_network_process+0x45c>
 800b860:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 8127 	beq.w	800bab8 <ai_platform_network_process+0x44c>
 800b86a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 8133 	beq.w	800badc <ai_platform_network_process+0x470>
 800b876:	9a01      	ldr	r2, [sp, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	bf38      	it	cc
 800b87c:	461a      	movcc	r2, r3
 800b87e:	4630      	mov	r0, r6
 800b880:	9201      	str	r2, [sp, #4]
 800b882:	f001 fc3f 	bl	800d104 <get_tensor_byte_size>
 800b886:	f8c9 0008 	str.w	r0, [r9, #8]
 800b88a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	fb00 f303 	mul.w	r3, r0, r3
 800b894:	f8c9 300c 	str.w	r3, [r9, #12]
 800b898:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b89c:	f8c9 1004 	str.w	r1, [r9, #4]
 800b8a0:	440b      	add	r3, r1
 800b8a2:	f844 300a 	str.w	r3, [r4, sl]
 800b8a6:	69b0      	ldr	r0, [r6, #24]
 800b8a8:	6803      	ldr	r3, [r0, #0]
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	f107 0701 	add.w	r7, r7, #1
 800b8b0:	f10b 0b1c 	add.w	fp, fp, #28
 800b8b4:	d44a      	bmi.n	800b94c <ai_platform_network_process+0x2e0>
 800b8b6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b8ba:	1a9b      	subs	r3, r3, r2
 800b8bc:	4419      	add	r1, r3
 800b8be:	6081      	str	r1, [r0, #8]
 800b8c0:	69b3      	ldr	r3, [r6, #24]
 800b8c2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b8c6:	60da      	str	r2, [r3, #12]
 800b8c8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b8cc:	42bb      	cmp	r3, r7
 800b8ce:	d880      	bhi.n	800b7d2 <ai_platform_network_process+0x166>
 800b8d0:	e041      	b.n	800b956 <ai_platform_network_process+0x2ea>
 800b8d2:	692a      	ldr	r2, [r5, #16]
 800b8d4:	61ab      	str	r3, [r5, #24]
 800b8d6:	f002 0203 	and.w	r2, r2, #3
 800b8da:	2a03      	cmp	r2, #3
 800b8dc:	d115      	bne.n	800b90a <ai_platform_network_process+0x29e>
 800b8de:	2217      	movs	r2, #23
 800b8e0:	2112      	movs	r1, #18
 800b8e2:	f105 000c 	add.w	r0, r5, #12
 800b8e6:	f000 f909 	bl	800bafc <core_set_error>
 800b8ea:	2400      	movs	r4, #0
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	b005      	add	sp, #20
 800b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f4:	f8ba 3000 	ldrh.w	r3, [sl]
 800b8f8:	429f      	cmp	r7, r3
 800b8fa:	f4ff aee0 	bcc.w	800b6be <ai_platform_network_process+0x52>
 800b8fe:	e755      	b.n	800b7ac <ai_platform_network_process+0x140>
 800b900:	2400      	movs	r4, #0
 800b902:	4620      	mov	r0, r4
 800b904:	b005      	add	sp, #20
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	2230      	movs	r2, #48	@ 0x30
 800b90c:	2111      	movs	r1, #17
 800b90e:	f105 000c 	add.w	r0, r5, #12
 800b912:	f000 f8f3 	bl	800bafc <core_set_error>
 800b916:	2400      	movs	r4, #0
 800b918:	4620      	mov	r0, r4
 800b91a:	b005      	add	sp, #20
 800b91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b920:	9d03      	ldr	r5, [sp, #12]
 800b922:	2218      	movs	r2, #24
 800b924:	2112      	movs	r1, #18
 800b926:	f105 000c 	add.w	r0, r5, #12
 800b92a:	f000 f8e7 	bl	800bafc <core_set_error>
 800b92e:	2400      	movs	r4, #0
 800b930:	4620      	mov	r0, r4
 800b932:	b005      	add	sp, #20
 800b934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b938:	2218      	movs	r2, #24
 800b93a:	2113      	movs	r1, #19
 800b93c:	f105 000c 	add.w	r0, r5, #12
 800b940:	f000 f8dc 	bl	800bafc <core_set_error>
 800b944:	2400      	movs	r4, #0
 800b946:	e7d1      	b.n	800b8ec <ai_platform_network_process+0x280>
 800b948:	a1c00100 	.word	0xa1c00100
 800b94c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b950:	429f      	cmp	r7, r3
 800b952:	f4ff af3e 	bcc.w	800b7d2 <ai_platform_network_process+0x166>
 800b956:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b95a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b95c:	832b      	strh	r3, [r5, #24]
 800b95e:	2a00      	cmp	r2, #0
 800b960:	f040 808c 	bne.w	800ba7c <ai_platform_network_process+0x410>
 800b964:	4616      	mov	r6, r2
 800b966:	4617      	mov	r7, r2
 800b968:	8b6c      	ldrh	r4, [r5, #26]
 800b96a:	429c      	cmp	r4, r3
 800b96c:	bf38      	it	cc
 800b96e:	46ab      	movcc	fp, r5
 800b970:	d2bc      	bcs.n	800b8ec <ai_platform_network_process+0x280>
 800b972:	2e00      	cmp	r6, #0
 800b974:	d030      	beq.n	800b9d8 <ai_platform_network_process+0x36c>
 800b976:	f04f 0800 	mov.w	r8, #0
 800b97a:	e014      	b.n	800b9a6 <ai_platform_network_process+0x33a>
 800b97c:	6882      	ldr	r2, [r0, #8]
 800b97e:	68c5      	ldr	r5, [r0, #12]
 800b980:	6863      	ldr	r3, [r4, #4]
 800b982:	1b52      	subs	r2, r2, r5
 800b984:	4413      	add	r3, r2
 800b986:	6083      	str	r3, [r0, #8]
 800b988:	698b      	ldr	r3, [r1, #24]
 800b98a:	6862      	ldr	r2, [r4, #4]
 800b98c:	60da      	str	r2, [r3, #12]
 800b98e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800b992:	f859 200a 	ldr.w	r2, [r9, sl]
 800b996:	440b      	add	r3, r1
 800b998:	4293      	cmp	r3, r2
 800b99a:	bf24      	itt	cs
 800b99c:	68e3      	ldrcs	r3, [r4, #12]
 800b99e:	1ad3      	subcs	r3, r2, r3
 800b9a0:	6063      	str	r3, [r4, #4]
 800b9a2:	f108 0801 	add.w	r8, r8, #1
 800b9a6:	8833      	ldrh	r3, [r6, #0]
 800b9a8:	4543      	cmp	r3, r8
 800b9aa:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800b9ae:	d913      	bls.n	800b9d8 <ai_platform_network_process+0x36c>
 800b9b0:	6873      	ldr	r3, [r6, #4]
 800b9b2:	b18b      	cbz	r3, 800b9d8 <ai_platform_network_process+0x36c>
 800b9b4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800b9b8:	b171      	cbz	r1, 800b9d8 <ai_platform_network_process+0x36c>
 800b9ba:	6988      	ldr	r0, [r1, #24]
 800b9bc:	68b2      	ldr	r2, [r6, #8]
 800b9be:	6803      	ldr	r3, [r0, #0]
 800b9c0:	f8d2 9000 	ldr.w	r9, [r2]
 800b9c4:	009d      	lsls	r5, r3, #2
 800b9c6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800b9ca:	d5d7      	bpl.n	800b97c <ai_platform_network_process+0x310>
 800b9cc:	6881      	ldr	r1, [r0, #8]
 800b9ce:	68a2      	ldr	r2, [r4, #8]
 800b9d0:	6860      	ldr	r0, [r4, #4]
 800b9d2:	f001 fa61 	bl	800ce98 <st_int8_copy>
 800b9d6:	e7da      	b.n	800b98e <ai_platform_network_process+0x322>
 800b9d8:	4658      	mov	r0, fp
 800b9da:	f000 f8e7 	bl	800bbac <ai_layers_forward_all>
 800b9de:	2f00      	cmp	r7, #0
 800b9e0:	d03d      	beq.n	800ba5e <ai_platform_network_process+0x3f2>
 800b9e2:	2400      	movs	r4, #0
 800b9e4:	e016      	b.n	800ba14 <ai_platform_network_process+0x3a8>
 800b9e6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800b9ea:	f859 100a 	ldr.w	r1, [r9, sl]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	428b      	cmp	r3, r1
 800b9f2:	bf24      	itt	cs
 800b9f4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800b9f8:	1acb      	subcs	r3, r1, r3
 800b9fa:	f8c8 3004 	str.w	r3, [r8, #4]
 800b9fe:	6981      	ldr	r1, [r0, #24]
 800ba00:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800ba04:	1b52      	subs	r2, r2, r5
 800ba06:	4413      	add	r3, r2
 800ba08:	608b      	str	r3, [r1, #8]
 800ba0a:	6983      	ldr	r3, [r0, #24]
 800ba0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ba10:	60da      	str	r2, [r3, #12]
 800ba12:	3401      	adds	r4, #1
 800ba14:	883b      	ldrh	r3, [r7, #0]
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	d921      	bls.n	800ba5e <ai_platform_network_process+0x3f2>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	b1fb      	cbz	r3, 800ba5e <ai_platform_network_process+0x3f2>
 800ba1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ba22:	b1e0      	cbz	r0, 800ba5e <ai_platform_network_process+0x3f2>
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	6983      	ldr	r3, [r0, #24]
 800ba28:	f8d2 9000 	ldr.w	r9, [r2]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	0092      	lsls	r2, r2, #2
 800ba30:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800ba34:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800ba38:	d5d5      	bpl.n	800b9e6 <ai_platform_network_process+0x37a>
 800ba3a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800ba3e:	6898      	ldr	r0, [r3, #8]
 800ba40:	f001 fa2a 	bl	800ce98 <st_int8_copy>
 800ba44:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800ba48:	f859 200a 	ldr.w	r2, [r9, sl]
 800ba4c:	440b      	add	r3, r1
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	bf24      	itt	cs
 800ba52:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800ba56:	1ad3      	subcs	r3, r2, r3
 800ba58:	f8c8 3004 	str.w	r3, [r8, #4]
 800ba5c:	e7d9      	b.n	800ba12 <ai_platform_network_process+0x3a6>
 800ba5e:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800ba62:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800ba66:	3401      	adds	r4, #1
 800ba68:	b2a4      	uxth	r4, r4
 800ba6a:	42a3      	cmp	r3, r4
 800ba6c:	f8ab 401a 	strh.w	r4, [fp, #26]
 800ba70:	f63f af7f 	bhi.w	800b972 <ai_platform_network_process+0x306>
 800ba74:	4620      	mov	r0, r4
 800ba76:	b005      	add	sp, #20
 800ba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7c:	2a01      	cmp	r2, #1
 800ba7e:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800ba80:	d02a      	beq.n	800bad8 <ai_platform_network_process+0x46c>
 800ba82:	f106 070c 	add.w	r7, r6, #12
 800ba86:	e76f      	b.n	800b968 <ai_platform_network_process+0x2fc>
 800ba88:	9d03      	ldr	r5, [sp, #12]
 800ba8a:	e728      	b.n	800b8de <ai_platform_network_process+0x272>
 800ba8c:	9d03      	ldr	r5, [sp, #12]
 800ba8e:	2219      	movs	r2, #25
 800ba90:	2112      	movs	r1, #18
 800ba92:	f105 000c 	add.w	r0, r5, #12
 800ba96:	f000 f831 	bl	800bafc <core_set_error>
 800ba9a:	2400      	movs	r4, #0
 800ba9c:	e726      	b.n	800b8ec <ai_platform_network_process+0x280>
 800ba9e:	9d03      	ldr	r5, [sp, #12]
 800baa0:	4604      	mov	r4, r0
 800baa2:	2221      	movs	r2, #33	@ 0x21
 800baa4:	2112      	movs	r1, #18
 800baa6:	f105 000c 	add.w	r0, r5, #12
 800baaa:	f000 f827 	bl	800bafc <core_set_error>
 800baae:	e71d      	b.n	800b8ec <ai_platform_network_process+0x280>
 800bab0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bab4:	832b      	strh	r3, [r5, #24]
 800bab6:	e752      	b.n	800b95e <ai_platform_network_process+0x2f2>
 800bab8:	2217      	movs	r2, #23
 800baba:	2113      	movs	r1, #19
 800babc:	f105 000c 	add.w	r0, r5, #12
 800bac0:	f000 f81c 	bl	800bafc <core_set_error>
 800bac4:	2400      	movs	r4, #0
 800bac6:	e711      	b.n	800b8ec <ai_platform_network_process+0x280>
 800bac8:	2219      	movs	r2, #25
 800baca:	2113      	movs	r1, #19
 800bacc:	f105 000c 	add.w	r0, r5, #12
 800bad0:	f000 f814 	bl	800bafc <core_set_error>
 800bad4:	2400      	movs	r4, #0
 800bad6:	e709      	b.n	800b8ec <ai_platform_network_process+0x280>
 800bad8:	2700      	movs	r7, #0
 800bada:	e745      	b.n	800b968 <ai_platform_network_process+0x2fc>
 800badc:	4604      	mov	r4, r0
 800bade:	2221      	movs	r2, #33	@ 0x21
 800bae0:	2113      	movs	r1, #19
 800bae2:	f105 000c 	add.w	r0, r5, #12
 800bae6:	f000 f809 	bl	800bafc <core_set_error>
 800baea:	e6ff      	b.n	800b8ec <ai_platform_network_process+0x280>

0800baec <core_init>:
 800baec:	2001      	movs	r0, #1
 800baee:	4770      	bx	lr

0800baf0 <core_get_error>:
 800baf0:	4603      	mov	r3, r0
 800baf2:	2200      	movs	r2, #0
 800baf4:	6800      	ldr	r0, [r0, #0]
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop

0800bafc <core_set_error>:
 800bafc:	4603      	mov	r3, r0
 800bafe:	7800      	ldrb	r0, [r0, #0]
 800bb00:	b108      	cbz	r0, 800bb06 <core_set_error+0xa>
 800bb02:	2000      	movs	r0, #0
 800bb04:	4770      	bx	lr
 800bb06:	7019      	strb	r1, [r3, #0]
 800bb08:	6819      	ldr	r1, [r3, #0]
 800bb0a:	f362 211f 	bfi	r1, r2, #8, #24
 800bb0e:	2001      	movs	r0, #1
 800bb10:	6019      	str	r1, [r3, #0]
 800bb12:	4770      	bx	lr

0800bb14 <ai_check_custom_types>:
 800bb14:	b082      	sub	sp, #8
 800bb16:	4b13      	ldr	r3, [pc, #76]	@ (800bb64 <ai_check_custom_types+0x50>)
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	b118      	cbz	r0, 800bb24 <ai_check_custom_types+0x10>
 800bb1c:	7803      	ldrb	r3, [r0, #0]
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d002      	beq.n	800bb28 <ai_check_custom_types+0x14>
 800bb22:	2000      	movs	r0, #0
 800bb24:	b002      	add	sp, #8
 800bb26:	4770      	bx	lr
 800bb28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d004      	beq.n	800bb3a <ai_check_custom_types+0x26>
 800bb30:	2001      	movs	r0, #1
 800bb32:	f080 0001 	eor.w	r0, r0, #1
 800bb36:	b002      	add	sp, #8
 800bb38:	4770      	bx	lr
 800bb3a:	7842      	ldrb	r2, [r0, #1]
 800bb3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	f100 0001 	add.w	r0, r0, #1
 800bb46:	d1f3      	bne.n	800bb30 <ai_check_custom_types+0x1c>
 800bb48:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bb4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d1ed      	bne.n	800bb30 <ai_check_custom_types+0x1c>
 800bb54:	7842      	ldrb	r2, [r0, #1]
 800bb56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d1e8      	bne.n	800bb30 <ai_check_custom_types+0x1c>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e7e7      	b.n	800bb32 <ai_check_custom_types+0x1e>
 800bb62:	bf00      	nop
 800bb64:	84048403 	.word	0x84048403

0800bb68 <ai_layers_init_all>:
 800bb68:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	b143      	cbz	r3, 800bb80 <ai_layers_init_all+0x18>
 800bb6e:	691a      	ldr	r2, [r3, #16]
 800bb70:	60d8      	str	r0, [r3, #12]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	f101 0101 	add.w	r1, r1, #1
 800bb78:	d002      	beq.n	800bb80 <ai_layers_init_all+0x18>
 800bb7a:	b10a      	cbz	r2, 800bb80 <ai_layers_init_all+0x18>
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	e7f5      	b.n	800bb6c <ai_layers_init_all+0x4>
 800bb80:	4608      	mov	r0, r1
 800bb82:	4770      	bx	lr

0800bb84 <ai_layers_post_init_all>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800bb88:	2500      	movs	r5, #0
 800bb8a:	b16c      	cbz	r4, 800bba8 <ai_layers_post_init_all+0x24>
 800bb8c:	6863      	ldr	r3, [r4, #4]
 800bb8e:	07db      	lsls	r3, r3, #31
 800bb90:	d504      	bpl.n	800bb9c <ai_layers_post_init_all+0x18>
 800bb92:	6a23      	ldr	r3, [r4, #32]
 800bb94:	4620      	mov	r0, r4
 800bb96:	b10b      	cbz	r3, 800bb9c <ai_layers_post_init_all+0x18>
 800bb98:	4798      	blx	r3
 800bb9a:	3501      	adds	r5, #1
 800bb9c:	6923      	ldr	r3, [r4, #16]
 800bb9e:	42a3      	cmp	r3, r4
 800bba0:	d002      	beq.n	800bba8 <ai_layers_post_init_all+0x24>
 800bba2:	b10b      	cbz	r3, 800bba8 <ai_layers_post_init_all+0x24>
 800bba4:	461c      	mov	r4, r3
 800bba6:	e7f0      	b.n	800bb8a <ai_layers_post_init_all+0x6>
 800bba8:	4628      	mov	r0, r5
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}

0800bbac <ai_layers_forward_all>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	f1b8 0f00 	cmp.w	r8, #0
 800bbba:	d02b      	beq.n	800bc14 <ai_layers_forward_all+0x68>
 800bbbc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800bbbe:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800bbc0:	b321      	cbz	r1, 800bc0c <ai_layers_forward_all+0x60>
 800bbc2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	47c0      	blx	r8
 800bbc8:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800bbca:	b1fe      	cbz	r6, 800bc0c <ai_layers_forward_all+0x60>
 800bbcc:	2700      	movs	r7, #0
 800bbce:	4631      	mov	r1, r6
 800bbd0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800bbd2:	2002      	movs	r0, #2
 800bbd4:	47c0      	blx	r8
 800bbd6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800bbd8:	4628      	mov	r0, r5
 800bbda:	696b      	ldr	r3, [r5, #20]
 800bbdc:	4798      	blx	r3
 800bbde:	692e      	ldr	r6, [r5, #16]
 800bbe0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800bbe2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800bbe4:	42b5      	cmp	r5, r6
 800bbe6:	f04f 0003 	mov.w	r0, #3
 800bbea:	d007      	beq.n	800bbfc <ai_layers_forward_all+0x50>
 800bbec:	47c0      	blx	r8
 800bbee:	3701      	adds	r7, #1
 800bbf0:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	d1eb      	bne.n	800bbce <ai_layers_forward_all+0x22>
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfc:	2003      	movs	r0, #3
 800bbfe:	47c0      	blx	r8
 800bc00:	2300      	movs	r3, #0
 800bc02:	3701      	adds	r7, #1
 800bc04:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800bc06:	4638      	mov	r0, r7
 800bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0c:	2700      	movs	r7, #0
 800bc0e:	4638      	mov	r0, r7
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800bc16:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800bc18:	2d00      	cmp	r5, #0
 800bc1a:	d0f7      	beq.n	800bc0c <ai_layers_forward_all+0x60>
 800bc1c:	4647      	mov	r7, r8
 800bc1e:	696b      	ldr	r3, [r5, #20]
 800bc20:	4628      	mov	r0, r5
 800bc22:	4798      	blx	r3
 800bc24:	462b      	mov	r3, r5
 800bc26:	692d      	ldr	r5, [r5, #16]
 800bc28:	429d      	cmp	r5, r3
 800bc2a:	d004      	beq.n	800bc36 <ai_layers_forward_all+0x8a>
 800bc2c:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800bc2e:	3701      	adds	r7, #1
 800bc30:	2d00      	cmp	r5, #0
 800bc32:	d1f4      	bne.n	800bc1e <ai_layers_forward_all+0x72>
 800bc34:	e7df      	b.n	800bbf6 <ai_layers_forward_all+0x4a>
 800bc36:	2300      	movs	r3, #0
 800bc38:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800bc3a:	3701      	adds	r7, #1
 800bc3c:	e7db      	b.n	800bbf6 <ai_layers_forward_all+0x4a>
 800bc3e:	bf00      	nop

0800bc40 <forward_conv2d_if32of32wf32>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	6983      	ldr	r3, [r0, #24]
 800bc46:	881d      	ldrh	r5, [r3, #0]
 800bc48:	b0a7      	sub	sp, #156	@ 0x9c
 800bc4a:	2d00      	cmp	r5, #0
 800bc4c:	f000 80a2 	beq.w	800bd94 <forward_conv2d_if32of32wf32+0x154>
 800bc50:	685e      	ldr	r6, [r3, #4]
 800bc52:	6872      	ldr	r2, [r6, #4]
 800bc54:	4680      	mov	r8, r0
 800bc56:	b102      	cbz	r2, 800bc5a <forward_conv2d_if32of32wf32+0x1a>
 800bc58:	6812      	ldr	r2, [r2, #0]
 800bc5a:	2d01      	cmp	r5, #1
 800bc5c:	f000 8097 	beq.w	800bd8e <forward_conv2d_if32of32wf32+0x14e>
 800bc60:	6931      	ldr	r1, [r6, #16]
 800bc62:	b101      	cbz	r1, 800bc66 <forward_conv2d_if32of32wf32+0x26>
 800bc64:	6809      	ldr	r1, [r1, #0]
 800bc66:	2d02      	cmp	r5, #2
 800bc68:	f000 8091 	beq.w	800bd8e <forward_conv2d_if32of32wf32+0x14e>
 800bc6c:	69f3      	ldr	r3, [r6, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 80c5 	beq.w	800bdfe <forward_conv2d_if32of32wf32+0x1be>
 800bc74:	8b30      	ldrh	r0, [r6, #24]
 800bc76:	681c      	ldr	r4, [r3, #0]
 800bc78:	2801      	cmp	r0, #1
 800bc7a:	f240 80c2 	bls.w	800be02 <forward_conv2d_if32of32wf32+0x1c2>
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800bc84:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800bc88:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bc8c:	9015      	str	r0, [sp, #84]	@ 0x54
 800bc8e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800bc92:	9016      	str	r0, [sp, #88]	@ 0x58
 800bc94:	f8da 000c 	ldr.w	r0, [sl, #12]
 800bc98:	9017      	str	r0, [sp, #92]	@ 0x5c
 800bc9a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800bc9e:	9018      	str	r0, [sp, #96]	@ 0x60
 800bca0:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800bca4:	9019      	str	r0, [sp, #100]	@ 0x64
 800bca6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800bcaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800bcac:	f8b8 0028 	ldrh.w	r0, [r8, #40]	@ 0x28
 800bcb0:	6992      	ldr	r2, [r2, #24]
 800bcb2:	f8d8 e03c 	ldr.w	lr, [r8, #60]	@ 0x3c
 800bcb6:	901b      	str	r0, [sp, #108]	@ 0x6c
 800bcb8:	f8b8 002c 	ldrh.w	r0, [r8, #44]	@ 0x2c
 800bcbc:	901c      	str	r0, [sp, #112]	@ 0x70
 800bcbe:	f8d8 001c 	ldr.w	r0, [r8, #28]
 800bcc2:	edd2 7a02 	vldr	s15, [r2, #8]
 800bcc6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800bcca:	9021      	str	r0, [sp, #132]	@ 0x84
 800bccc:	e9d8 270c 	ldrd	r2, r7, [r8, #48]	@ 0x30
 800bcd0:	f8be 0000 	ldrh.w	r0, [lr]
 800bcd4:	69a4      	ldr	r4, [r4, #24]
 800bcd6:	901d      	str	r0, [sp, #116]	@ 0x74
 800bcd8:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800bcdc:	901e      	str	r0, [sp, #120]	@ 0x78
 800bcde:	e9dc ab01 	ldrd	sl, fp, [ip, #4]
 800bce2:	68a0      	ldr	r0, [r4, #8]
 800bce4:	9023      	str	r0, [sp, #140]	@ 0x8c
 800bce6:	b290      	uxth	r0, r2
 800bce8:	901f      	str	r0, [sp, #124]	@ 0x7c
 800bcea:	b2b8      	uxth	r0, r7
 800bcec:	9020      	str	r0, [sp, #128]	@ 0x80
 800bcee:	b10b      	cbz	r3, 800bcf4 <forward_conv2d_if32of32wf32+0xb4>
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	6989      	ldr	r1, [r1, #24]
 800bcf6:	b2bf      	uxth	r7, r7
 800bcf8:	3f01      	subs	r7, #1
 800bcfa:	f10b 3cff 	add.w	ip, fp, #4294967295
 800bcfe:	fb0c b707 	mla	r7, ip, r7, fp
 800bd02:	b292      	uxth	r2, r2
 800bd04:	3a01      	subs	r2, #1
 800bd06:	9713      	str	r7, [sp, #76]	@ 0x4c
 800bd08:	f10a 37ff 	add.w	r7, sl, #4294967295
 800bd0c:	fb07 a202 	mla	r2, r7, r2, sl
 800bd10:	2d03      	cmp	r5, #3
 800bd12:	6889      	ldr	r1, [r1, #8]
 800bd14:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd16:	d03a      	beq.n	800bd8e <forward_conv2d_if32of32wf32+0x14e>
 800bd18:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	d05f      	beq.n	800bdde <forward_conv2d_if32of32wf32+0x19e>
 800bd1e:	6812      	ldr	r2, [r2, #0]
 800bd20:	2a00      	cmp	r2, #0
 800bd22:	d05c      	beq.n	800bdde <forward_conv2d_if32of32wf32+0x19e>
 800bd24:	6826      	ldr	r6, [r4, #0]
 800bd26:	6997      	ldr	r7, [r2, #24]
 800bd28:	f3c6 4543 	ubfx	r5, r6, #17, #4
 800bd2c:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800bd30:	fa42 f505 	asr.w	r5, r2, r5
 800bd34:	07e8      	lsls	r0, r5, #31
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	d52e      	bpl.n	800bd98 <forward_conv2d_if32of32wf32+0x158>
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	d058      	beq.n	800bdf0 <forward_conv2d_if32of32wf32+0x1b0>
 800bd3e:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800bd40:	940e      	str	r4, [sp, #56]	@ 0x38
 800bd42:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800bd44:	940d      	str	r4, [sp, #52]	@ 0x34
 800bd46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bd48:	940c      	str	r4, [sp, #48]	@ 0x30
 800bd4a:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800bd4c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd4e:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800bd50:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd52:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 800bd54:	9409      	str	r4, [sp, #36]	@ 0x24
 800bd56:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 800bd58:	f8cd a018 	str.w	sl, [sp, #24]
 800bd5c:	e9cd b407 	strd	fp, r4, [sp, #28]
 800bd60:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800bd62:	9405      	str	r4, [sp, #20]
 800bd64:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800bd66:	9404      	str	r4, [sp, #16]
 800bd68:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bd6a:	9403      	str	r4, [sp, #12]
 800bd6c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800bd6e:	9402      	str	r4, [sp, #8]
 800bd70:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800bd72:	9401      	str	r4, [sp, #4]
 800bd74:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800bd76:	9400      	str	r4, [sp, #0]
 800bd78:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 800bd7a:	9410      	str	r4, [sp, #64]	@ 0x40
 800bd7c:	ee17 0a90 	vmov	r0, s15
 800bd80:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 800bd82:	940f      	str	r4, [sp, #60]	@ 0x3c
 800bd84:	f000 fd50 	bl	800c828 <forward_lite_conv2d_if32of32wf32>
 800bd88:	b027      	add	sp, #156	@ 0x9c
 800bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8e:	2300      	movs	r3, #0
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	deff      	udf	#255	@ 0xff
 800bd94:	686b      	ldr	r3, [r5, #4]
 800bd96:	deff      	udf	#255	@ 0xff
 800bd98:	68e5      	ldr	r5, [r4, #12]
 800bd9a:	2d00      	cmp	r5, #0
 800bd9c:	d0cd      	beq.n	800bd3a <forward_conv2d_if32of32wf32+0xfa>
 800bd9e:	687c      	ldr	r4, [r7, #4]
 800bda0:	f3c6 17c6 	ubfx	r7, r6, #7, #7
 800bda4:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 800bda8:	f3c6 5441 	ubfx	r4, r6, #21, #2
 800bdac:	fa47 f404 	asr.w	r4, r7, r4
 800bdb0:	2c04      	cmp	r4, #4
 800bdb2:	b2a6      	uxth	r6, r4
 800bdb4:	d027      	beq.n	800be06 <forward_conv2d_if32of32wf32+0x1c6>
 800bdb6:	2e08      	cmp	r6, #8
 800bdb8:	d1bf      	bne.n	800bd3a <forward_conv2d_if32of32wf32+0xfa>
 800bdba:	454a      	cmp	r2, r9
 800bdbc:	d2bd      	bcs.n	800bd3a <forward_conv2d_if32of32wf32+0xfa>
 800bdbe:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800bdc0:	ee17 0a90 	vmov	r0, s15
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	f817 4b01 	ldrb.w	r4, [r7], #1
 800bdca:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800bdce:	6824      	ldr	r4, [r4, #0]
 800bdd0:	f846 4b04 	str.w	r4, [r6], #4
 800bdd4:	45b1      	cmp	r9, r6
 800bdd6:	d8f6      	bhi.n	800bdc6 <forward_conv2d_if32of32wf32+0x186>
 800bdd8:	ee07 0a90 	vmov	s15, r0
 800bddc:	e7ad      	b.n	800bd3a <forward_conv2d_if32of32wf32+0xfa>
 800bdde:	6822      	ldr	r2, [r4, #0]
 800bde0:	f46f 7588 	mvn.w	r5, #272	@ 0x110
 800bde4:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800bde8:	4115      	asrs	r5, r2
 800bdea:	f015 0501 	ands.w	r5, r5, #1
 800bdee:	d001      	beq.n	800bdf4 <forward_conv2d_if32of32wf32+0x1b4>
 800bdf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bdf2:	e7a4      	b.n	800bd3e <forward_conv2d_if32of32wf32+0xfe>
 800bdf4:	68e2      	ldr	r2, [r4, #12]
 800bdf6:	2a00      	cmp	r2, #0
 800bdf8:	d0fa      	beq.n	800bdf0 <forward_conv2d_if32of32wf32+0x1b0>
 800bdfa:	69ab      	ldr	r3, [r5, #24]
 800bdfc:	deff      	udf	#255	@ 0xff
 800bdfe:	461c      	mov	r4, r3
 800be00:	e73e      	b.n	800bc80 <forward_conv2d_if32of32wf32+0x40>
 800be02:	2300      	movs	r3, #0
 800be04:	e73c      	b.n	800bc80 <forward_conv2d_if32of32wf32+0x40>
 800be06:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800be08:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
 800be0c:	0860      	lsrs	r0, r4, #1
 800be0e:	f004 0401 	and.w	r4, r4, #1
 800be12:	9012      	str	r0, [sp, #72]	@ 0x48
 800be14:	9422      	str	r4, [sp, #136]	@ 0x88
 800be16:	00c4      	lsls	r4, r0, #3
 800be18:	3801      	subs	r0, #1
 800be1a:	9424      	str	r4, [sp, #144]	@ 0x90
 800be1c:	9025      	str	r0, [sp, #148]	@ 0x94
 800be1e:	4654      	mov	r4, sl
 800be20:	ee17 0a90 	vmov	r0, s15
 800be24:	4617      	mov	r7, r2
 800be26:	4692      	mov	sl, r2
 800be28:	461a      	mov	r2, r3
 800be2a:	4623      	mov	r3, r4
 800be2c:	45b9      	cmp	r9, r7
 800be2e:	d93b      	bls.n	800bea8 <forward_conv2d_if32of32wf32+0x268>
 800be30:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800be32:	b37c      	cbz	r4, 800be94 <forward_conv2d_if32of32wf32+0x254>
 800be34:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800be36:	f108 3cff 	add.w	ip, r8, #4294967295
 800be3a:	eb08 0e04 	add.w	lr, r8, r4
 800be3e:	f107 0608 	add.w	r6, r7, #8
 800be42:	4664      	mov	r4, ip
 800be44:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800be48:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800be4c:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800be50:	4574      	cmp	r4, lr
 800be52:	f8dc c000 	ldr.w	ip, [ip]
 800be56:	f846 cc08 	str.w	ip, [r6, #-8]
 800be5a:	f894 c000 	ldrb.w	ip, [r4]
 800be5e:	f00c 0c0f 	and.w	ip, ip, #15
 800be62:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800be66:	f106 0608 	add.w	r6, r6, #8
 800be6a:	f8dc c000 	ldr.w	ip, [ip]
 800be6e:	f846 cc0c 	str.w	ip, [r6, #-12]
 800be72:	d1e7      	bne.n	800be44 <forward_conv2d_if32of32wf32+0x204>
 800be74:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800be76:	44a0      	add	r8, r4
 800be78:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800be7a:	4427      	add	r7, r4
 800be7c:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800be7e:	2c00      	cmp	r4, #0
 800be80:	d0d4      	beq.n	800be2c <forward_conv2d_if32of32wf32+0x1ec>
 800be82:	f818 4b01 	ldrb.w	r4, [r8], #1
 800be86:	0924      	lsrs	r4, r4, #4
 800be88:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800be8c:	6824      	ldr	r4, [r4, #0]
 800be8e:	f847 4b04 	str.w	r4, [r7], #4
 800be92:	e7cb      	b.n	800be2c <forward_conv2d_if32of32wf32+0x1ec>
 800be94:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800be96:	2c00      	cmp	r4, #0
 800be98:	d1f3      	bne.n	800be82 <forward_conv2d_if32of32wf32+0x242>
 800be9a:	461c      	mov	r4, r3
 800be9c:	4613      	mov	r3, r2
 800be9e:	4652      	mov	r2, sl
 800bea0:	46a2      	mov	sl, r4
 800bea2:	45b9      	cmp	r9, r7
 800bea4:	d8fd      	bhi.n	800bea2 <forward_conv2d_if32of32wf32+0x262>
 800bea6:	e797      	b.n	800bdd8 <forward_conv2d_if32of32wf32+0x198>
 800bea8:	461c      	mov	r4, r3
 800beaa:	ee07 0a90 	vmov	s15, r0
 800beae:	4613      	mov	r3, r2
 800beb0:	4652      	mov	r2, sl
 800beb2:	46a2      	mov	sl, r4
 800beb4:	e741      	b.n	800bd3a <forward_conv2d_if32of32wf32+0xfa>
 800beb6:	bf00      	nop

0800beb8 <forward_dense>:
 800beb8:	6983      	ldr	r3, [r0, #24]
 800beba:	881a      	ldrh	r2, [r3, #0]
 800bebc:	2a00      	cmp	r2, #0
 800bebe:	f000 80cc 	beq.w	800c05a <forward_dense+0x1a2>
 800bec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec6:	ed2d 8b02 	vpush	{d8}
 800beca:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800bece:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800bed2:	b09b      	sub	sp, #108	@ 0x6c
 800bed4:	b104      	cbz	r4, 800bed8 <forward_dense+0x20>
 800bed6:	6824      	ldr	r4, [r4, #0]
 800bed8:	2a01      	cmp	r2, #1
 800beda:	f000 81d7 	beq.w	800c28c <forward_dense+0x3d4>
 800bede:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800bee2:	b105      	cbz	r5, 800bee6 <forward_dense+0x2e>
 800bee4:	682d      	ldr	r5, [r5, #0]
 800bee6:	2a02      	cmp	r2, #2
 800bee8:	f000 80b9 	beq.w	800c05e <forward_dense+0x1a6>
 800beec:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800bef0:	9308      	str	r3, [sp, #32]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 81c1 	beq.w	800c27a <forward_dense+0x3c2>
 800bef8:	4619      	mov	r1, r3
 800befa:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800befe:	6809      	ldr	r1, [r1, #0]
 800bf00:	910a      	str	r1, [sp, #40]	@ 0x28
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	f240 81bb 	bls.w	800c27e <forward_dense+0x3c6>
 800bf08:	9b08      	ldr	r3, [sp, #32]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	9308      	str	r3, [sp, #32]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	68e0      	ldr	r0, [r4, #12]
 800bf12:	68ee      	ldr	r6, [r5, #12]
 800bf14:	6840      	ldr	r0, [r0, #4]
 800bf16:	6999      	ldr	r1, [r3, #24]
 800bf18:	9010      	str	r0, [sp, #64]	@ 0x40
 800bf1a:	6870      	ldr	r0, [r6, #4]
 800bf1c:	680b      	ldr	r3, [r1, #0]
 800bf1e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bf20:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 800bf24:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800bf28:	fb00 f707 	mul.w	r7, r0, r7
 800bf2c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800bf30:	fa4e f000 	asr.w	r0, lr, r0
 800bf34:	2a03      	cmp	r2, #3
 800bf36:	900d      	str	r0, [sp, #52]	@ 0x34
 800bf38:	f000 81a5 	beq.w	800c286 <forward_dense+0x3ce>
 800bf3c:	f8dc 8028 	ldr.w	r8, [ip, #40]	@ 0x28
 800bf40:	f1b8 0f00 	cmp.w	r8, #0
 800bf44:	d006      	beq.n	800bf54 <forward_dense+0x9c>
 800bf46:	f8d8 8000 	ldr.w	r8, [r8]
 800bf4a:	f1b8 0f00 	cmp.w	r8, #0
 800bf4e:	d001      	beq.n	800bf54 <forward_dense+0x9c>
 800bf50:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800bf54:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800bf58:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800bf5c:	fa42 f303 	asr.w	r3, r2, r3
 800bf60:	07db      	lsls	r3, r3, #31
 800bf62:	f140 8177 	bpl.w	800c254 <forward_dense+0x39c>
 800bf66:	f04f 0900 	mov.w	r9, #0
 800bf6a:	69a3      	ldr	r3, [r4, #24]
 800bf6c:	69aa      	ldr	r2, [r5, #24]
 800bf6e:	6891      	ldr	r1, [r2, #8]
 800bf70:	689a      	ldr	r2, [r3, #8]
 800bf72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf74:	9102      	str	r1, [sp, #8]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	fb07 f606 	mul.w	r6, r7, r6
 800bf80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf82:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 800bf86:	009c      	lsls	r4, r3, #2
 800bf88:	4281      	cmp	r1, r0
 800bf8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bf8c:	9409      	str	r4, [sp, #36]	@ 0x24
 800bf8e:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800bf92:	d25d      	bcs.n	800c050 <forward_dense+0x198>
 800bf94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf96:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 800c294 <forward_dense+0x3dc>
 800bf9a:	08d9      	lsrs	r1, r3, #3
 800bf9c:	4693      	mov	fp, r2
 800bf9e:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f023 0301 	bic.w	r3, r3, #1
 800bfa8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	014b      	lsls	r3, r1, #5
 800bfb0:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800bfb4:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfb6:	0093      	lsls	r3, r2, #2
 800bfb8:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfba:	f002 0301 	and.w	r3, r2, #1
 800bfbe:	464c      	mov	r4, r9
 800bfc0:	9104      	str	r1, [sp, #16]
 800bfc2:	9305      	str	r3, [sp, #20]
 800bfc4:	46c1      	mov	r9, r8
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800bfce:	9b08      	ldr	r3, [sp, #32]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d04a      	beq.n	800c06a <forward_dense+0x1b2>
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	689d      	ldr	r5, [r3, #8]
 800bfd8:	2c00      	cmp	r4, #0
 800bfda:	d049      	beq.n	800c070 <forward_dense+0x1b8>
 800bfdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfde:	2b04      	cmp	r3, #4
 800bfe0:	9b02      	ldr	r3, [sp, #8]
 800bfe2:	d057      	beq.n	800c094 <forward_dense+0x1dc>
 800bfe4:	4599      	cmp	r9, r3
 800bfe6:	d927      	bls.n	800c038 <forward_dense+0x180>
 800bfe8:	9e03      	ldr	r6, [sp, #12]
 800bfea:	4618      	mov	r0, r3
 800bfec:	2d00      	cmp	r5, #0
 800bfee:	d039      	beq.n	800c064 <forward_dense+0x1ac>
 800bff0:	ecb5 6a01 	vldmia	r5!, {s12}
 800bff4:	45da      	cmp	sl, fp
 800bff6:	d911      	bls.n	800c01c <forward_dense+0x164>
 800bff8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800c294 <forward_dense+0x3dc>
 800bffc:	465a      	mov	r2, fp
 800bffe:	4661      	mov	r1, ip
 800c000:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c004:	ecb2 7a01 	vldmia	r2!, {s14}
 800c008:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c00c:	edd3 6a00 	vldr	s13, [r3]
 800c010:	4592      	cmp	sl, r2
 800c012:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c016:	d8f3      	bhi.n	800c000 <forward_dense+0x148>
 800c018:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c01c:	eca0 6a01 	vstmia	r0!, {s12}
 800c020:	4548      	cmp	r0, r9
 800c022:	44b4      	add	ip, r6
 800c024:	d3e2      	bcc.n	800bfec <forward_dense+0x134>
 800c026:	9a02      	ldr	r2, [sp, #8]
 800c028:	eba9 0302 	sub.w	r3, r9, r2
 800c02c:	3b01      	subs	r3, #1
 800c02e:	f023 0303 	bic.w	r3, r3, #3
 800c032:	3304      	adds	r3, #4
 800c034:	18d3      	adds	r3, r2, r3
 800c036:	9302      	str	r3, [sp, #8]
 800c038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03a:	9a01      	ldr	r2, [sp, #4]
 800c03c:	4499      	add	r9, r3
 800c03e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c040:	441a      	add	r2, r3
 800c042:	449a      	add	sl, r3
 800c044:	449b      	add	fp, r3
 800c046:	9201      	str	r2, [sp, #4]
 800c048:	9b02      	ldr	r3, [sp, #8]
 800c04a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d3ba      	bcc.n	800bfc6 <forward_dense+0x10e>
 800c050:	b01b      	add	sp, #108	@ 0x6c
 800c052:	ecbd 8b02 	vpop	{d8}
 800c056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05a:	6853      	ldr	r3, [r2, #4]
 800c05c:	deff      	udf	#255	@ 0xff
 800c05e:	2300      	movs	r3, #0
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	deff      	udf	#255	@ 0xff
 800c064:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 800c294 <forward_dense+0x3dc>
 800c068:	e7c4      	b.n	800bff4 <forward_dense+0x13c>
 800c06a:	461d      	mov	r5, r3
 800c06c:	2c00      	cmp	r4, #0
 800c06e:	d1b5      	bne.n	800bfdc <forward_dense+0x124>
 800c070:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c072:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c074:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c076:	9b02      	ldr	r3, [sp, #8]
 800c078:	9218      	str	r2, [sp, #96]	@ 0x60
 800c07a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c07c:	e9cd 3b13 	strd	r3, fp, [sp, #76]	@ 0x4c
 800c080:	4413      	add	r3, r2
 800c082:	9302      	str	r3, [sp, #8]
 800c084:	a813      	add	r0, sp, #76	@ 0x4c
 800c086:	2301      	movs	r3, #1
 800c088:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 800c08c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c08e:	f000 fda9 	bl	800cbe4 <forward_lite_dense_if32of32wf32>
 800c092:	e7d1      	b.n	800c038 <forward_dense+0x180>
 800c094:	4599      	cmp	r9, r3
 800c096:	d9cf      	bls.n	800c038 <forward_dense+0x180>
 800c098:	9a04      	ldr	r2, [sp, #16]
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	1c57      	adds	r7, r2, #1
 800c09e:	9b01      	ldr	r3, [sp, #4]
 800c0a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c0a2:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800c0a6:	4452      	add	r2, sl
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 800c0ae:	9206      	str	r2, [sp, #24]
 800c0b0:	9307      	str	r3, [sp, #28]
 800c0b2:	2d00      	cmp	r5, #0
 800c0b4:	f000 80c3 	beq.w	800c23e <forward_dense+0x386>
 800c0b8:	9b04      	ldr	r3, [sp, #16]
 800c0ba:	ecf5 2a01 	vldmia	r5!, {s5}
 800c0be:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800c294 <forward_dense+0x3dc>
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 80c3 	beq.w	800c24e <forward_dense+0x396>
 800c0c8:	f10c 0204 	add.w	r2, ip, #4
 800c0cc:	f10b 0320 	add.w	r3, fp, #32
 800c0d0:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800c0d4:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 800c0d8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c0dc:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 800c0e0:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800c0e4:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800c0e8:	ed13 5a04 	vldr	s10, [r3, #-16]
 800c0ec:	ed53 5a03 	vldr	s11, [r3, #-12]
 800c0f0:	ed13 6a02 	vldr	s12, [r3, #-8]
 800c0f4:	ed53 6a01 	vldr	s13, [r3, #-4]
 800c0f8:	f000 060f 	and.w	r6, r0, #15
 800c0fc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c100:	edd6 7a00 	vldr	s15, [r6]
 800c104:	0900      	lsrs	r0, r0, #4
 800c106:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800c10a:	ed90 3a00 	vldr	s6, [r0]
 800c10e:	ee67 7a82 	vmul.f32	s15, s15, s4
 800c112:	0908      	lsrs	r0, r1, #4
 800c114:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c118:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800c11c:	f001 010f 	and.w	r1, r1, #15
 800c120:	edd0 3a00 	vldr	s7, [r0]
 800c124:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 800c128:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c12c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c130:	0906      	lsrs	r6, r0, #4
 800c132:	ed91 4a00 	vldr	s8, [r1]
 800c136:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c13a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c13e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c142:	f000 000f 	and.w	r0, r0, #15
 800c146:	edd6 4a00 	vldr	s9, [r6]
 800c14a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c14e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800c152:	3204      	adds	r2, #4
 800c154:	ed90 5a00 	vldr	s10, [r0]
 800c158:	0908      	lsrs	r0, r1, #4
 800c15a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c15e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800c162:	f001 010f 	and.w	r1, r1, #15
 800c166:	edd0 5a00 	vldr	s11, [r0]
 800c16a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c16e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c172:	42ba      	cmp	r2, r7
 800c174:	ed91 6a00 	vldr	s12, [r1]
 800c178:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c17c:	f103 0320 	add.w	r3, r3, #32
 800c180:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c184:	d1a4      	bne.n	800c0d0 <forward_dense+0x218>
 800c186:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c18a:	f1a7 0804 	sub.w	r8, r7, #4
 800c18e:	9b01      	ldr	r3, [sp, #4]
 800c190:	459e      	cmp	lr, r3
 800c192:	d22a      	bcs.n	800c1ea <forward_dense+0x332>
 800c194:	9b07      	ldr	r3, [sp, #28]
 800c196:	eba3 060e 	sub.w	r6, r3, lr
 800c19a:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 800c19e:	f10e 0208 	add.w	r2, lr, #8
 800c1a2:	f108 30ff 	add.w	r0, r8, #4294967295
 800c1a6:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 800c1aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c1ae:	ed52 5a01 	vldr	s11, [r2, #-4]
 800c1b2:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c1b6:	f003 010f 	and.w	r1, r3, #15
 800c1ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c1be:	edd1 7a00 	vldr	s15, [r1]
 800c1c2:	091b      	lsrs	r3, r3, #4
 800c1c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1c8:	ed93 6a00 	vldr	s12, [r3]
 800c1cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c1d0:	42b0      	cmp	r0, r6
 800c1d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1d6:	f102 0208 	add.w	r2, r2, #8
 800c1da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1de:	d1e4      	bne.n	800c1aa <forward_dense+0x2f2>
 800c1e0:	f10a 0a01 	add.w	sl, sl, #1
 800c1e4:	44d0      	add	r8, sl
 800c1e6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800c1ea:	9b05      	ldr	r3, [sp, #20]
 800c1ec:	b1cb      	cbz	r3, 800c222 <forward_dense+0x36a>
 800c1ee:	f898 3000 	ldrb.w	r3, [r8]
 800c1f2:	edde 7a00 	vldr	s15, [lr]
 800c1f6:	9a03      	ldr	r2, [sp, #12]
 800c1f8:	091b      	lsrs	r3, r3, #4
 800c1fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1fe:	edd3 6a00 	vldr	s13, [r3]
 800c202:	9b00      	ldr	r3, [sp, #0]
 800c204:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c208:	4494      	add	ip, r2
 800c20a:	4417      	add	r7, r2
 800c20c:	ee32 7a87 	vadd.f32	s14, s5, s14
 800c210:	eca3 7a01 	vstmia	r3!, {s14}
 800c214:	4599      	cmp	r9, r3
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	f63f af4b 	bhi.w	800c0b2 <forward_dense+0x1fa>
 800c21c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c220:	e701      	b.n	800c026 <forward_dense+0x16e>
 800c222:	9b00      	ldr	r3, [sp, #0]
 800c224:	9a03      	ldr	r2, [sp, #12]
 800c226:	ee72 2a87 	vadd.f32	s5, s5, s14
 800c22a:	4494      	add	ip, r2
 800c22c:	ece3 2a01 	vstmia	r3!, {s5}
 800c230:	454b      	cmp	r3, r9
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4417      	add	r7, r2
 800c236:	d2f1      	bcs.n	800c21c <forward_dense+0x364>
 800c238:	2d00      	cmp	r5, #0
 800c23a:	f47f af3d 	bne.w	800c0b8 <forward_dense+0x200>
 800c23e:	9b04      	ldr	r3, [sp, #16]
 800c240:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800c294 <forward_dense+0x3dc>
 800c244:	eef0 2a48 	vmov.f32	s5, s16
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f47f af3d 	bne.w	800c0c8 <forward_dense+0x210>
 800c24e:	46de      	mov	lr, fp
 800c250:	46e0      	mov	r8, ip
 800c252:	e79c      	b.n	800c18e <forward_dense+0x2d6>
 800c254:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c258:	f1b8 0f00 	cmp.w	r8, #0
 800c25c:	f43f ae85 	beq.w	800bf6a <forward_dense+0xb2>
 800c260:	e9d8 0100 	ldrd	r0, r1, [r8]
 800c264:	f000 ff0e 	bl	800d084 <ai_array_get_byte_size>
 800c268:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800c26c:	4602      	mov	r2, r0
 800c26e:	4641      	mov	r1, r8
 800c270:	4648      	mov	r0, r9
 800c272:	f000 fe11 	bl	800ce98 <st_int8_copy>
 800c276:	46c1      	mov	r9, r8
 800c278:	e677      	b.n	800bf6a <forward_dense+0xb2>
 800c27a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c27c:	e648      	b.n	800bf10 <forward_dense+0x58>
 800c27e:	2300      	movs	r3, #0
 800c280:	9308      	str	r3, [sp, #32]
 800c282:	460b      	mov	r3, r1
 800c284:	e644      	b.n	800bf10 <forward_dense+0x58>
 800c286:	2300      	movs	r3, #0
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	deff      	udf	#255	@ 0xff
 800c28c:	2300      	movs	r3, #0
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	deff      	udf	#255	@ 0xff
 800c292:	bf00      	nop
 800c294:	00000000 	.word	0x00000000

0800c298 <forward_sigmoid>:
 800c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29a:	ed2d 8b02 	vpush	{d8}
 800c29e:	6982      	ldr	r2, [r0, #24]
 800c2a0:	8813      	ldrh	r3, [r2, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d03b      	beq.n	800c31e <forward_sigmoid+0x86>
 800c2a6:	6852      	ldr	r2, [r2, #4]
 800c2a8:	6854      	ldr	r4, [r2, #4]
 800c2aa:	b104      	cbz	r4, 800c2ae <forward_sigmoid+0x16>
 800c2ac:	6824      	ldr	r4, [r4, #0]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d034      	beq.n	800c31c <forward_sigmoid+0x84>
 800c2b2:	6915      	ldr	r5, [r2, #16]
 800c2b4:	b105      	cbz	r5, 800c2b8 <forward_sigmoid+0x20>
 800c2b6:	682d      	ldr	r5, [r5, #0]
 800c2b8:	68a3      	ldr	r3, [r4, #8]
 800c2ba:	0a1b      	lsrs	r3, r3, #8
 800c2bc:	d031      	beq.n	800c322 <forward_sigmoid+0x8a>
 800c2be:	68e0      	ldr	r0, [r4, #12]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c2c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2ca:	4298      	cmp	r0, r3
 800c2cc:	fb01 f202 	mul.w	r2, r1, r2
 800c2d0:	d1f9      	bne.n	800c2c6 <forward_sigmoid+0x2e>
 800c2d2:	69a7      	ldr	r7, [r4, #24]
 800c2d4:	69a9      	ldr	r1, [r5, #24]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	688e      	ldr	r6, [r1, #8]
 800c2da:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800c2de:	3a01      	subs	r2, #1
 800c2e0:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800c2e4:	42ab      	cmp	r3, r5
 800c2e6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800c2ea:	d814      	bhi.n	800c316 <forward_sigmoid+0x7e>
 800c2ec:	3504      	adds	r5, #4
 800c2ee:	3604      	adds	r6, #4
 800c2f0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800c2f4:	462c      	mov	r4, r5
 800c2f6:	ed35 0a01 	vldmdb	r5!, {s0}
 800c2fa:	eeb1 0a40 	vneg.f32	s0, s0
 800c2fe:	f003 fdd3 	bl	800fea8 <expf>
 800c302:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c306:	3c08      	subs	r4, #8
 800c308:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800c30c:	ed66 7a01 	vstmdb	r6!, {s15}
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	42a3      	cmp	r3, r4
 800c314:	d9ee      	bls.n	800c2f4 <forward_sigmoid+0x5c>
 800c316:	ecbd 8b02 	vpop	{d8}
 800c31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c31c:	2300      	movs	r3, #0
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	deff      	udf	#255	@ 0xff
 800c322:	69ab      	ldr	r3, [r5, #24]
 800c324:	69a7      	ldr	r7, [r4, #24]
 800c326:	689e      	ldr	r6, [r3, #8]
 800c328:	68bd      	ldr	r5, [r7, #8]
 800c32a:	e7df      	b.n	800c2ec <forward_sigmoid+0x54>

0800c32c <forward_relu>:
 800c32c:	6982      	ldr	r2, [r0, #24]
 800c32e:	8813      	ldrh	r3, [r2, #0]
 800c330:	b323      	cbz	r3, 800c37c <forward_relu+0x50>
 800c332:	6851      	ldr	r1, [r2, #4]
 800c334:	684a      	ldr	r2, [r1, #4]
 800c336:	b102      	cbz	r2, 800c33a <forward_relu+0xe>
 800c338:	6812      	ldr	r2, [r2, #0]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	f000 808d 	beq.w	800c45a <forward_relu+0x12e>
 800c340:	b470      	push	{r4, r5, r6}
 800c342:	6909      	ldr	r1, [r1, #16]
 800c344:	b101      	cbz	r1, 800c348 <forward_relu+0x1c>
 800c346:	6809      	ldr	r1, [r1, #0]
 800c348:	69c6      	ldr	r6, [r0, #28]
 800c34a:	b1ce      	cbz	r6, 800c380 <forward_relu+0x54>
 800c34c:	6873      	ldr	r3, [r6, #4]
 800c34e:	6988      	ldr	r0, [r1, #24]
 800c350:	6991      	ldr	r1, [r2, #24]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d044      	beq.n	800c3e0 <forward_relu+0xb4>
 800c356:	6893      	ldr	r3, [r2, #8]
 800c358:	6880      	ldr	r0, [r0, #8]
 800c35a:	6889      	ldr	r1, [r1, #8]
 800c35c:	0a1b      	lsrs	r3, r3, #8
 800c35e:	d073      	beq.n	800c448 <forward_relu+0x11c>
 800c360:	68d5      	ldr	r5, [r2, #12]
 800c362:	2201      	movs	r2, #1
 800c364:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c368:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800c36c:	429d      	cmp	r5, r3
 800c36e:	fb04 f202 	mul.w	r2, r4, r2
 800c372:	d1f9      	bne.n	800c368 <forward_relu+0x3c>
 800c374:	68b3      	ldr	r3, [r6, #8]
 800c376:	bc70      	pop	{r4, r5, r6}
 800c378:	f000 bbb6 	b.w	800cae8 <forward_lite_nl_relu_generic_if32of32_kernel>
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	deff      	udf	#255	@ 0xff
 800c380:	6893      	ldr	r3, [r2, #8]
 800c382:	6989      	ldr	r1, [r1, #24]
 800c384:	6990      	ldr	r0, [r2, #24]
 800c386:	6889      	ldr	r1, [r1, #8]
 800c388:	6884      	ldr	r4, [r0, #8]
 800c38a:	0a1b      	lsrs	r3, r3, #8
 800c38c:	d05e      	beq.n	800c44c <forward_relu+0x120>
 800c38e:	68d5      	ldr	r5, [r2, #12]
 800c390:	2201      	movs	r2, #1
 800c392:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c396:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800c39a:	429d      	cmp	r5, r3
 800c39c:	fb00 f202 	mul.w	r2, r0, r2
 800c3a0:	d1f9      	bne.n	800c396 <forward_relu+0x6a>
 800c3a2:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c3ac:	4294      	cmp	r4, r2
 800c3ae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c3b2:	d813      	bhi.n	800c3dc <forward_relu+0xb0>
 800c3b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800c460 <forward_relu+0x134>
 800c3b8:	3204      	adds	r2, #4
 800c3ba:	3104      	adds	r1, #4
 800c3bc:	4613      	mov	r3, r2
 800c3be:	ed72 7a01 	vldmdb	r2!, {s15}
 800c3c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ca:	f1a3 0308 	sub.w	r3, r3, #8
 800c3ce:	bfb8      	it	lt
 800c3d0:	eef0 7a47 	vmovlt.f32	s15, s14
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	ed61 7a01 	vstmdb	r1!, {s15}
 800c3da:	d9ef      	bls.n	800c3bc <forward_relu+0x90>
 800c3dc:	bc70      	pop	{r4, r5, r6}
 800c3de:	4770      	bx	lr
 800c3e0:	688c      	ldr	r4, [r1, #8]
 800c3e2:	6891      	ldr	r1, [r2, #8]
 800c3e4:	6880      	ldr	r0, [r0, #8]
 800c3e6:	0a09      	lsrs	r1, r1, #8
 800c3e8:	d032      	beq.n	800c450 <forward_relu+0x124>
 800c3ea:	68d5      	ldr	r5, [r2, #12]
 800c3ec:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800c3f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c3f4:	4295      	cmp	r5, r2
 800c3f6:	fb01 f303 	mul.w	r3, r1, r3
 800c3fa:	d1f9      	bne.n	800c3f0 <forward_relu+0xc4>
 800c3fc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800c400:	3a01      	subs	r2, #1
 800c402:	68b1      	ldr	r1, [r6, #8]
 800c404:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c408:	429c      	cmp	r4, r3
 800c40a:	ed91 7a00 	vldr	s14, [r1]
 800c40e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800c412:	d8e3      	bhi.n	800c3dc <forward_relu+0xb0>
 800c414:	2500      	movs	r5, #0
 800c416:	3304      	adds	r3, #4
 800c418:	1d02      	adds	r2, r0, #4
 800c41a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c41e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c426:	f1a3 0104 	sub.w	r1, r3, #4
 800c42a:	f1a3 0308 	sub.w	r3, r3, #8
 800c42e:	d405      	bmi.n	800c43c <forward_relu+0x110>
 800c430:	429c      	cmp	r4, r3
 800c432:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c436:	d8d1      	bhi.n	800c3dc <forward_relu+0xb0>
 800c438:	460b      	mov	r3, r1
 800c43a:	e7ee      	b.n	800c41a <forward_relu+0xee>
 800c43c:	429c      	cmp	r4, r3
 800c43e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c442:	d8cb      	bhi.n	800c3dc <forward_relu+0xb0>
 800c444:	460b      	mov	r3, r1
 800c446:	e7e8      	b.n	800c41a <forward_relu+0xee>
 800c448:	2201      	movs	r2, #1
 800c44a:	e793      	b.n	800c374 <forward_relu+0x48>
 800c44c:	4622      	mov	r2, r4
 800c44e:	e7b1      	b.n	800c3b4 <forward_relu+0x88>
 800c450:	68b2      	ldr	r2, [r6, #8]
 800c452:	4623      	mov	r3, r4
 800c454:	ed92 7a00 	vldr	s14, [r2]
 800c458:	e7dc      	b.n	800c414 <forward_relu+0xe8>
 800c45a:	2300      	movs	r3, #0
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	deff      	udf	#255	@ 0xff
 800c460:	00000000 	.word	0x00000000

0800c464 <forward_mp>:
 800c464:	6983      	ldr	r3, [r0, #24]
 800c466:	881a      	ldrh	r2, [r3, #0]
 800c468:	2a00      	cmp	r2, #0
 800c46a:	f000 80c5 	beq.w	800c5f8 <forward_mp+0x194>
 800c46e:	6859      	ldr	r1, [r3, #4]
 800c470:	684b      	ldr	r3, [r1, #4]
 800c472:	b103      	cbz	r3, 800c476 <forward_mp+0x12>
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2a01      	cmp	r2, #1
 800c478:	f000 80c0 	beq.w	800c5fc <forward_mp+0x198>
 800c47c:	690a      	ldr	r2, [r1, #16]
 800c47e:	2a00      	cmp	r2, #0
 800c480:	f000 80bf 	beq.w	800c602 <forward_mp+0x19e>
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	6811      	ldr	r1, [r2, #0]
 800c48a:	68ca      	ldr	r2, [r1, #12]
 800c48c:	6989      	ldr	r1, [r1, #24]
 800c48e:	68d4      	ldr	r4, [r2, #12]
 800c490:	6895      	ldr	r5, [r2, #8]
 800c492:	688a      	ldr	r2, [r1, #8]
 800c494:	68d9      	ldr	r1, [r3, #12]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	b093      	sub	sp, #76	@ 0x4c
 800c4a0:	9200      	str	r2, [sp, #0]
 800c4a2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800c4a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4a6:	e9d2 3600 	ldrd	r3, r6, [r2]
 800c4aa:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800c4ae:	69c1      	ldr	r1, [r0, #28]
 800c4b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4b2:	6a01      	ldr	r1, [r0, #32]
 800c4b4:	910a      	str	r1, [sp, #40]	@ 0x28
 800c4b6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c4b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c4ba:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c4bc:	9408      	str	r4, [sp, #32]
 800c4be:	9504      	str	r5, [sp, #16]
 800c4c0:	960d      	str	r6, [sp, #52]	@ 0x34
 800c4c2:	9705      	str	r7, [sp, #20]
 800c4c4:	910c      	str	r1, [sp, #48]	@ 0x30
 800c4c6:	f1c3 0a00 	rsb	sl, r3, #0
 800c4ca:	2c00      	cmp	r4, #0
 800c4cc:	f000 8091 	beq.w	800c5f2 <forward_mp+0x18e>
 800c4d0:	441a      	add	r2, r3
 800c4d2:	9b05      	ldr	r3, [sp, #20]
 800c4d4:	9201      	str	r2, [sp, #4]
 800c4d6:	fb09 f303 	mul.w	r3, r9, r3
 800c4da:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800c4de:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800c4e2:	4273      	negs	r3, r6
 800c4e4:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4e6:	fb05 f307 	mul.w	r3, r5, r7
 800c4ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4ec:	f04f 0b00 	mov.w	fp, #0
 800c4f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4f2:	9901      	ldr	r1, [sp, #4]
 800c4f4:	428a      	cmp	r2, r1
 800c4f6:	bf94      	ite	ls
 800c4f8:	eb0a 0e02 	addls.w	lr, sl, r2
 800c4fc:	eb0a 0e01 	addhi.w	lr, sl, r1
 800c500:	9a04      	ldr	r2, [sp, #16]
 800c502:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800c506:	9307      	str	r3, [sp, #28]
 800c508:	2a00      	cmp	r2, #0
 800c50a:	d067      	beq.n	800c5dc <forward_mp+0x178>
 800c50c:	9a05      	ldr	r2, [sp, #20]
 800c50e:	9d00      	ldr	r5, [sp, #0]
 800c510:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 800c514:	fb02 f303 	mul.w	r3, r2, r3
 800c518:	9303      	str	r3, [sp, #12]
 800c51a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c51c:	18d3      	adds	r3, r2, r3
 800c51e:	9302      	str	r3, [sp, #8]
 800c520:	2200      	movs	r2, #0
 800c522:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c524:	9206      	str	r2, [sp, #24]
 800c526:	2b00      	cmp	r3, #0
 800c528:	bfac      	ite	ge
 800c52a:	9a03      	ldrge	r2, [sp, #12]
 800c52c:	9e03      	ldrlt	r6, [sp, #12]
 800c52e:	9902      	ldr	r1, [sp, #8]
 800c530:	bfa8      	it	ge
 800c532:	18d6      	addge	r6, r2, r3
 800c534:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c536:	fb06 2607 	mla	r6, r6, r7, r2
 800c53a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c53c:	469b      	mov	fp, r3
 800c53e:	bfb8      	it	lt
 800c540:	2300      	movlt	r3, #0
 800c542:	428a      	cmp	r2, r1
 800c544:	bf94      	ite	ls
 800c546:	445a      	addls	r2, fp
 800c548:	eb0b 0201 	addhi.w	r2, fp, r1
 800c54c:	1ad4      	subs	r4, r2, r3
 800c54e:	f1b9 0f00 	cmp.w	r9, #0
 800c552:	d008      	beq.n	800c566 <forward_mp+0x102>
 800c554:	4633      	mov	r3, r6
 800c556:	462a      	mov	r2, r5
 800c558:	19b9      	adds	r1, r7, r6
 800c55a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c55e:	f842 0b04 	str.w	r0, [r2], #4
 800c562:	4299      	cmp	r1, r3
 800c564:	d1f9      	bne.n	800c55a <forward_mp+0xf6>
 800c566:	9b07      	ldr	r3, [sp, #28]
 800c568:	459e      	cmp	lr, r3
 800c56a:	dd24      	ble.n	800c5b6 <forward_mp+0x152>
 800c56c:	469c      	mov	ip, r3
 800c56e:	fb07 6404 	mla	r4, r7, r4, r6
 800c572:	42a6      	cmp	r6, r4
 800c574:	d219      	bcs.n	800c5aa <forward_mp+0x146>
 800c576:	f1b9 0f00 	cmp.w	r9, #0
 800c57a:	d016      	beq.n	800c5aa <forward_mp+0x146>
 800c57c:	19f1      	adds	r1, r6, r7
 800c57e:	4630      	mov	r0, r6
 800c580:	4602      	mov	r2, r0
 800c582:	462b      	mov	r3, r5
 800c584:	ecf2 7a01 	vldmia	r2!, {s15}
 800c588:	ed93 7a00 	vldr	s14, [r3]
 800c58c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c594:	bfb8      	it	lt
 800c596:	eef0 7a47 	vmovlt.f32	s15, s14
 800c59a:	428a      	cmp	r2, r1
 800c59c:	ece3 7a01 	vstmia	r3!, {s15}
 800c5a0:	d1f0      	bne.n	800c584 <forward_mp+0x120>
 800c5a2:	4438      	add	r0, r7
 800c5a4:	42a0      	cmp	r0, r4
 800c5a6:	4439      	add	r1, r7
 800c5a8:	d3ea      	bcc.n	800c580 <forward_mp+0x11c>
 800c5aa:	f10c 0c01 	add.w	ip, ip, #1
 800c5ae:	45e6      	cmp	lr, ip
 800c5b0:	4446      	add	r6, r8
 800c5b2:	4444      	add	r4, r8
 800c5b4:	d1dd      	bne.n	800c572 <forward_mp+0x10e>
 800c5b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5b8:	9802      	ldr	r0, [sp, #8]
 800c5ba:	9a06      	ldr	r2, [sp, #24]
 800c5bc:	eb01 030b 	add.w	r3, r1, fp
 800c5c0:	1a41      	subs	r1, r0, r1
 800c5c2:	9102      	str	r1, [sp, #8]
 800c5c4:	9904      	ldr	r1, [sp, #16]
 800c5c6:	3201      	adds	r2, #1
 800c5c8:	4291      	cmp	r1, r2
 800c5ca:	9206      	str	r2, [sp, #24]
 800c5cc:	443d      	add	r5, r7
 800c5ce:	d1aa      	bne.n	800c526 <forward_mp+0xc2>
 800c5d0:	9b00      	ldr	r3, [sp, #0]
 800c5d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c5d4:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800c5d8:	4413      	add	r3, r2
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5de:	9a01      	ldr	r2, [sp, #4]
 800c5e0:	449a      	add	sl, r3
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	9b08      	ldr	r3, [sp, #32]
 800c5e8:	f10b 0b01 	add.w	fp, fp, #1
 800c5ec:	455b      	cmp	r3, fp
 800c5ee:	f47f af7f 	bne.w	800c4f0 <forward_mp+0x8c>
 800c5f2:	b013      	add	sp, #76	@ 0x4c
 800c5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f8:	6853      	ldr	r3, [r2, #4]
 800c5fa:	deff      	udf	#255	@ 0xff
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	deff      	udf	#255	@ 0xff
 800c602:	68d3      	ldr	r3, [r2, #12]
 800c604:	deff      	udf	#255	@ 0xff
 800c606:	bf00      	nop

0800c608 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	b08d      	sub	sp, #52	@ 0x34
 800c60e:	9003      	str	r0, [sp, #12]
 800c610:	9207      	str	r2, [sp, #28]
 800c612:	9308      	str	r3, [sp, #32]
 800c614:	461a      	mov	r2, r3
 800c616:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	@ 0x64
 800c61a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800c61c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800c61e:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
 800c622:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c624:	fb00 f003 	mul.w	r0, r0, r3
 800c628:	9004      	str	r0, [sp, #16]
 800c62a:	f8bd 0074 	ldrh.w	r0, [sp, #116]	@ 0x74
 800c62e:	9009      	str	r0, [sp, #36]	@ 0x24
 800c630:	2d00      	cmp	r5, #0
 800c632:	f000 80ef 	beq.w	800c814 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 800c636:	fb00 f302 	mul.w	r3, r0, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	9306      	str	r3, [sp, #24]
 800c63e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c640:	fb03 f302 	mul.w	r3, r3, r2
 800c644:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c64c:	425b      	negs	r3, r3
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	2300      	movs	r3, #0
 800c652:	00a4      	lsls	r4, r4, #2
 800c654:	9302      	str	r3, [sp, #8]
 800c656:	0093      	lsls	r3, r2, #2
 800c658:	9405      	str	r4, [sp, #20]
 800c65a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c65c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f2c0 80db 	blt.w	800c81a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
 800c664:	9e01      	ldr	r6, [sp, #4]
 800c666:	9d04      	ldr	r5, [sp, #16]
 800c668:	2000      	movs	r0, #0
 800c66a:	9b07      	ldr	r3, [sp, #28]
 800c66c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c66e:	9900      	ldr	r1, [sp, #0]
 800c670:	fb05 3502 	mla	r5, r5, r2, r3
 800c674:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c676:	440b      	add	r3, r1
 800c678:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800c67a:	428b      	cmp	r3, r1
 800c67c:	bf94      	ite	ls
 800c67e:	ebc0 0003 	rsbls	r0, r0, r3
 800c682:	ebc0 0001 	rsbhi	r0, r0, r1
 800c686:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c688:	eba3 0a00 	sub.w	sl, r3, r0
 800c68c:	9b08      	ldr	r3, [sp, #32]
 800c68e:	f1bb 0f00 	cmp.w	fp, #0
 800c692:	eba1 0900 	sub.w	r9, r1, r0
 800c696:	eeb0 7a40 	vmov.f32	s14, s0
 800c69a:	fb03 f000 	mul.w	r0, r3, r0
 800c69e:	f340 80a1 	ble.w	800c7e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
 800c6a2:	f020 040f 	bic.w	r4, r0, #15
 800c6a6:	f104 38ff 	add.w	r8, r4, #4294967295
 800c6aa:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c6ae:	f108 0801 	add.w	r8, r8, #1
 800c6b2:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800c6b6:	fb02 fa0a 	mul.w	sl, r2, sl
 800c6ba:	fb02 f909 	mul.w	r9, r2, r9
 800c6be:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800c6c2:	f04f 0c00 	mov.w	ip, #0
 800c6c6:	2c00      	cmp	r4, #0
 800c6c8:	bfd8      	it	le
 800c6ca:	2700      	movle	r7, #0
 800c6cc:	dd70      	ble.n	800c7b0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 800c6ce:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 800c6d2:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800c6dc:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800c6e0:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800c6e4:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800c6e8:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800c6ec:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800c6f0:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800c6f4:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800c6f8:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800c6fc:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800c700:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800c704:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800c708:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800c70c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c710:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800c714:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c718:	3110      	adds	r1, #16
 800c71a:	42a1      	cmp	r1, r4
 800c71c:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800c720:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800c724:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c728:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800c72c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c730:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800c734:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 800c738:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c73c:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800c740:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800c744:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c748:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800c74c:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800c750:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c754:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 800c758:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800c75c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c760:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800c764:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800c768:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c76c:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800c770:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800c774:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c778:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800c77c:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800c780:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c784:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 800c788:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800c78c:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c790:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c794:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c798:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c79c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c7a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c7a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7a8:	db96      	blt.n	800c6d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
 800c7aa:	4476      	add	r6, lr
 800c7ac:	4475      	add	r5, lr
 800c7ae:	4647      	mov	r7, r8
 800c7b0:	42b8      	cmp	r0, r7
 800c7b2:	dd10      	ble.n	800c7d6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 800c7b4:	463b      	mov	r3, r7
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	ecf2 6a01 	vldmia	r2!, {s13}
 800c7be:	ecf1 7a01 	vldmia	r1!, {s15}
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	4298      	cmp	r0, r3
 800c7c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7ca:	d1f6      	bne.n	800c7ba <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 800c7cc:	1bc7      	subs	r7, r0, r7
 800c7ce:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800c7d2:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800c7d6:	f10c 0c01 	add.w	ip, ip, #1
 800c7da:	45dc      	cmp	ip, fp
 800c7dc:	4456      	add	r6, sl
 800c7de:	444d      	add	r5, r9
 800c7e0:	f47f af71 	bne.w	800c6c6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
 800c7e4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7e8:	9a03      	ldr	r2, [sp, #12]
 800c7ea:	9b02      	ldr	r3, [sp, #8]
 800c7ec:	ed82 7a00 	vstr	s14, [r2]
 800c7f0:	4401      	add	r1, r0
 800c7f2:	911c      	str	r1, [sp, #112]	@ 0x70
 800c7f4:	9905      	ldr	r1, [sp, #20]
 800c7f6:	440a      	add	r2, r1
 800c7f8:	9203      	str	r2, [sp, #12]
 800c7fa:	9a00      	ldr	r2, [sp, #0]
 800c7fc:	9906      	ldr	r1, [sp, #24]
 800c7fe:	1a12      	subs	r2, r2, r0
 800c800:	9200      	str	r2, [sp, #0]
 800c802:	9a01      	ldr	r2, [sp, #4]
 800c804:	440a      	add	r2, r1
 800c806:	9201      	str	r2, [sp, #4]
 800c808:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c80a:	3301      	adds	r3, #1
 800c80c:	4293      	cmp	r3, r2
 800c80e:	9302      	str	r3, [sp, #8]
 800c810:	f47f af24 	bne.w	800c65c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
 800c814:	b00d      	add	sp, #52	@ 0x34
 800c816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81a:	9a00      	ldr	r2, [sp, #0]
 800c81c:	9b04      	ldr	r3, [sp, #16]
 800c81e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c820:	4610      	mov	r0, r2
 800c822:	189d      	adds	r5, r3, r2
 800c824:	e721      	b.n	800c66a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
 800c826:	bf00      	nop

0800c828 <forward_lite_conv2d_if32of32wf32>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	ed2d 8b02 	vpush	{d8}
 800c830:	b09f      	sub	sp, #124	@ 0x7c
 800c832:	af08      	add	r7, sp, #32
 800c834:	461c      	mov	r4, r3
 800c836:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c838:	63fc      	str	r4, [r7, #60]	@ 0x3c
 800c83a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 800c83e:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	@ 0xb0
 800c842:	64fc      	str	r4, [r7, #76]	@ 0x4c
 800c844:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 800c848:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	@ 0xb4
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	424e      	negs	r6, r1
 800c850:	4686      	mov	lr, r0
 800c852:	4694      	mov	ip, r2
 800c854:	613a      	str	r2, [r7, #16]
 800c856:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	@ 0x88
 800c85a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c85e:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	@ 0xa8
 800c862:	617d      	str	r5, [r7, #20]
 800c864:	633e      	str	r6, [r7, #48]	@ 0x30
 800c866:	2c00      	cmp	r4, #0
 800c868:	f000 8090 	beq.w	800c98c <forward_lite_conv2d_if32of32wf32+0x164>
 800c86c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800c870:	6379      	str	r1, [r7, #52]	@ 0x34
 800c872:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c876:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 800cae4 <forward_lite_conv2d_if32of32wf32+0x2bc>
 800c87a:	fb04 f202 	mul.w	r2, r4, r2
 800c87e:	fb03 f402 	mul.w	r4, r3, r2
 800c882:	fb03 f201 	mul.w	r2, r3, r1
 800c886:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c88a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800c88c:	fb01 f10a 	mul.w	r1, r1, sl
 800c890:	0089      	lsls	r1, r1, #2
 800c892:	61f9      	str	r1, [r7, #28]
 800c894:	fb05 f102 	mul.w	r1, r5, r2
 800c898:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c89c:	fb06 f202 	mul.w	r2, r6, r2
 800c8a0:	0089      	lsls	r1, r1, #2
 800c8a2:	61b9      	str	r1, [r7, #24]
 800c8a4:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 800c8a8:	f10b 0207 	add.w	r2, fp, #7
 800c8ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c8ae:	f022 0107 	bic.w	r1, r2, #7
 800c8b2:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 800c8b6:	4240      	negs	r0, r0
 800c8b8:	60f9      	str	r1, [r7, #12]
 800c8ba:	60ba      	str	r2, [r7, #8]
 800c8bc:	f10c 4178 	add.w	r1, ip, #4160749568	@ 0xf8000000
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4655      	mov	r5, sl
 800c8c4:	6538      	str	r0, [r7, #80]	@ 0x50
 800c8c6:	6239      	str	r1, [r7, #32]
 800c8c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8ca:	46da      	mov	sl, fp
 800c8cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	f2c0 80d5 	blt.w	800ca7e <forward_lite_conv2d_if32of32wf32+0x256>
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f8d7 b028 	ldr.w	fp, [r7, #40]	@ 0x28
 800c8da:	657a      	str	r2, [r7, #84]	@ 0x54
 800c8dc:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800c8e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8e2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800c8e6:	440a      	add	r2, r1
 800c8e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c8ea:	4282      	cmp	r2, r0
 800c8ec:	bf94      	ite	ls
 800c8ee:	ebc1 0102 	rsbls	r1, r1, r2
 800c8f2:	ebc1 0100 	rsbhi	r1, r1, r0
 800c8f6:	6a3a      	ldr	r2, [r7, #32]
 800c8f8:	6439      	str	r1, [r7, #64]	@ 0x40
 800c8fa:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c8fe:	d24b      	bcs.n	800c998 <forward_lite_conv2d_if32of32wf32+0x170>
 800c900:	b375      	cbz	r5, 800c960 <forward_lite_conv2d_if32of32wf32+0x138>
 800c902:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c904:	2a00      	cmp	r2, #0
 800c906:	f000 80bf 	beq.w	800ca88 <forward_lite_conv2d_if32of32wf32+0x260>
 800c90a:	4659      	mov	r1, fp
 800c90c:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800c910:	693e      	ldr	r6, [r7, #16]
 800c912:	f8d7 b040 	ldr.w	fp, [r7, #64]	@ 0x40
 800c916:	4691      	mov	r9, r2
 800c918:	2400      	movs	r4, #0
 800c91a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c91c:	ecb9 0a01 	vldmia	r9!, {s0}
 800c920:	9207      	str	r2, [sp, #28]
 800c922:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c924:	e9cd b205 	strd	fp, r2, [sp, #20]
 800c928:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c92a:	9204      	str	r2, [sp, #16]
 800c92c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c930:	9203      	str	r2, [sp, #12]
 800c932:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c936:	9202      	str	r2, [sp, #8]
 800c938:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c93c:	4640      	mov	r0, r8
 800c93e:	e9cd 5200 	strd	r5, r2, [sp]
 800c942:	3401      	adds	r4, #1
 800c944:	4632      	mov	r2, r6
 800c946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c94a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c94c:	f7ff fe5c 	bl	800c608 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800c950:	42a5      	cmp	r5, r4
 800c952:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c958:	4456      	add	r6, sl
 800c95a:	f108 0804 	add.w	r8, r8, #4
 800c95e:	d1dc      	bne.n	800c91a <forward_lite_conv2d_if32of32wf32+0xf2>
 800c960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c962:	69f8      	ldr	r0, [r7, #28]
 800c964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c966:	4401      	add	r1, r0
 800c968:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c96a:	6978      	ldr	r0, [r7, #20]
 800c96c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c96e:	4401      	add	r1, r0
 800c970:	6339      	str	r1, [r7, #48]	@ 0x30
 800c972:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c974:	1a09      	subs	r1, r1, r0
 800c976:	6379      	str	r1, [r7, #52]	@ 0x34
 800c978:	69b8      	ldr	r0, [r7, #24]
 800c97a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c97c:	4401      	add	r1, r0
 800c97e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c980:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800c984:	3201      	adds	r2, #1
 800c986:	4291      	cmp	r1, r2
 800c988:	627a      	str	r2, [r7, #36]	@ 0x24
 800c98a:	d19f      	bne.n	800c8cc <forward_lite_conv2d_if32of32wf32+0xa4>
 800c98c:	375c      	adds	r7, #92	@ 0x5c
 800c98e:	46bd      	mov	sp, r7
 800c990:	ecbd 8b02 	vpop	{d8}
 800c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c998:	466a      	mov	r2, sp
 800c99a:	ee08 2a10 	vmov	s16, r2
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	ebad 0d02 	sub.w	sp, sp, r2
 800c9a4:	aa08      	add	r2, sp, #32
 800c9a6:	2d00      	cmp	r5, #0
 800c9a8:	d03d      	beq.n	800ca26 <forward_lite_conv2d_if32of32wf32+0x1fe>
 800c9aa:	6938      	ldr	r0, [r7, #16]
 800c9ac:	68bc      	ldr	r4, [r7, #8]
 800c9ae:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 800c9b2:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800c9b4:	4659      	mov	r1, fp
 800c9b6:	f04f 0800 	mov.w	r8, #0
 800c9ba:	46ab      	mov	fp, r5
 800c9bc:	4605      	mov	r5, r0
 800c9be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c9c0:	b138      	cbz	r0, 800c9d2 <forward_lite_conv2d_if32of32wf32+0x1aa>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	4694      	mov	ip, r2
 800c9c6:	f850 eb04 	ldr.w	lr, [r0], #4
 800c9ca:	f84c eb04 	str.w	lr, [ip], #4
 800c9ce:	42a0      	cmp	r0, r4
 800c9d0:	d1f9      	bne.n	800c9c6 <forward_lite_conv2d_if32of32wf32+0x19e>
 800c9d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c9d4:	b358      	cbz	r0, 800ca2e <forward_lite_conv2d_if32of32wf32+0x206>
 800c9d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c9d8:	ecb6 0a01 	vldmia	r6!, {s0}
 800c9dc:	9007      	str	r0, [sp, #28]
 800c9de:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c9e0:	9006      	str	r0, [sp, #24]
 800c9e2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c9e4:	9005      	str	r0, [sp, #20]
 800c9e6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c9e8:	9004      	str	r0, [sp, #16]
 800c9ea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800c9ee:	9003      	str	r0, [sp, #12]
 800c9f0:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800c9f4:	9002      	str	r0, [sp, #8]
 800c9f6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800c9fa:	f108 0801 	add.w	r8, r8, #1
 800c9fe:	e9cd b000 	strd	fp, r0, [sp]
 800ca02:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 800ca06:	4648      	mov	r0, r9
 800ca08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ca0c:	f7ff fdfc 	bl	800c608 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800ca10:	45d8      	cmp	r8, fp
 800ca12:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 800ca16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ca1a:	4455      	add	r5, sl
 800ca1c:	4454      	add	r4, sl
 800ca1e:	f109 0904 	add.w	r9, r9, #4
 800ca22:	d1cc      	bne.n	800c9be <forward_lite_conv2d_if32of32wf32+0x196>
 800ca24:	465d      	mov	r5, fp
 800ca26:	ee18 2a10 	vmov	r2, s16
 800ca2a:	4695      	mov	sp, r2
 800ca2c:	e798      	b.n	800c960 <forward_lite_conv2d_if32of32wf32+0x138>
 800ca2e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ca30:	9007      	str	r0, [sp, #28]
 800ca32:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ca34:	9006      	str	r0, [sp, #24]
 800ca36:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800ca38:	9005      	str	r0, [sp, #20]
 800ca3a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ca3c:	9004      	str	r0, [sp, #16]
 800ca3e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800ca42:	9003      	str	r0, [sp, #12]
 800ca44:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800ca48:	9002      	str	r0, [sp, #8]
 800ca4a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800ca4e:	eeb0 0a60 	vmov.f32	s0, s1
 800ca52:	e9cd b000 	strd	fp, r0, [sp]
 800ca56:	f108 0801 	add.w	r8, r8, #1
 800ca5a:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 800ca5e:	4648      	mov	r0, r9
 800ca60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ca64:	f7ff fdd0 	bl	800c608 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800ca68:	45c3      	cmp	fp, r8
 800ca6a:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 800ca6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ca72:	4455      	add	r5, sl
 800ca74:	4454      	add	r4, sl
 800ca76:	f109 0904 	add.w	r9, r9, #4
 800ca7a:	d1a0      	bne.n	800c9be <forward_lite_conv2d_if32of32wf32+0x196>
 800ca7c:	e7d2      	b.n	800ca24 <forward_lite_conv2d_if32of32wf32+0x1fc>
 800ca7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca80:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800ca84:	657a      	str	r2, [r7, #84]	@ 0x54
 800ca86:	e729      	b.n	800c8dc <forward_lite_conv2d_if32of32wf32+0xb4>
 800ca88:	4659      	mov	r1, fp
 800ca8a:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800ca8e:	693e      	ldr	r6, [r7, #16]
 800ca90:	f8d7 9054 	ldr.w	r9, [r7, #84]	@ 0x54
 800ca94:	f8d7 b040 	ldr.w	fp, [r7, #64]	@ 0x40
 800ca98:	4614      	mov	r4, r2
 800ca9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca9c:	9207      	str	r2, [sp, #28]
 800ca9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800caa0:	f8cd 9010 	str.w	r9, [sp, #16]
 800caa4:	e9cd b205 	strd	fp, r2, [sp, #20]
 800caa8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800caac:	9203      	str	r2, [sp, #12]
 800caae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cab2:	9202      	str	r2, [sp, #8]
 800cab4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800cab8:	4640      	mov	r0, r8
 800caba:	e9cd 5200 	strd	r5, r2, [sp]
 800cabe:	eeb0 0a60 	vmov.f32	s0, s1
 800cac2:	4632      	mov	r2, r6
 800cac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cac8:	6579      	str	r1, [r7, #84]	@ 0x54
 800caca:	3401      	adds	r4, #1
 800cacc:	f7ff fd9c 	bl	800c608 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800cad0:	42a5      	cmp	r5, r4
 800cad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cad8:	4456      	add	r6, sl
 800cada:	f108 0804 	add.w	r8, r8, #4
 800cade:	d1dc      	bne.n	800ca9a <forward_lite_conv2d_if32of32wf32+0x272>
 800cae0:	e73e      	b.n	800c960 <forward_lite_conv2d_if32of32wf32+0x138>
 800cae2:	bf00      	nop
 800cae4:	00000000 	.word	0x00000000

0800cae8 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800cae8:	edd3 6a02 	vldr	s13, [r3, #8]
 800caec:	ed93 7a00 	vldr	s14, [r3]
 800caf0:	ed93 6a01 	vldr	s12, [r3, #4]
 800caf4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800caf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafc:	d42a      	bmi.n	800cb54 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800cafe:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800cb02:	3a01      	subs	r2, #1
 800cb04:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800cb08:	4561      	cmp	r1, ip
 800cb0a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800cb0e:	d85d      	bhi.n	800cbcc <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800cb10:	1d11      	adds	r1, r2, #4
 800cb12:	f10c 0304 	add.w	r3, ip, #4
 800cb16:	4408      	add	r0, r1
 800cb18:	ebac 0202 	sub.w	r2, ip, r2
 800cb1c:	e00c      	b.n	800cb38 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800cb1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb26:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800cb2a:	db01      	blt.n	800cb30 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800cb2c:	ee65 7a86 	vmul.f32	s15, s11, s12
 800cb30:	4293      	cmp	r3, r2
 800cb32:	ed60 7a01 	vstmdb	r0!, {s15}
 800cb36:	d00c      	beq.n	800cb52 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800cb38:	ed73 7a01 	vldmdb	r3!, {s15}
 800cb3c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800cb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb44:	daeb      	bge.n	800cb1e <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800cb46:	eef0 7a66 	vmov.f32	s15, s13
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	ed60 7a01 	vstmdb	r0!, {s15}
 800cb50:	d1f2      	bne.n	800cb38 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800cb52:	4770      	bx	lr
 800cb54:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cb58:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800cb5c:	3a01      	subs	r2, #1
 800cb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb62:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800cb66:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800cb6a:	d017      	beq.n	800cb9c <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800cb6c:	4561      	cmp	r1, ip
 800cb6e:	d82d      	bhi.n	800cbcc <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800cb70:	1d11      	adds	r1, r2, #4
 800cb72:	f10c 0304 	add.w	r3, ip, #4
 800cb76:	4401      	add	r1, r0
 800cb78:	ebac 0202 	sub.w	r2, ip, r2
 800cb7c:	ed73 7a01 	vldmdb	r3!, {s15}
 800cb80:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800cb84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cb90:	d81d      	bhi.n	800cbce <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800cb92:	4293      	cmp	r3, r2
 800cb94:	ed61 6a01 	vstmdb	r1!, {s13}
 800cb98:	d1f0      	bne.n	800cb7c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800cb9a:	4770      	bx	lr
 800cb9c:	4561      	cmp	r1, ip
 800cb9e:	d815      	bhi.n	800cbcc <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800cba0:	1d11      	adds	r1, r2, #4
 800cba2:	b500      	push	{lr}
 800cba4:	f10c 0304 	add.w	r3, ip, #4
 800cba8:	f04f 0e00 	mov.w	lr, #0
 800cbac:	4401      	add	r1, r0
 800cbae:	ebac 0202 	sub.w	r2, ip, r2
 800cbb2:	ed73 7a01 	vldmdb	r3!, {s15}
 800cbb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbbe:	d40b      	bmi.n	800cbd8 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	f841 ed04 	str.w	lr, [r1, #-4]!
 800cbc6:	d1f4      	bne.n	800cbb2 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800cbc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	ed61 7a01 	vstmdb	r1!, {s15}
 800cbd4:	d1d2      	bne.n	800cb7c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800cbd6:	4770      	bx	lr
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	ed61 7a01 	vstmdb	r1!, {s15}
 800cbde:	d1e8      	bne.n	800cbb2 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800cbe0:	e7f2      	b.n	800cbc8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800cbe2:	bf00      	nop

0800cbe4 <forward_lite_dense_if32of32wf32>:
 800cbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe8:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800cbec:	6801      	ldr	r1, [r0, #0]
 800cbee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800cbf2:	fb02 f303 	mul.w	r3, r2, r3
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cbfc:	4299      	cmp	r1, r3
 800cbfe:	9100      	str	r1, [sp, #0]
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	f080 811e 	bcs.w	800ce42 <forward_lite_dense_if32of32wf32+0x25e>
 800cc06:	6904      	ldr	r4, [r0, #16]
 800cc08:	4607      	mov	r7, r0
 800cc0a:	0096      	lsls	r6, r2, #2
 800cc0c:	9b00      	ldr	r3, [sp, #0]
 800cc0e:	68bd      	ldr	r5, [r7, #8]
 800cc10:	eb03 0e06 	add.w	lr, r3, r6
 800cc14:	459e      	cmp	lr, r3
 800cc16:	461e      	mov	r6, r3
 800cc18:	f240 8104 	bls.w	800ce24 <forward_lite_dense_if32of32wf32+0x240>
 800cc1c:	f1a4 0c10 	sub.w	ip, r4, #16
 800cc20:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800cc24:	f10c 0c01 	add.w	ip, ip, #1
 800cc28:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800cc2c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800cc30:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800cc34:	2c0f      	cmp	r4, #15
 800cc36:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800ce94 <forward_lite_dense_if32of32wf32+0x2b0>
 800cc3a:	f240 8105 	bls.w	800ce48 <forward_lite_dense_if32of32wf32+0x264>
 800cc3e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800cc42:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800cc46:	4621      	mov	r1, r4
 800cc48:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800cc4c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800cc50:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800cc54:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800cc58:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800cc5c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800cc60:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800cc64:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800cc68:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800cc6c:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800cc70:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800cc74:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800cc78:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800cc7c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cc80:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800cc84:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cc88:	3910      	subs	r1, #16
 800cc8a:	290f      	cmp	r1, #15
 800cc8c:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800cc90:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800cc94:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cc98:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800cc9c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cca0:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800cca4:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 800cca8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800ccac:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800ccb0:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800ccb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ccb8:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800ccbc:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800ccc0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ccc4:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 800ccc8:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800cccc:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ccd0:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800ccd4:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800ccd8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ccdc:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800cce0:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800cce4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cce8:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800ccec:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800ccf0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ccf4:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 800ccf8:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800ccfc:	eee1 7a21 	vfma.f32	s15, s2, s3
 800cd00:	eee2 7a22 	vfma.f32	s15, s4, s5
 800cd04:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cd08:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cd0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd10:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd18:	d896      	bhi.n	800cc48 <forward_lite_dense_if32of32wf32+0x64>
 800cd1a:	eb05 020b 	add.w	r2, r5, fp
 800cd1e:	f004 010f 	and.w	r1, r4, #15
 800cd22:	4663      	mov	r3, ip
 800cd24:	2903      	cmp	r1, #3
 800cd26:	d95f      	bls.n	800cde8 <forward_lite_dense_if32of32wf32+0x204>
 800cd28:	edd2 6a01 	vldr	s13, [r2, #4]
 800cd2c:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd30:	ed93 6a00 	vldr	s12, [r3]
 800cd34:	ed93 5a02 	vldr	s10, [r3, #8]
 800cd38:	edd2 5a02 	vldr	s11, [r2, #8]
 800cd3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd40:	edd2 6a00 	vldr	s13, [r2]
 800cd44:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd48:	1f08      	subs	r0, r1, #4
 800cd4a:	2803      	cmp	r0, #3
 800cd4c:	ed93 6a03 	vldr	s12, [r3, #12]
 800cd50:	edd2 6a03 	vldr	s13, [r2, #12]
 800cd54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd58:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd5c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd60:	eeb0 7a67 	vmov.f32	s14, s15
 800cd64:	d938      	bls.n	800cdd8 <forward_lite_dense_if32of32wf32+0x1f4>
 800cd66:	edd2 6a05 	vldr	s13, [r2, #20]
 800cd6a:	edd3 7a05 	vldr	s15, [r3, #20]
 800cd6e:	ed93 6a04 	vldr	s12, [r3, #16]
 800cd72:	ed93 5a06 	vldr	s10, [r3, #24]
 800cd76:	edd2 5a06 	vldr	s11, [r2, #24]
 800cd7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd7e:	edd2 6a04 	vldr	s13, [r2, #16]
 800cd82:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd86:	f1a1 0a08 	sub.w	sl, r1, #8
 800cd8a:	f1ba 0f03 	cmp.w	sl, #3
 800cd8e:	ed93 6a07 	vldr	s12, [r3, #28]
 800cd92:	edd2 6a07 	vldr	s13, [r2, #28]
 800cd96:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd9a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cda2:	d919      	bls.n	800cdd8 <forward_lite_dense_if32of32wf32+0x1f4>
 800cda4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800cda8:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800cdac:	ed92 6a08 	vldr	s12, [r2, #32]
 800cdb0:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800cdb4:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800cdb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdbc:	edd3 6a08 	vldr	s13, [r3, #32]
 800cdc0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cdc4:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 800cdc8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800cdcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cdd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cdd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdd8:	0880      	lsrs	r0, r0, #2
 800cdda:	3001      	adds	r0, #1
 800cddc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800cde0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800cde4:	f001 0103 	and.w	r1, r1, #3
 800cde8:	b1a9      	cbz	r1, 800ce16 <forward_lite_dense_if32of32wf32+0x232>
 800cdea:	edd3 6a00 	vldr	s13, [r3]
 800cdee:	edd2 7a00 	vldr	s15, [r2]
 800cdf2:	3901      	subs	r1, #1
 800cdf4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cdf8:	d00d      	beq.n	800ce16 <forward_lite_dense_if32of32wf32+0x232>
 800cdfa:	edd3 6a01 	vldr	s13, [r3, #4]
 800cdfe:	edd2 7a01 	vldr	s15, [r2, #4]
 800ce02:	2901      	cmp	r1, #1
 800ce04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce08:	d005      	beq.n	800ce16 <forward_lite_dense_if32of32wf32+0x232>
 800ce0a:	edd2 6a02 	vldr	s13, [r2, #8]
 800ce0e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce16:	444d      	add	r5, r9
 800ce18:	eca6 7a01 	vstmia	r6!, {s14}
 800ce1c:	45b6      	cmp	lr, r6
 800ce1e:	f63f af09 	bhi.w	800cc34 <forward_lite_dense_if32of32wf32+0x50>
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	b99b      	cbnz	r3, 800ce50 <forward_lite_dense_if32of32wf32+0x26c>
 800ce28:	9b00      	ldr	r3, [sp, #0]
 800ce2a:	9901      	ldr	r1, [sp, #4]
 800ce2c:	693c      	ldr	r4, [r7, #16]
 800ce2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ce32:	4299      	cmp	r1, r3
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800ce3a:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800ce3e:	f63f aee5 	bhi.w	800cc0c <forward_lite_dense_if32of32wf32+0x28>
 800ce42:	b003      	add	sp, #12
 800ce44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce48:	4621      	mov	r1, r4
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	4643      	mov	r3, r8
 800ce4e:	e769      	b.n	800cd24 <forward_lite_dense_if32of32wf32+0x140>
 800ce50:	2a00      	cmp	r2, #0
 800ce52:	d0e9      	beq.n	800ce28 <forward_lite_dense_if32of32wf32+0x244>
 800ce54:	9a00      	ldr	r2, [sp, #0]
 800ce56:	ed93 7a00 	vldr	s14, [r3]
 800ce5a:	edd2 7a00 	vldr	s15, [r2]
 800ce5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce62:	4613      	mov	r3, r2
 800ce64:	edc2 7a00 	vstr	s15, [r2]
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	2a01      	cmp	r2, #1
 800ce6c:	d9dc      	bls.n	800ce28 <forward_lite_dense_if32of32wf32+0x244>
 800ce6e:	1d19      	adds	r1, r3, #4
 800ce70:	2301      	movs	r3, #1
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	ed91 7a00 	vldr	s14, [r1]
 800ce78:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ce7c:	edd2 7a00 	vldr	s15, [r2]
 800ce80:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce84:	3301      	adds	r3, #1
 800ce86:	ece1 7a01 	vstmia	r1!, {s15}
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d8f0      	bhi.n	800ce72 <forward_lite_dense_if32of32wf32+0x28e>
 800ce90:	e7ca      	b.n	800ce28 <forward_lite_dense_if32of32wf32+0x244>
 800ce92:	bf00      	nop
 800ce94:	00000000 	.word	0x00000000

0800ce98 <st_int8_copy>:
 800ce98:	4288      	cmp	r0, r1
 800ce9a:	d056      	beq.n	800cf4a <st_int8_copy+0xb2>
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	d054      	beq.n	800cf4a <st_int8_copy+0xb2>
 800cea0:	4288      	cmp	r0, r1
 800cea2:	d353      	bcc.n	800cf4c <st_int8_copy+0xb4>
 800cea4:	078b      	lsls	r3, r1, #30
 800cea6:	d102      	bne.n	800ceae <st_int8_copy+0x16>
 800cea8:	e009      	b.n	800cebe <st_int8_copy+0x26>
 800ceaa:	2a00      	cmp	r2, #0
 800ceac:	d05b      	beq.n	800cf66 <st_int8_copy+0xce>
 800ceae:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800ceb2:	f801 3b01 	strb.w	r3, [r1], #1
 800ceb6:	078b      	lsls	r3, r1, #30
 800ceb8:	f102 32ff 	add.w	r2, r2, #4294967295
 800cebc:	d1f5      	bne.n	800ceaa <st_int8_copy+0x12>
 800cebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800cec6:	d068      	beq.n	800cf9a <st_int8_copy+0x102>
 800cec8:	ea40 0301 	orr.w	r3, r0, r1
 800cecc:	075b      	lsls	r3, r3, #29
 800cece:	d14b      	bne.n	800cf68 <st_int8_copy+0xd0>
 800ced0:	f1be 0f01 	cmp.w	lr, #1
 800ced4:	d048      	beq.n	800cf68 <st_int8_copy+0xd0>
 800ced6:	f100 0310 	add.w	r3, r0, #16
 800ceda:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800cede:	f101 0c10 	add.w	ip, r1, #16
 800cee2:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800cee6:	ed13 6b04 	vldr	d6, [r3, #-16]
 800ceea:	ed13 7b02 	vldr	d7, [r3, #-8]
 800ceee:	3310      	adds	r3, #16
 800cef0:	4573      	cmp	r3, lr
 800cef2:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800cef6:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800cefa:	f10c 0c10 	add.w	ip, ip, #16
 800cefe:	d1f2      	bne.n	800cee6 <st_int8_copy+0x4e>
 800cf00:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800cf04:	4421      	add	r1, r4
 800cf06:	4420      	add	r0, r4
 800cf08:	f002 0203 	and.w	r2, r2, #3
 800cf0c:	b16b      	cbz	r3, 800cf2a <st_int8_copy+0x92>
 800cf0e:	6804      	ldr	r4, [r0, #0]
 800cf10:	600c      	str	r4, [r1, #0]
 800cf12:	1e5c      	subs	r4, r3, #1
 800cf14:	d005      	beq.n	800cf22 <st_int8_copy+0x8a>
 800cf16:	6845      	ldr	r5, [r0, #4]
 800cf18:	604d      	str	r5, [r1, #4]
 800cf1a:	2c01      	cmp	r4, #1
 800cf1c:	bf1c      	itt	ne
 800cf1e:	6884      	ldrne	r4, [r0, #8]
 800cf20:	608c      	strne	r4, [r1, #8]
 800cf22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cf26:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cf2a:	b162      	cbz	r2, 800cf46 <st_int8_copy+0xae>
 800cf2c:	f990 3000 	ldrsb.w	r3, [r0]
 800cf30:	700b      	strb	r3, [r1, #0]
 800cf32:	3a01      	subs	r2, #1
 800cf34:	d007      	beq.n	800cf46 <st_int8_copy+0xae>
 800cf36:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cf3a:	704b      	strb	r3, [r1, #1]
 800cf3c:	2a01      	cmp	r2, #1
 800cf3e:	bf1c      	itt	ne
 800cf40:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800cf44:	708b      	strbne	r3, [r1, #2]
 800cf46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf4a:	4770      	bx	lr
 800cf4c:	1883      	adds	r3, r0, r2
 800cf4e:	428b      	cmp	r3, r1
 800cf50:	d9a8      	bls.n	800cea4 <st_int8_copy+0xc>
 800cf52:	4283      	cmp	r3, r0
 800cf54:	440a      	add	r2, r1
 800cf56:	d9f8      	bls.n	800cf4a <st_int8_copy+0xb2>
 800cf58:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800cf5c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800cf60:	4283      	cmp	r3, r0
 800cf62:	d1f9      	bne.n	800cf58 <st_int8_copy+0xc0>
 800cf64:	4770      	bx	lr
 800cf66:	4770      	bx	lr
 800cf68:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800cf72:	4684      	mov	ip, r0
 800cf74:	f8dc 7000 	ldr.w	r7, [ip]
 800cf78:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800cf7c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800cf80:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800cf84:	f8c3 800c 	str.w	r8, [r3, #12]
 800cf88:	601f      	str	r7, [r3, #0]
 800cf8a:	605e      	str	r6, [r3, #4]
 800cf8c:	609d      	str	r5, [r3, #8]
 800cf8e:	3310      	adds	r3, #16
 800cf90:	459e      	cmp	lr, r3
 800cf92:	f10c 0c10 	add.w	ip, ip, #16
 800cf96:	d1ed      	bne.n	800cf74 <st_int8_copy+0xdc>
 800cf98:	e7b2      	b.n	800cf00 <st_int8_copy+0x68>
 800cf9a:	0893      	lsrs	r3, r2, #2
 800cf9c:	f002 0203 	and.w	r2, r2, #3
 800cfa0:	e7b4      	b.n	800cf0c <st_int8_copy+0x74>
 800cfa2:	bf00      	nop

0800cfa4 <ai_array_to_buffer_fmt>:
 800cfa4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d053      	beq.n	800d054 <ai_array_to_buffer_fmt+0xb0>
 800cfac:	4a2c      	ldr	r2, [pc, #176]	@ (800d060 <ai_array_to_buffer_fmt+0xbc>)
 800cfae:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d010      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800cfb6:	dc21      	bgt.n	800cffc <ai_array_to_buffer_fmt+0x58>
 800cfb8:	4a2a      	ldr	r2, [pc, #168]	@ (800d064 <ai_array_to_buffer_fmt+0xc0>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d00c      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800cfbe:	dd0f      	ble.n	800cfe0 <ai_array_to_buffer_fmt+0x3c>
 800cfc0:	4a29      	ldr	r2, [pc, #164]	@ (800d068 <ai_array_to_buffer_fmt+0xc4>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d008      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800cfc6:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d004      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800cfce:	4a27      	ldr	r2, [pc, #156]	@ (800d06c <ai_array_to_buffer_fmt+0xc8>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	bf0c      	ite	eq
 800cfd4:	4613      	moveq	r3, r2
 800cfd6:	2340      	movne	r3, #64	@ 0x40
 800cfd8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cfdc:	4318      	orrs	r0, r3
 800cfde:	4770      	bx	lr
 800cfe0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d0f7      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800cfe8:	dd2a      	ble.n	800d040 <ai_array_to_buffer_fmt+0x9c>
 800cfea:	4a21      	ldr	r2, [pc, #132]	@ (800d070 <ai_array_to_buffer_fmt+0xcc>)
 800cfec:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cff0:	4293      	cmp	r3, r2
 800cff2:	bf0c      	ite	eq
 800cff4:	4613      	moveq	r3, r2
 800cff6:	2340      	movne	r3, #64	@ 0x40
 800cff8:	4318      	orrs	r0, r3
 800cffa:	4770      	bx	lr
 800cffc:	4a1d      	ldr	r2, [pc, #116]	@ (800d074 <ai_array_to_buffer_fmt+0xd0>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d0ea      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d002:	dd0f      	ble.n	800d024 <ai_array_to_buffer_fmt+0x80>
 800d004:	4a1c      	ldr	r2, [pc, #112]	@ (800d078 <ai_array_to_buffer_fmt+0xd4>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d0e6      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d00a:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 800d00e:	4293      	cmp	r3, r2
 800d010:	d0e2      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d012:	4a1a      	ldr	r2, [pc, #104]	@ (800d07c <ai_array_to_buffer_fmt+0xd8>)
 800d014:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800d018:	4293      	cmp	r3, r2
 800d01a:	bf0c      	ite	eq
 800d01c:	4613      	moveq	r3, r2
 800d01e:	2340      	movne	r3, #64	@ 0x40
 800d020:	4318      	orrs	r0, r3
 800d022:	4770      	bx	lr
 800d024:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800d028:	4293      	cmp	r3, r2
 800d02a:	d0d5      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d02c:	3207      	adds	r2, #7
 800d02e:	4293      	cmp	r3, r2
 800d030:	d0d2      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d032:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800d036:	4293      	cmp	r3, r2
 800d038:	bf0c      	ite	eq
 800d03a:	4613      	moveq	r3, r2
 800d03c:	2340      	movne	r3, #64	@ 0x40
 800d03e:	e7cb      	b.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d040:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800d044:	4293      	cmp	r3, r2
 800d046:	d0c7      	beq.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d048:	3280      	adds	r2, #128	@ 0x80
 800d04a:	4293      	cmp	r3, r2
 800d04c:	bf0c      	ite	eq
 800d04e:	4613      	moveq	r3, r2
 800d050:	2340      	movne	r3, #64	@ 0x40
 800d052:	e7c1      	b.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d054:	4b0a      	ldr	r3, [pc, #40]	@ (800d080 <ai_array_to_buffer_fmt+0xdc>)
 800d056:	4003      	ands	r3, r0
 800d058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d05c:	e7bc      	b.n	800cfd8 <ai_array_to_buffer_fmt+0x34>
 800d05e:	bf00      	nop
 800d060:	00840040 	.word	0x00840040
 800d064:	00040840 	.word	0x00040840
 800d068:	00041040 	.word	0x00041040
 800d06c:	0004084f 	.word	0x0004084f
 800d070:	00040447 	.word	0x00040447
 800d074:	00840840 	.word	0x00840840
 800d078:	00841040 	.word	0x00841040
 800d07c:	0084084f 	.word	0x0084084f
 800d080:	00803fff 	.word	0x00803fff

0800d084 <ai_array_get_byte_size>:
 800d084:	b319      	cbz	r1, 800d0ce <ai_array_get_byte_size+0x4a>
 800d086:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d08a:	fb01 f303 	mul.w	r3, r1, r3
 800d08e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800d092:	3307      	adds	r3, #7
 800d094:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800d098:	f023 0307 	bic.w	r3, r3, #7
 800d09c:	2a04      	cmp	r2, #4
 800d09e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800d0a2:	fa23 f101 	lsr.w	r1, r3, r1
 800d0a6:	d00b      	beq.n	800d0c0 <ai_array_get_byte_size+0x3c>
 800d0a8:	2a08      	cmp	r2, #8
 800d0aa:	d002      	beq.n	800d0b2 <ai_array_get_byte_size+0x2e>
 800d0ac:	3107      	adds	r1, #7
 800d0ae:	08c8      	lsrs	r0, r1, #3
 800d0b0:	4770      	bx	lr
 800d0b2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800d0b6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800d0ba:	3107      	adds	r1, #7
 800d0bc:	08c8      	lsrs	r0, r1, #3
 800d0be:	4770      	bx	lr
 800d0c0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800d0c4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800d0c8:	3107      	adds	r1, #7
 800d0ca:	08c8      	lsrs	r0, r1, #3
 800d0cc:	4770      	bx	lr
 800d0ce:	4608      	mov	r0, r1
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop

0800d0d4 <ai_array_get_data_byte_size>:
 800d0d4:	b169      	cbz	r1, 800d0f2 <ai_array_get_data_byte_size+0x1e>
 800d0d6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d0da:	fb03 f101 	mul.w	r1, r3, r1
 800d0de:	1dcb      	adds	r3, r1, #7
 800d0e0:	f023 0307 	bic.w	r3, r3, #7
 800d0e4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d0e8:	fa23 f000 	lsr.w	r0, r3, r0
 800d0ec:	3007      	adds	r0, #7
 800d0ee:	08c0      	lsrs	r0, r0, #3
 800d0f0:	4770      	bx	lr
 800d0f2:	4608      	mov	r0, r1
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop

0800d0f8 <ai_version_get>:
 800d0f8:	0212      	lsls	r2, r2, #8
 800d0fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d0fe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800d102:	4770      	bx	lr

0800d104 <get_tensor_byte_size>:
 800d104:	b410      	push	{r4}
 800d106:	6983      	ldr	r3, [r0, #24]
 800d108:	68c4      	ldr	r4, [r0, #12]
 800d10a:	6941      	ldr	r1, [r0, #20]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68e0      	ldr	r0, [r4, #12]
 800d110:	4a07      	ldr	r2, [pc, #28]	@ (800d130 <get_tensor_byte_size+0x2c>)
 800d112:	68c9      	ldr	r1, [r1, #12]
 800d114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d118:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800d11c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d120:	fb01 f000 	mul.w	r0, r1, r0
 800d124:	4293      	cmp	r3, r2
 800d126:	bf04      	itt	eq
 800d128:	3007      	addeq	r0, #7
 800d12a:	08c0      	lsreq	r0, r0, #3
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	000400c0 	.word	0x000400c0

0800d134 <malloc>:
 800d134:	4b02      	ldr	r3, [pc, #8]	@ (800d140 <malloc+0xc>)
 800d136:	4601      	mov	r1, r0
 800d138:	6818      	ldr	r0, [r3, #0]
 800d13a:	f000 b825 	b.w	800d188 <_malloc_r>
 800d13e:	bf00      	nop
 800d140:	20000a44 	.word	0x20000a44

0800d144 <sbrk_aligned>:
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	4e0f      	ldr	r6, [pc, #60]	@ (800d184 <sbrk_aligned+0x40>)
 800d148:	460c      	mov	r4, r1
 800d14a:	6831      	ldr	r1, [r6, #0]
 800d14c:	4605      	mov	r5, r0
 800d14e:	b911      	cbnz	r1, 800d156 <sbrk_aligned+0x12>
 800d150:	f000 ff96 	bl	800e080 <_sbrk_r>
 800d154:	6030      	str	r0, [r6, #0]
 800d156:	4621      	mov	r1, r4
 800d158:	4628      	mov	r0, r5
 800d15a:	f000 ff91 	bl	800e080 <_sbrk_r>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	d103      	bne.n	800d16a <sbrk_aligned+0x26>
 800d162:	f04f 34ff 	mov.w	r4, #4294967295
 800d166:	4620      	mov	r0, r4
 800d168:	bd70      	pop	{r4, r5, r6, pc}
 800d16a:	1cc4      	adds	r4, r0, #3
 800d16c:	f024 0403 	bic.w	r4, r4, #3
 800d170:	42a0      	cmp	r0, r4
 800d172:	d0f8      	beq.n	800d166 <sbrk_aligned+0x22>
 800d174:	1a21      	subs	r1, r4, r0
 800d176:	4628      	mov	r0, r5
 800d178:	f000 ff82 	bl	800e080 <_sbrk_r>
 800d17c:	3001      	adds	r0, #1
 800d17e:	d1f2      	bne.n	800d166 <sbrk_aligned+0x22>
 800d180:	e7ef      	b.n	800d162 <sbrk_aligned+0x1e>
 800d182:	bf00      	nop
 800d184:	200033f8 	.word	0x200033f8

0800d188 <_malloc_r>:
 800d188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d18c:	1ccd      	adds	r5, r1, #3
 800d18e:	f025 0503 	bic.w	r5, r5, #3
 800d192:	3508      	adds	r5, #8
 800d194:	2d0c      	cmp	r5, #12
 800d196:	bf38      	it	cc
 800d198:	250c      	movcc	r5, #12
 800d19a:	2d00      	cmp	r5, #0
 800d19c:	4606      	mov	r6, r0
 800d19e:	db01      	blt.n	800d1a4 <_malloc_r+0x1c>
 800d1a0:	42a9      	cmp	r1, r5
 800d1a2:	d904      	bls.n	800d1ae <_malloc_r+0x26>
 800d1a4:	230c      	movs	r3, #12
 800d1a6:	6033      	str	r3, [r6, #0]
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d284 <_malloc_r+0xfc>
 800d1b2:	f000 f869 	bl	800d288 <__malloc_lock>
 800d1b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ba:	461c      	mov	r4, r3
 800d1bc:	bb44      	cbnz	r4, 800d210 <_malloc_r+0x88>
 800d1be:	4629      	mov	r1, r5
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	f7ff ffbf 	bl	800d144 <sbrk_aligned>
 800d1c6:	1c43      	adds	r3, r0, #1
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	d158      	bne.n	800d27e <_malloc_r+0xf6>
 800d1cc:	f8d8 4000 	ldr.w	r4, [r8]
 800d1d0:	4627      	mov	r7, r4
 800d1d2:	2f00      	cmp	r7, #0
 800d1d4:	d143      	bne.n	800d25e <_malloc_r+0xd6>
 800d1d6:	2c00      	cmp	r4, #0
 800d1d8:	d04b      	beq.n	800d272 <_malloc_r+0xea>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	4639      	mov	r1, r7
 800d1de:	4630      	mov	r0, r6
 800d1e0:	eb04 0903 	add.w	r9, r4, r3
 800d1e4:	f000 ff4c 	bl	800e080 <_sbrk_r>
 800d1e8:	4581      	cmp	r9, r0
 800d1ea:	d142      	bne.n	800d272 <_malloc_r+0xea>
 800d1ec:	6821      	ldr	r1, [r4, #0]
 800d1ee:	1a6d      	subs	r5, r5, r1
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7ff ffa6 	bl	800d144 <sbrk_aligned>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d03a      	beq.n	800d272 <_malloc_r+0xea>
 800d1fc:	6823      	ldr	r3, [r4, #0]
 800d1fe:	442b      	add	r3, r5
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	f8d8 3000 	ldr.w	r3, [r8]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	bb62      	cbnz	r2, 800d264 <_malloc_r+0xdc>
 800d20a:	f8c8 7000 	str.w	r7, [r8]
 800d20e:	e00f      	b.n	800d230 <_malloc_r+0xa8>
 800d210:	6822      	ldr	r2, [r4, #0]
 800d212:	1b52      	subs	r2, r2, r5
 800d214:	d420      	bmi.n	800d258 <_malloc_r+0xd0>
 800d216:	2a0b      	cmp	r2, #11
 800d218:	d917      	bls.n	800d24a <_malloc_r+0xc2>
 800d21a:	1961      	adds	r1, r4, r5
 800d21c:	42a3      	cmp	r3, r4
 800d21e:	6025      	str	r5, [r4, #0]
 800d220:	bf18      	it	ne
 800d222:	6059      	strne	r1, [r3, #4]
 800d224:	6863      	ldr	r3, [r4, #4]
 800d226:	bf08      	it	eq
 800d228:	f8c8 1000 	streq.w	r1, [r8]
 800d22c:	5162      	str	r2, [r4, r5]
 800d22e:	604b      	str	r3, [r1, #4]
 800d230:	4630      	mov	r0, r6
 800d232:	f000 f82f 	bl	800d294 <__malloc_unlock>
 800d236:	f104 000b 	add.w	r0, r4, #11
 800d23a:	1d23      	adds	r3, r4, #4
 800d23c:	f020 0007 	bic.w	r0, r0, #7
 800d240:	1ac2      	subs	r2, r0, r3
 800d242:	bf1c      	itt	ne
 800d244:	1a1b      	subne	r3, r3, r0
 800d246:	50a3      	strne	r3, [r4, r2]
 800d248:	e7af      	b.n	800d1aa <_malloc_r+0x22>
 800d24a:	6862      	ldr	r2, [r4, #4]
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	bf0c      	ite	eq
 800d250:	f8c8 2000 	streq.w	r2, [r8]
 800d254:	605a      	strne	r2, [r3, #4]
 800d256:	e7eb      	b.n	800d230 <_malloc_r+0xa8>
 800d258:	4623      	mov	r3, r4
 800d25a:	6864      	ldr	r4, [r4, #4]
 800d25c:	e7ae      	b.n	800d1bc <_malloc_r+0x34>
 800d25e:	463c      	mov	r4, r7
 800d260:	687f      	ldr	r7, [r7, #4]
 800d262:	e7b6      	b.n	800d1d2 <_malloc_r+0x4a>
 800d264:	461a      	mov	r2, r3
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	42a3      	cmp	r3, r4
 800d26a:	d1fb      	bne.n	800d264 <_malloc_r+0xdc>
 800d26c:	2300      	movs	r3, #0
 800d26e:	6053      	str	r3, [r2, #4]
 800d270:	e7de      	b.n	800d230 <_malloc_r+0xa8>
 800d272:	230c      	movs	r3, #12
 800d274:	6033      	str	r3, [r6, #0]
 800d276:	4630      	mov	r0, r6
 800d278:	f000 f80c 	bl	800d294 <__malloc_unlock>
 800d27c:	e794      	b.n	800d1a8 <_malloc_r+0x20>
 800d27e:	6005      	str	r5, [r0, #0]
 800d280:	e7d6      	b.n	800d230 <_malloc_r+0xa8>
 800d282:	bf00      	nop
 800d284:	200033fc 	.word	0x200033fc

0800d288 <__malloc_lock>:
 800d288:	4801      	ldr	r0, [pc, #4]	@ (800d290 <__malloc_lock+0x8>)
 800d28a:	f000 bf46 	b.w	800e11a <__retarget_lock_acquire_recursive>
 800d28e:	bf00      	nop
 800d290:	20003540 	.word	0x20003540

0800d294 <__malloc_unlock>:
 800d294:	4801      	ldr	r0, [pc, #4]	@ (800d29c <__malloc_unlock+0x8>)
 800d296:	f000 bf41 	b.w	800e11c <__retarget_lock_release_recursive>
 800d29a:	bf00      	nop
 800d29c:	20003540 	.word	0x20003540

0800d2a0 <_realloc_r>:
 800d2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	4615      	mov	r5, r2
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	b921      	cbnz	r1, 800d2b6 <_realloc_r+0x16>
 800d2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	f7ff bf69 	b.w	800d188 <_malloc_r>
 800d2b6:	b92a      	cbnz	r2, 800d2c4 <_realloc_r+0x24>
 800d2b8:	f001 fd8e 	bl	800edd8 <_free_r>
 800d2bc:	2400      	movs	r4, #0
 800d2be:	4620      	mov	r0, r4
 800d2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c4:	f002 f954 	bl	800f570 <_malloc_usable_size_r>
 800d2c8:	4285      	cmp	r5, r0
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	d802      	bhi.n	800d2d4 <_realloc_r+0x34>
 800d2ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d2d2:	d8f4      	bhi.n	800d2be <_realloc_r+0x1e>
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	4640      	mov	r0, r8
 800d2d8:	f7ff ff56 	bl	800d188 <_malloc_r>
 800d2dc:	4607      	mov	r7, r0
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d0ec      	beq.n	800d2bc <_realloc_r+0x1c>
 800d2e2:	42b5      	cmp	r5, r6
 800d2e4:	462a      	mov	r2, r5
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	bf28      	it	cs
 800d2ea:	4632      	movcs	r2, r6
 800d2ec:	f000 ff17 	bl	800e11e <memcpy>
 800d2f0:	4621      	mov	r1, r4
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	f001 fd70 	bl	800edd8 <_free_r>
 800d2f8:	463c      	mov	r4, r7
 800d2fa:	e7e0      	b.n	800d2be <_realloc_r+0x1e>

0800d2fc <__cvt>:
 800d2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d300:	ec57 6b10 	vmov	r6, r7, d0
 800d304:	2f00      	cmp	r7, #0
 800d306:	460c      	mov	r4, r1
 800d308:	4619      	mov	r1, r3
 800d30a:	463b      	mov	r3, r7
 800d30c:	bfbb      	ittet	lt
 800d30e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d312:	461f      	movlt	r7, r3
 800d314:	2300      	movge	r3, #0
 800d316:	232d      	movlt	r3, #45	@ 0x2d
 800d318:	700b      	strb	r3, [r1, #0]
 800d31a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d31c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d320:	4691      	mov	r9, r2
 800d322:	f023 0820 	bic.w	r8, r3, #32
 800d326:	bfbc      	itt	lt
 800d328:	4632      	movlt	r2, r6
 800d32a:	4616      	movlt	r6, r2
 800d32c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d330:	d005      	beq.n	800d33e <__cvt+0x42>
 800d332:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d336:	d100      	bne.n	800d33a <__cvt+0x3e>
 800d338:	3401      	adds	r4, #1
 800d33a:	2102      	movs	r1, #2
 800d33c:	e000      	b.n	800d340 <__cvt+0x44>
 800d33e:	2103      	movs	r1, #3
 800d340:	ab03      	add	r3, sp, #12
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	ab02      	add	r3, sp, #8
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	ec47 6b10 	vmov	d0, r6, r7
 800d34c:	4653      	mov	r3, sl
 800d34e:	4622      	mov	r2, r4
 800d350:	f000 ff7e 	bl	800e250 <_dtoa_r>
 800d354:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d358:	4605      	mov	r5, r0
 800d35a:	d119      	bne.n	800d390 <__cvt+0x94>
 800d35c:	f019 0f01 	tst.w	r9, #1
 800d360:	d00e      	beq.n	800d380 <__cvt+0x84>
 800d362:	eb00 0904 	add.w	r9, r0, r4
 800d366:	2200      	movs	r2, #0
 800d368:	2300      	movs	r3, #0
 800d36a:	4630      	mov	r0, r6
 800d36c:	4639      	mov	r1, r7
 800d36e:	f7f3 fbb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800d372:	b108      	cbz	r0, 800d378 <__cvt+0x7c>
 800d374:	f8cd 900c 	str.w	r9, [sp, #12]
 800d378:	2230      	movs	r2, #48	@ 0x30
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	454b      	cmp	r3, r9
 800d37e:	d31e      	bcc.n	800d3be <__cvt+0xc2>
 800d380:	9b03      	ldr	r3, [sp, #12]
 800d382:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d384:	1b5b      	subs	r3, r3, r5
 800d386:	4628      	mov	r0, r5
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	b004      	add	sp, #16
 800d38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d390:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d394:	eb00 0904 	add.w	r9, r0, r4
 800d398:	d1e5      	bne.n	800d366 <__cvt+0x6a>
 800d39a:	7803      	ldrb	r3, [r0, #0]
 800d39c:	2b30      	cmp	r3, #48	@ 0x30
 800d39e:	d10a      	bne.n	800d3b6 <__cvt+0xba>
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	f7f3 fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3ac:	b918      	cbnz	r0, 800d3b6 <__cvt+0xba>
 800d3ae:	f1c4 0401 	rsb	r4, r4, #1
 800d3b2:	f8ca 4000 	str.w	r4, [sl]
 800d3b6:	f8da 3000 	ldr.w	r3, [sl]
 800d3ba:	4499      	add	r9, r3
 800d3bc:	e7d3      	b.n	800d366 <__cvt+0x6a>
 800d3be:	1c59      	adds	r1, r3, #1
 800d3c0:	9103      	str	r1, [sp, #12]
 800d3c2:	701a      	strb	r2, [r3, #0]
 800d3c4:	e7d9      	b.n	800d37a <__cvt+0x7e>

0800d3c6 <__exponent>:
 800d3c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3c8:	2900      	cmp	r1, #0
 800d3ca:	bfba      	itte	lt
 800d3cc:	4249      	neglt	r1, r1
 800d3ce:	232d      	movlt	r3, #45	@ 0x2d
 800d3d0:	232b      	movge	r3, #43	@ 0x2b
 800d3d2:	2909      	cmp	r1, #9
 800d3d4:	7002      	strb	r2, [r0, #0]
 800d3d6:	7043      	strb	r3, [r0, #1]
 800d3d8:	dd29      	ble.n	800d42e <__exponent+0x68>
 800d3da:	f10d 0307 	add.w	r3, sp, #7
 800d3de:	461d      	mov	r5, r3
 800d3e0:	270a      	movs	r7, #10
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d3e8:	fb07 1416 	mls	r4, r7, r6, r1
 800d3ec:	3430      	adds	r4, #48	@ 0x30
 800d3ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d3f2:	460c      	mov	r4, r1
 800d3f4:	2c63      	cmp	r4, #99	@ 0x63
 800d3f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	dcf1      	bgt.n	800d3e2 <__exponent+0x1c>
 800d3fe:	3130      	adds	r1, #48	@ 0x30
 800d400:	1e94      	subs	r4, r2, #2
 800d402:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d406:	1c41      	adds	r1, r0, #1
 800d408:	4623      	mov	r3, r4
 800d40a:	42ab      	cmp	r3, r5
 800d40c:	d30a      	bcc.n	800d424 <__exponent+0x5e>
 800d40e:	f10d 0309 	add.w	r3, sp, #9
 800d412:	1a9b      	subs	r3, r3, r2
 800d414:	42ac      	cmp	r4, r5
 800d416:	bf88      	it	hi
 800d418:	2300      	movhi	r3, #0
 800d41a:	3302      	adds	r3, #2
 800d41c:	4403      	add	r3, r0
 800d41e:	1a18      	subs	r0, r3, r0
 800d420:	b003      	add	sp, #12
 800d422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d424:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d428:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d42c:	e7ed      	b.n	800d40a <__exponent+0x44>
 800d42e:	2330      	movs	r3, #48	@ 0x30
 800d430:	3130      	adds	r1, #48	@ 0x30
 800d432:	7083      	strb	r3, [r0, #2]
 800d434:	70c1      	strb	r1, [r0, #3]
 800d436:	1d03      	adds	r3, r0, #4
 800d438:	e7f1      	b.n	800d41e <__exponent+0x58>
	...

0800d43c <_printf_float>:
 800d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	b08d      	sub	sp, #52	@ 0x34
 800d442:	460c      	mov	r4, r1
 800d444:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d448:	4616      	mov	r6, r2
 800d44a:	461f      	mov	r7, r3
 800d44c:	4605      	mov	r5, r0
 800d44e:	f000 fddf 	bl	800e010 <_localeconv_r>
 800d452:	6803      	ldr	r3, [r0, #0]
 800d454:	9304      	str	r3, [sp, #16]
 800d456:	4618      	mov	r0, r3
 800d458:	f7f2 ff12 	bl	8000280 <strlen>
 800d45c:	2300      	movs	r3, #0
 800d45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d460:	f8d8 3000 	ldr.w	r3, [r8]
 800d464:	9005      	str	r0, [sp, #20]
 800d466:	3307      	adds	r3, #7
 800d468:	f023 0307 	bic.w	r3, r3, #7
 800d46c:	f103 0208 	add.w	r2, r3, #8
 800d470:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d474:	f8d4 b000 	ldr.w	fp, [r4]
 800d478:	f8c8 2000 	str.w	r2, [r8]
 800d47c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d480:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d484:	9307      	str	r3, [sp, #28]
 800d486:	f8cd 8018 	str.w	r8, [sp, #24]
 800d48a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d48e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d492:	4b9c      	ldr	r3, [pc, #624]	@ (800d704 <_printf_float+0x2c8>)
 800d494:	f04f 32ff 	mov.w	r2, #4294967295
 800d498:	f7f3 fb50 	bl	8000b3c <__aeabi_dcmpun>
 800d49c:	bb70      	cbnz	r0, 800d4fc <_printf_float+0xc0>
 800d49e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4a2:	4b98      	ldr	r3, [pc, #608]	@ (800d704 <_printf_float+0x2c8>)
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a8:	f7f3 fb2a 	bl	8000b00 <__aeabi_dcmple>
 800d4ac:	bb30      	cbnz	r0, 800d4fc <_printf_float+0xc0>
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	f7f3 fb19 	bl	8000aec <__aeabi_dcmplt>
 800d4ba:	b110      	cbz	r0, 800d4c2 <_printf_float+0x86>
 800d4bc:	232d      	movs	r3, #45	@ 0x2d
 800d4be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4c2:	4a91      	ldr	r2, [pc, #580]	@ (800d708 <_printf_float+0x2cc>)
 800d4c4:	4b91      	ldr	r3, [pc, #580]	@ (800d70c <_printf_float+0x2d0>)
 800d4c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d4ca:	bf94      	ite	ls
 800d4cc:	4690      	movls	r8, r2
 800d4ce:	4698      	movhi	r8, r3
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	6123      	str	r3, [r4, #16]
 800d4d4:	f02b 0304 	bic.w	r3, fp, #4
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	f04f 0900 	mov.w	r9, #0
 800d4de:	9700      	str	r7, [sp, #0]
 800d4e0:	4633      	mov	r3, r6
 800d4e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f000 f9d2 	bl	800d890 <_printf_common>
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	f040 808d 	bne.w	800d60c <_printf_float+0x1d0>
 800d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f6:	b00d      	add	sp, #52	@ 0x34
 800d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fc:	4642      	mov	r2, r8
 800d4fe:	464b      	mov	r3, r9
 800d500:	4640      	mov	r0, r8
 800d502:	4649      	mov	r1, r9
 800d504:	f7f3 fb1a 	bl	8000b3c <__aeabi_dcmpun>
 800d508:	b140      	cbz	r0, 800d51c <_printf_float+0xe0>
 800d50a:	464b      	mov	r3, r9
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bfbc      	itt	lt
 800d510:	232d      	movlt	r3, #45	@ 0x2d
 800d512:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d516:	4a7e      	ldr	r2, [pc, #504]	@ (800d710 <_printf_float+0x2d4>)
 800d518:	4b7e      	ldr	r3, [pc, #504]	@ (800d714 <_printf_float+0x2d8>)
 800d51a:	e7d4      	b.n	800d4c6 <_printf_float+0x8a>
 800d51c:	6863      	ldr	r3, [r4, #4]
 800d51e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d522:	9206      	str	r2, [sp, #24]
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	d13b      	bne.n	800d5a0 <_printf_float+0x164>
 800d528:	2306      	movs	r3, #6
 800d52a:	6063      	str	r3, [r4, #4]
 800d52c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d530:	2300      	movs	r3, #0
 800d532:	6022      	str	r2, [r4, #0]
 800d534:	9303      	str	r3, [sp, #12]
 800d536:	ab0a      	add	r3, sp, #40	@ 0x28
 800d538:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d53c:	ab09      	add	r3, sp, #36	@ 0x24
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	6861      	ldr	r1, [r4, #4]
 800d542:	ec49 8b10 	vmov	d0, r8, r9
 800d546:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d54a:	4628      	mov	r0, r5
 800d54c:	f7ff fed6 	bl	800d2fc <__cvt>
 800d550:	9b06      	ldr	r3, [sp, #24]
 800d552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d554:	2b47      	cmp	r3, #71	@ 0x47
 800d556:	4680      	mov	r8, r0
 800d558:	d129      	bne.n	800d5ae <_printf_float+0x172>
 800d55a:	1cc8      	adds	r0, r1, #3
 800d55c:	db02      	blt.n	800d564 <_printf_float+0x128>
 800d55e:	6863      	ldr	r3, [r4, #4]
 800d560:	4299      	cmp	r1, r3
 800d562:	dd41      	ble.n	800d5e8 <_printf_float+0x1ac>
 800d564:	f1aa 0a02 	sub.w	sl, sl, #2
 800d568:	fa5f fa8a 	uxtb.w	sl, sl
 800d56c:	3901      	subs	r1, #1
 800d56e:	4652      	mov	r2, sl
 800d570:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d574:	9109      	str	r1, [sp, #36]	@ 0x24
 800d576:	f7ff ff26 	bl	800d3c6 <__exponent>
 800d57a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d57c:	1813      	adds	r3, r2, r0
 800d57e:	2a01      	cmp	r2, #1
 800d580:	4681      	mov	r9, r0
 800d582:	6123      	str	r3, [r4, #16]
 800d584:	dc02      	bgt.n	800d58c <_printf_float+0x150>
 800d586:	6822      	ldr	r2, [r4, #0]
 800d588:	07d2      	lsls	r2, r2, #31
 800d58a:	d501      	bpl.n	800d590 <_printf_float+0x154>
 800d58c:	3301      	adds	r3, #1
 800d58e:	6123      	str	r3, [r4, #16]
 800d590:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d594:	2b00      	cmp	r3, #0
 800d596:	d0a2      	beq.n	800d4de <_printf_float+0xa2>
 800d598:	232d      	movs	r3, #45	@ 0x2d
 800d59a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d59e:	e79e      	b.n	800d4de <_printf_float+0xa2>
 800d5a0:	9a06      	ldr	r2, [sp, #24]
 800d5a2:	2a47      	cmp	r2, #71	@ 0x47
 800d5a4:	d1c2      	bne.n	800d52c <_printf_float+0xf0>
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1c0      	bne.n	800d52c <_printf_float+0xf0>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e7bd      	b.n	800d52a <_printf_float+0xee>
 800d5ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d5b2:	d9db      	bls.n	800d56c <_printf_float+0x130>
 800d5b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d5b8:	d118      	bne.n	800d5ec <_printf_float+0x1b0>
 800d5ba:	2900      	cmp	r1, #0
 800d5bc:	6863      	ldr	r3, [r4, #4]
 800d5be:	dd0b      	ble.n	800d5d8 <_printf_float+0x19c>
 800d5c0:	6121      	str	r1, [r4, #16]
 800d5c2:	b913      	cbnz	r3, 800d5ca <_printf_float+0x18e>
 800d5c4:	6822      	ldr	r2, [r4, #0]
 800d5c6:	07d0      	lsls	r0, r2, #31
 800d5c8:	d502      	bpl.n	800d5d0 <_printf_float+0x194>
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	440b      	add	r3, r1
 800d5ce:	6123      	str	r3, [r4, #16]
 800d5d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d5d2:	f04f 0900 	mov.w	r9, #0
 800d5d6:	e7db      	b.n	800d590 <_printf_float+0x154>
 800d5d8:	b913      	cbnz	r3, 800d5e0 <_printf_float+0x1a4>
 800d5da:	6822      	ldr	r2, [r4, #0]
 800d5dc:	07d2      	lsls	r2, r2, #31
 800d5de:	d501      	bpl.n	800d5e4 <_printf_float+0x1a8>
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	e7f4      	b.n	800d5ce <_printf_float+0x192>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e7f2      	b.n	800d5ce <_printf_float+0x192>
 800d5e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5ee:	4299      	cmp	r1, r3
 800d5f0:	db05      	blt.n	800d5fe <_printf_float+0x1c2>
 800d5f2:	6823      	ldr	r3, [r4, #0]
 800d5f4:	6121      	str	r1, [r4, #16]
 800d5f6:	07d8      	lsls	r0, r3, #31
 800d5f8:	d5ea      	bpl.n	800d5d0 <_printf_float+0x194>
 800d5fa:	1c4b      	adds	r3, r1, #1
 800d5fc:	e7e7      	b.n	800d5ce <_printf_float+0x192>
 800d5fe:	2900      	cmp	r1, #0
 800d600:	bfd4      	ite	le
 800d602:	f1c1 0202 	rsble	r2, r1, #2
 800d606:	2201      	movgt	r2, #1
 800d608:	4413      	add	r3, r2
 800d60a:	e7e0      	b.n	800d5ce <_printf_float+0x192>
 800d60c:	6823      	ldr	r3, [r4, #0]
 800d60e:	055a      	lsls	r2, r3, #21
 800d610:	d407      	bmi.n	800d622 <_printf_float+0x1e6>
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	4642      	mov	r2, r8
 800d616:	4631      	mov	r1, r6
 800d618:	4628      	mov	r0, r5
 800d61a:	47b8      	blx	r7
 800d61c:	3001      	adds	r0, #1
 800d61e:	d12b      	bne.n	800d678 <_printf_float+0x23c>
 800d620:	e767      	b.n	800d4f2 <_printf_float+0xb6>
 800d622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d626:	f240 80dd 	bls.w	800d7e4 <_printf_float+0x3a8>
 800d62a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d62e:	2200      	movs	r2, #0
 800d630:	2300      	movs	r3, #0
 800d632:	f7f3 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 800d636:	2800      	cmp	r0, #0
 800d638:	d033      	beq.n	800d6a2 <_printf_float+0x266>
 800d63a:	4a37      	ldr	r2, [pc, #220]	@ (800d718 <_printf_float+0x2dc>)
 800d63c:	2301      	movs	r3, #1
 800d63e:	4631      	mov	r1, r6
 800d640:	4628      	mov	r0, r5
 800d642:	47b8      	blx	r7
 800d644:	3001      	adds	r0, #1
 800d646:	f43f af54 	beq.w	800d4f2 <_printf_float+0xb6>
 800d64a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d64e:	4543      	cmp	r3, r8
 800d650:	db02      	blt.n	800d658 <_printf_float+0x21c>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	07d8      	lsls	r0, r3, #31
 800d656:	d50f      	bpl.n	800d678 <_printf_float+0x23c>
 800d658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d65c:	4631      	mov	r1, r6
 800d65e:	4628      	mov	r0, r5
 800d660:	47b8      	blx	r7
 800d662:	3001      	adds	r0, #1
 800d664:	f43f af45 	beq.w	800d4f2 <_printf_float+0xb6>
 800d668:	f04f 0900 	mov.w	r9, #0
 800d66c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d670:	f104 0a1a 	add.w	sl, r4, #26
 800d674:	45c8      	cmp	r8, r9
 800d676:	dc09      	bgt.n	800d68c <_printf_float+0x250>
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	079b      	lsls	r3, r3, #30
 800d67c:	f100 8103 	bmi.w	800d886 <_printf_float+0x44a>
 800d680:	68e0      	ldr	r0, [r4, #12]
 800d682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d684:	4298      	cmp	r0, r3
 800d686:	bfb8      	it	lt
 800d688:	4618      	movlt	r0, r3
 800d68a:	e734      	b.n	800d4f6 <_printf_float+0xba>
 800d68c:	2301      	movs	r3, #1
 800d68e:	4652      	mov	r2, sl
 800d690:	4631      	mov	r1, r6
 800d692:	4628      	mov	r0, r5
 800d694:	47b8      	blx	r7
 800d696:	3001      	adds	r0, #1
 800d698:	f43f af2b 	beq.w	800d4f2 <_printf_float+0xb6>
 800d69c:	f109 0901 	add.w	r9, r9, #1
 800d6a0:	e7e8      	b.n	800d674 <_printf_float+0x238>
 800d6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	dc39      	bgt.n	800d71c <_printf_float+0x2e0>
 800d6a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d718 <_printf_float+0x2dc>)
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	47b8      	blx	r7
 800d6b2:	3001      	adds	r0, #1
 800d6b4:	f43f af1d 	beq.w	800d4f2 <_printf_float+0xb6>
 800d6b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d6bc:	ea59 0303 	orrs.w	r3, r9, r3
 800d6c0:	d102      	bne.n	800d6c8 <_printf_float+0x28c>
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	07d9      	lsls	r1, r3, #31
 800d6c6:	d5d7      	bpl.n	800d678 <_printf_float+0x23c>
 800d6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	47b8      	blx	r7
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	f43f af0d 	beq.w	800d4f2 <_printf_float+0xb6>
 800d6d8:	f04f 0a00 	mov.w	sl, #0
 800d6dc:	f104 0b1a 	add.w	fp, r4, #26
 800d6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e2:	425b      	negs	r3, r3
 800d6e4:	4553      	cmp	r3, sl
 800d6e6:	dc01      	bgt.n	800d6ec <_printf_float+0x2b0>
 800d6e8:	464b      	mov	r3, r9
 800d6ea:	e793      	b.n	800d614 <_printf_float+0x1d8>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	465a      	mov	r2, fp
 800d6f0:	4631      	mov	r1, r6
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	47b8      	blx	r7
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	f43f aefb 	beq.w	800d4f2 <_printf_float+0xb6>
 800d6fc:	f10a 0a01 	add.w	sl, sl, #1
 800d700:	e7ee      	b.n	800d6e0 <_printf_float+0x2a4>
 800d702:	bf00      	nop
 800d704:	7fefffff 	.word	0x7fefffff
 800d708:	0802a0a8 	.word	0x0802a0a8
 800d70c:	0802a0ac 	.word	0x0802a0ac
 800d710:	0802a0b0 	.word	0x0802a0b0
 800d714:	0802a0b4 	.word	0x0802a0b4
 800d718:	0802a0b8 	.word	0x0802a0b8
 800d71c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d71e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d722:	4553      	cmp	r3, sl
 800d724:	bfa8      	it	ge
 800d726:	4653      	movge	r3, sl
 800d728:	2b00      	cmp	r3, #0
 800d72a:	4699      	mov	r9, r3
 800d72c:	dc36      	bgt.n	800d79c <_printf_float+0x360>
 800d72e:	f04f 0b00 	mov.w	fp, #0
 800d732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d736:	f104 021a 	add.w	r2, r4, #26
 800d73a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d73c:	9306      	str	r3, [sp, #24]
 800d73e:	eba3 0309 	sub.w	r3, r3, r9
 800d742:	455b      	cmp	r3, fp
 800d744:	dc31      	bgt.n	800d7aa <_printf_float+0x36e>
 800d746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d748:	459a      	cmp	sl, r3
 800d74a:	dc3a      	bgt.n	800d7c2 <_printf_float+0x386>
 800d74c:	6823      	ldr	r3, [r4, #0]
 800d74e:	07da      	lsls	r2, r3, #31
 800d750:	d437      	bmi.n	800d7c2 <_printf_float+0x386>
 800d752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d754:	ebaa 0903 	sub.w	r9, sl, r3
 800d758:	9b06      	ldr	r3, [sp, #24]
 800d75a:	ebaa 0303 	sub.w	r3, sl, r3
 800d75e:	4599      	cmp	r9, r3
 800d760:	bfa8      	it	ge
 800d762:	4699      	movge	r9, r3
 800d764:	f1b9 0f00 	cmp.w	r9, #0
 800d768:	dc33      	bgt.n	800d7d2 <_printf_float+0x396>
 800d76a:	f04f 0800 	mov.w	r8, #0
 800d76e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d772:	f104 0b1a 	add.w	fp, r4, #26
 800d776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d778:	ebaa 0303 	sub.w	r3, sl, r3
 800d77c:	eba3 0309 	sub.w	r3, r3, r9
 800d780:	4543      	cmp	r3, r8
 800d782:	f77f af79 	ble.w	800d678 <_printf_float+0x23c>
 800d786:	2301      	movs	r3, #1
 800d788:	465a      	mov	r2, fp
 800d78a:	4631      	mov	r1, r6
 800d78c:	4628      	mov	r0, r5
 800d78e:	47b8      	blx	r7
 800d790:	3001      	adds	r0, #1
 800d792:	f43f aeae 	beq.w	800d4f2 <_printf_float+0xb6>
 800d796:	f108 0801 	add.w	r8, r8, #1
 800d79a:	e7ec      	b.n	800d776 <_printf_float+0x33a>
 800d79c:	4642      	mov	r2, r8
 800d79e:	4631      	mov	r1, r6
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	47b8      	blx	r7
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	d1c2      	bne.n	800d72e <_printf_float+0x2f2>
 800d7a8:	e6a3      	b.n	800d4f2 <_printf_float+0xb6>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	9206      	str	r2, [sp, #24]
 800d7b2:	47b8      	blx	r7
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	f43f ae9c 	beq.w	800d4f2 <_printf_float+0xb6>
 800d7ba:	9a06      	ldr	r2, [sp, #24]
 800d7bc:	f10b 0b01 	add.w	fp, fp, #1
 800d7c0:	e7bb      	b.n	800d73a <_printf_float+0x2fe>
 800d7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7c6:	4631      	mov	r1, r6
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	47b8      	blx	r7
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d1c0      	bne.n	800d752 <_printf_float+0x316>
 800d7d0:	e68f      	b.n	800d4f2 <_printf_float+0xb6>
 800d7d2:	9a06      	ldr	r2, [sp, #24]
 800d7d4:	464b      	mov	r3, r9
 800d7d6:	4442      	add	r2, r8
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b8      	blx	r7
 800d7de:	3001      	adds	r0, #1
 800d7e0:	d1c3      	bne.n	800d76a <_printf_float+0x32e>
 800d7e2:	e686      	b.n	800d4f2 <_printf_float+0xb6>
 800d7e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d7e8:	f1ba 0f01 	cmp.w	sl, #1
 800d7ec:	dc01      	bgt.n	800d7f2 <_printf_float+0x3b6>
 800d7ee:	07db      	lsls	r3, r3, #31
 800d7f0:	d536      	bpl.n	800d860 <_printf_float+0x424>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	4642      	mov	r2, r8
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	47b8      	blx	r7
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	f43f ae78 	beq.w	800d4f2 <_printf_float+0xb6>
 800d802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d806:	4631      	mov	r1, r6
 800d808:	4628      	mov	r0, r5
 800d80a:	47b8      	blx	r7
 800d80c:	3001      	adds	r0, #1
 800d80e:	f43f ae70 	beq.w	800d4f2 <_printf_float+0xb6>
 800d812:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d816:	2200      	movs	r2, #0
 800d818:	2300      	movs	r3, #0
 800d81a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d81e:	f7f3 f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d822:	b9c0      	cbnz	r0, 800d856 <_printf_float+0x41a>
 800d824:	4653      	mov	r3, sl
 800d826:	f108 0201 	add.w	r2, r8, #1
 800d82a:	4631      	mov	r1, r6
 800d82c:	4628      	mov	r0, r5
 800d82e:	47b8      	blx	r7
 800d830:	3001      	adds	r0, #1
 800d832:	d10c      	bne.n	800d84e <_printf_float+0x412>
 800d834:	e65d      	b.n	800d4f2 <_printf_float+0xb6>
 800d836:	2301      	movs	r3, #1
 800d838:	465a      	mov	r2, fp
 800d83a:	4631      	mov	r1, r6
 800d83c:	4628      	mov	r0, r5
 800d83e:	47b8      	blx	r7
 800d840:	3001      	adds	r0, #1
 800d842:	f43f ae56 	beq.w	800d4f2 <_printf_float+0xb6>
 800d846:	f108 0801 	add.w	r8, r8, #1
 800d84a:	45d0      	cmp	r8, sl
 800d84c:	dbf3      	blt.n	800d836 <_printf_float+0x3fa>
 800d84e:	464b      	mov	r3, r9
 800d850:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d854:	e6df      	b.n	800d616 <_printf_float+0x1da>
 800d856:	f04f 0800 	mov.w	r8, #0
 800d85a:	f104 0b1a 	add.w	fp, r4, #26
 800d85e:	e7f4      	b.n	800d84a <_printf_float+0x40e>
 800d860:	2301      	movs	r3, #1
 800d862:	4642      	mov	r2, r8
 800d864:	e7e1      	b.n	800d82a <_printf_float+0x3ee>
 800d866:	2301      	movs	r3, #1
 800d868:	464a      	mov	r2, r9
 800d86a:	4631      	mov	r1, r6
 800d86c:	4628      	mov	r0, r5
 800d86e:	47b8      	blx	r7
 800d870:	3001      	adds	r0, #1
 800d872:	f43f ae3e 	beq.w	800d4f2 <_printf_float+0xb6>
 800d876:	f108 0801 	add.w	r8, r8, #1
 800d87a:	68e3      	ldr	r3, [r4, #12]
 800d87c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d87e:	1a5b      	subs	r3, r3, r1
 800d880:	4543      	cmp	r3, r8
 800d882:	dcf0      	bgt.n	800d866 <_printf_float+0x42a>
 800d884:	e6fc      	b.n	800d680 <_printf_float+0x244>
 800d886:	f04f 0800 	mov.w	r8, #0
 800d88a:	f104 0919 	add.w	r9, r4, #25
 800d88e:	e7f4      	b.n	800d87a <_printf_float+0x43e>

0800d890 <_printf_common>:
 800d890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d894:	4616      	mov	r6, r2
 800d896:	4698      	mov	r8, r3
 800d898:	688a      	ldr	r2, [r1, #8]
 800d89a:	690b      	ldr	r3, [r1, #16]
 800d89c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	bfb8      	it	lt
 800d8a4:	4613      	movlt	r3, r2
 800d8a6:	6033      	str	r3, [r6, #0]
 800d8a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	b10a      	cbz	r2, 800d8b6 <_printf_common+0x26>
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	6033      	str	r3, [r6, #0]
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	0699      	lsls	r1, r3, #26
 800d8ba:	bf42      	ittt	mi
 800d8bc:	6833      	ldrmi	r3, [r6, #0]
 800d8be:	3302      	addmi	r3, #2
 800d8c0:	6033      	strmi	r3, [r6, #0]
 800d8c2:	6825      	ldr	r5, [r4, #0]
 800d8c4:	f015 0506 	ands.w	r5, r5, #6
 800d8c8:	d106      	bne.n	800d8d8 <_printf_common+0x48>
 800d8ca:	f104 0a19 	add.w	sl, r4, #25
 800d8ce:	68e3      	ldr	r3, [r4, #12]
 800d8d0:	6832      	ldr	r2, [r6, #0]
 800d8d2:	1a9b      	subs	r3, r3, r2
 800d8d4:	42ab      	cmp	r3, r5
 800d8d6:	dc26      	bgt.n	800d926 <_printf_common+0x96>
 800d8d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	3b00      	subs	r3, #0
 800d8e0:	bf18      	it	ne
 800d8e2:	2301      	movne	r3, #1
 800d8e4:	0692      	lsls	r2, r2, #26
 800d8e6:	d42b      	bmi.n	800d940 <_printf_common+0xb0>
 800d8e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d8ec:	4641      	mov	r1, r8
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	47c8      	blx	r9
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	d01e      	beq.n	800d934 <_printf_common+0xa4>
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	6922      	ldr	r2, [r4, #16]
 800d8fa:	f003 0306 	and.w	r3, r3, #6
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	bf02      	ittt	eq
 800d902:	68e5      	ldreq	r5, [r4, #12]
 800d904:	6833      	ldreq	r3, [r6, #0]
 800d906:	1aed      	subeq	r5, r5, r3
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	bf0c      	ite	eq
 800d90c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d910:	2500      	movne	r5, #0
 800d912:	4293      	cmp	r3, r2
 800d914:	bfc4      	itt	gt
 800d916:	1a9b      	subgt	r3, r3, r2
 800d918:	18ed      	addgt	r5, r5, r3
 800d91a:	2600      	movs	r6, #0
 800d91c:	341a      	adds	r4, #26
 800d91e:	42b5      	cmp	r5, r6
 800d920:	d11a      	bne.n	800d958 <_printf_common+0xc8>
 800d922:	2000      	movs	r0, #0
 800d924:	e008      	b.n	800d938 <_printf_common+0xa8>
 800d926:	2301      	movs	r3, #1
 800d928:	4652      	mov	r2, sl
 800d92a:	4641      	mov	r1, r8
 800d92c:	4638      	mov	r0, r7
 800d92e:	47c8      	blx	r9
 800d930:	3001      	adds	r0, #1
 800d932:	d103      	bne.n	800d93c <_printf_common+0xac>
 800d934:	f04f 30ff 	mov.w	r0, #4294967295
 800d938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d93c:	3501      	adds	r5, #1
 800d93e:	e7c6      	b.n	800d8ce <_printf_common+0x3e>
 800d940:	18e1      	adds	r1, r4, r3
 800d942:	1c5a      	adds	r2, r3, #1
 800d944:	2030      	movs	r0, #48	@ 0x30
 800d946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d94a:	4422      	add	r2, r4
 800d94c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d954:	3302      	adds	r3, #2
 800d956:	e7c7      	b.n	800d8e8 <_printf_common+0x58>
 800d958:	2301      	movs	r3, #1
 800d95a:	4622      	mov	r2, r4
 800d95c:	4641      	mov	r1, r8
 800d95e:	4638      	mov	r0, r7
 800d960:	47c8      	blx	r9
 800d962:	3001      	adds	r0, #1
 800d964:	d0e6      	beq.n	800d934 <_printf_common+0xa4>
 800d966:	3601      	adds	r6, #1
 800d968:	e7d9      	b.n	800d91e <_printf_common+0x8e>
	...

0800d96c <_printf_i>:
 800d96c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d970:	7e0f      	ldrb	r7, [r1, #24]
 800d972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d974:	2f78      	cmp	r7, #120	@ 0x78
 800d976:	4691      	mov	r9, r2
 800d978:	4680      	mov	r8, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	469a      	mov	sl, r3
 800d97e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d982:	d807      	bhi.n	800d994 <_printf_i+0x28>
 800d984:	2f62      	cmp	r7, #98	@ 0x62
 800d986:	d80a      	bhi.n	800d99e <_printf_i+0x32>
 800d988:	2f00      	cmp	r7, #0
 800d98a:	f000 80d2 	beq.w	800db32 <_printf_i+0x1c6>
 800d98e:	2f58      	cmp	r7, #88	@ 0x58
 800d990:	f000 80b9 	beq.w	800db06 <_printf_i+0x19a>
 800d994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d99c:	e03a      	b.n	800da14 <_printf_i+0xa8>
 800d99e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9a2:	2b15      	cmp	r3, #21
 800d9a4:	d8f6      	bhi.n	800d994 <_printf_i+0x28>
 800d9a6:	a101      	add	r1, pc, #4	@ (adr r1, 800d9ac <_printf_i+0x40>)
 800d9a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9ac:	0800da05 	.word	0x0800da05
 800d9b0:	0800da19 	.word	0x0800da19
 800d9b4:	0800d995 	.word	0x0800d995
 800d9b8:	0800d995 	.word	0x0800d995
 800d9bc:	0800d995 	.word	0x0800d995
 800d9c0:	0800d995 	.word	0x0800d995
 800d9c4:	0800da19 	.word	0x0800da19
 800d9c8:	0800d995 	.word	0x0800d995
 800d9cc:	0800d995 	.word	0x0800d995
 800d9d0:	0800d995 	.word	0x0800d995
 800d9d4:	0800d995 	.word	0x0800d995
 800d9d8:	0800db19 	.word	0x0800db19
 800d9dc:	0800da43 	.word	0x0800da43
 800d9e0:	0800dad3 	.word	0x0800dad3
 800d9e4:	0800d995 	.word	0x0800d995
 800d9e8:	0800d995 	.word	0x0800d995
 800d9ec:	0800db3b 	.word	0x0800db3b
 800d9f0:	0800d995 	.word	0x0800d995
 800d9f4:	0800da43 	.word	0x0800da43
 800d9f8:	0800d995 	.word	0x0800d995
 800d9fc:	0800d995 	.word	0x0800d995
 800da00:	0800dadb 	.word	0x0800dadb
 800da04:	6833      	ldr	r3, [r6, #0]
 800da06:	1d1a      	adds	r2, r3, #4
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	6032      	str	r2, [r6, #0]
 800da0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da14:	2301      	movs	r3, #1
 800da16:	e09d      	b.n	800db54 <_printf_i+0x1e8>
 800da18:	6833      	ldr	r3, [r6, #0]
 800da1a:	6820      	ldr	r0, [r4, #0]
 800da1c:	1d19      	adds	r1, r3, #4
 800da1e:	6031      	str	r1, [r6, #0]
 800da20:	0606      	lsls	r6, r0, #24
 800da22:	d501      	bpl.n	800da28 <_printf_i+0xbc>
 800da24:	681d      	ldr	r5, [r3, #0]
 800da26:	e003      	b.n	800da30 <_printf_i+0xc4>
 800da28:	0645      	lsls	r5, r0, #25
 800da2a:	d5fb      	bpl.n	800da24 <_printf_i+0xb8>
 800da2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da30:	2d00      	cmp	r5, #0
 800da32:	da03      	bge.n	800da3c <_printf_i+0xd0>
 800da34:	232d      	movs	r3, #45	@ 0x2d
 800da36:	426d      	negs	r5, r5
 800da38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da3c:	4859      	ldr	r0, [pc, #356]	@ (800dba4 <_printf_i+0x238>)
 800da3e:	230a      	movs	r3, #10
 800da40:	e011      	b.n	800da66 <_printf_i+0xfa>
 800da42:	6821      	ldr	r1, [r4, #0]
 800da44:	6833      	ldr	r3, [r6, #0]
 800da46:	0608      	lsls	r0, r1, #24
 800da48:	f853 5b04 	ldr.w	r5, [r3], #4
 800da4c:	d402      	bmi.n	800da54 <_printf_i+0xe8>
 800da4e:	0649      	lsls	r1, r1, #25
 800da50:	bf48      	it	mi
 800da52:	b2ad      	uxthmi	r5, r5
 800da54:	2f6f      	cmp	r7, #111	@ 0x6f
 800da56:	4853      	ldr	r0, [pc, #332]	@ (800dba4 <_printf_i+0x238>)
 800da58:	6033      	str	r3, [r6, #0]
 800da5a:	bf14      	ite	ne
 800da5c:	230a      	movne	r3, #10
 800da5e:	2308      	moveq	r3, #8
 800da60:	2100      	movs	r1, #0
 800da62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da66:	6866      	ldr	r6, [r4, #4]
 800da68:	60a6      	str	r6, [r4, #8]
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	bfa2      	ittt	ge
 800da6e:	6821      	ldrge	r1, [r4, #0]
 800da70:	f021 0104 	bicge.w	r1, r1, #4
 800da74:	6021      	strge	r1, [r4, #0]
 800da76:	b90d      	cbnz	r5, 800da7c <_printf_i+0x110>
 800da78:	2e00      	cmp	r6, #0
 800da7a:	d04b      	beq.n	800db14 <_printf_i+0x1a8>
 800da7c:	4616      	mov	r6, r2
 800da7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800da82:	fb03 5711 	mls	r7, r3, r1, r5
 800da86:	5dc7      	ldrb	r7, [r0, r7]
 800da88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da8c:	462f      	mov	r7, r5
 800da8e:	42bb      	cmp	r3, r7
 800da90:	460d      	mov	r5, r1
 800da92:	d9f4      	bls.n	800da7e <_printf_i+0x112>
 800da94:	2b08      	cmp	r3, #8
 800da96:	d10b      	bne.n	800dab0 <_printf_i+0x144>
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	07df      	lsls	r7, r3, #31
 800da9c:	d508      	bpl.n	800dab0 <_printf_i+0x144>
 800da9e:	6923      	ldr	r3, [r4, #16]
 800daa0:	6861      	ldr	r1, [r4, #4]
 800daa2:	4299      	cmp	r1, r3
 800daa4:	bfde      	ittt	le
 800daa6:	2330      	movle	r3, #48	@ 0x30
 800daa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800daac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dab0:	1b92      	subs	r2, r2, r6
 800dab2:	6122      	str	r2, [r4, #16]
 800dab4:	f8cd a000 	str.w	sl, [sp]
 800dab8:	464b      	mov	r3, r9
 800daba:	aa03      	add	r2, sp, #12
 800dabc:	4621      	mov	r1, r4
 800dabe:	4640      	mov	r0, r8
 800dac0:	f7ff fee6 	bl	800d890 <_printf_common>
 800dac4:	3001      	adds	r0, #1
 800dac6:	d14a      	bne.n	800db5e <_printf_i+0x1f2>
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	b004      	add	sp, #16
 800dace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad2:	6823      	ldr	r3, [r4, #0]
 800dad4:	f043 0320 	orr.w	r3, r3, #32
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	4833      	ldr	r0, [pc, #204]	@ (800dba8 <_printf_i+0x23c>)
 800dadc:	2778      	movs	r7, #120	@ 0x78
 800dade:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	6831      	ldr	r1, [r6, #0]
 800dae6:	061f      	lsls	r7, r3, #24
 800dae8:	f851 5b04 	ldr.w	r5, [r1], #4
 800daec:	d402      	bmi.n	800daf4 <_printf_i+0x188>
 800daee:	065f      	lsls	r7, r3, #25
 800daf0:	bf48      	it	mi
 800daf2:	b2ad      	uxthmi	r5, r5
 800daf4:	6031      	str	r1, [r6, #0]
 800daf6:	07d9      	lsls	r1, r3, #31
 800daf8:	bf44      	itt	mi
 800dafa:	f043 0320 	orrmi.w	r3, r3, #32
 800dafe:	6023      	strmi	r3, [r4, #0]
 800db00:	b11d      	cbz	r5, 800db0a <_printf_i+0x19e>
 800db02:	2310      	movs	r3, #16
 800db04:	e7ac      	b.n	800da60 <_printf_i+0xf4>
 800db06:	4827      	ldr	r0, [pc, #156]	@ (800dba4 <_printf_i+0x238>)
 800db08:	e7e9      	b.n	800dade <_printf_i+0x172>
 800db0a:	6823      	ldr	r3, [r4, #0]
 800db0c:	f023 0320 	bic.w	r3, r3, #32
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	e7f6      	b.n	800db02 <_printf_i+0x196>
 800db14:	4616      	mov	r6, r2
 800db16:	e7bd      	b.n	800da94 <_printf_i+0x128>
 800db18:	6833      	ldr	r3, [r6, #0]
 800db1a:	6825      	ldr	r5, [r4, #0]
 800db1c:	6961      	ldr	r1, [r4, #20]
 800db1e:	1d18      	adds	r0, r3, #4
 800db20:	6030      	str	r0, [r6, #0]
 800db22:	062e      	lsls	r6, r5, #24
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	d501      	bpl.n	800db2c <_printf_i+0x1c0>
 800db28:	6019      	str	r1, [r3, #0]
 800db2a:	e002      	b.n	800db32 <_printf_i+0x1c6>
 800db2c:	0668      	lsls	r0, r5, #25
 800db2e:	d5fb      	bpl.n	800db28 <_printf_i+0x1bc>
 800db30:	8019      	strh	r1, [r3, #0]
 800db32:	2300      	movs	r3, #0
 800db34:	6123      	str	r3, [r4, #16]
 800db36:	4616      	mov	r6, r2
 800db38:	e7bc      	b.n	800dab4 <_printf_i+0x148>
 800db3a:	6833      	ldr	r3, [r6, #0]
 800db3c:	1d1a      	adds	r2, r3, #4
 800db3e:	6032      	str	r2, [r6, #0]
 800db40:	681e      	ldr	r6, [r3, #0]
 800db42:	6862      	ldr	r2, [r4, #4]
 800db44:	2100      	movs	r1, #0
 800db46:	4630      	mov	r0, r6
 800db48:	f7f2 fb4a 	bl	80001e0 <memchr>
 800db4c:	b108      	cbz	r0, 800db52 <_printf_i+0x1e6>
 800db4e:	1b80      	subs	r0, r0, r6
 800db50:	6060      	str	r0, [r4, #4]
 800db52:	6863      	ldr	r3, [r4, #4]
 800db54:	6123      	str	r3, [r4, #16]
 800db56:	2300      	movs	r3, #0
 800db58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db5c:	e7aa      	b.n	800dab4 <_printf_i+0x148>
 800db5e:	6923      	ldr	r3, [r4, #16]
 800db60:	4632      	mov	r2, r6
 800db62:	4649      	mov	r1, r9
 800db64:	4640      	mov	r0, r8
 800db66:	47d0      	blx	sl
 800db68:	3001      	adds	r0, #1
 800db6a:	d0ad      	beq.n	800dac8 <_printf_i+0x15c>
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	079b      	lsls	r3, r3, #30
 800db70:	d413      	bmi.n	800db9a <_printf_i+0x22e>
 800db72:	68e0      	ldr	r0, [r4, #12]
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	4298      	cmp	r0, r3
 800db78:	bfb8      	it	lt
 800db7a:	4618      	movlt	r0, r3
 800db7c:	e7a6      	b.n	800dacc <_printf_i+0x160>
 800db7e:	2301      	movs	r3, #1
 800db80:	4632      	mov	r2, r6
 800db82:	4649      	mov	r1, r9
 800db84:	4640      	mov	r0, r8
 800db86:	47d0      	blx	sl
 800db88:	3001      	adds	r0, #1
 800db8a:	d09d      	beq.n	800dac8 <_printf_i+0x15c>
 800db8c:	3501      	adds	r5, #1
 800db8e:	68e3      	ldr	r3, [r4, #12]
 800db90:	9903      	ldr	r1, [sp, #12]
 800db92:	1a5b      	subs	r3, r3, r1
 800db94:	42ab      	cmp	r3, r5
 800db96:	dcf2      	bgt.n	800db7e <_printf_i+0x212>
 800db98:	e7eb      	b.n	800db72 <_printf_i+0x206>
 800db9a:	2500      	movs	r5, #0
 800db9c:	f104 0619 	add.w	r6, r4, #25
 800dba0:	e7f5      	b.n	800db8e <_printf_i+0x222>
 800dba2:	bf00      	nop
 800dba4:	0802a0ba 	.word	0x0802a0ba
 800dba8:	0802a0cb 	.word	0x0802a0cb

0800dbac <std>:
 800dbac:	2300      	movs	r3, #0
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	e9c0 3300 	strd	r3, r3, [r0]
 800dbb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbba:	6083      	str	r3, [r0, #8]
 800dbbc:	8181      	strh	r1, [r0, #12]
 800dbbe:	6643      	str	r3, [r0, #100]	@ 0x64
 800dbc0:	81c2      	strh	r2, [r0, #14]
 800dbc2:	6183      	str	r3, [r0, #24]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	2208      	movs	r2, #8
 800dbc8:	305c      	adds	r0, #92	@ 0x5c
 800dbca:	f000 fa19 	bl	800e000 <memset>
 800dbce:	4b0d      	ldr	r3, [pc, #52]	@ (800dc04 <std+0x58>)
 800dbd0:	6263      	str	r3, [r4, #36]	@ 0x24
 800dbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800dc08 <std+0x5c>)
 800dbd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800dc0c <std+0x60>)
 800dbd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dbda:	4b0d      	ldr	r3, [pc, #52]	@ (800dc10 <std+0x64>)
 800dbdc:	6323      	str	r3, [r4, #48]	@ 0x30
 800dbde:	4b0d      	ldr	r3, [pc, #52]	@ (800dc14 <std+0x68>)
 800dbe0:	6224      	str	r4, [r4, #32]
 800dbe2:	429c      	cmp	r4, r3
 800dbe4:	d006      	beq.n	800dbf4 <std+0x48>
 800dbe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dbea:	4294      	cmp	r4, r2
 800dbec:	d002      	beq.n	800dbf4 <std+0x48>
 800dbee:	33d0      	adds	r3, #208	@ 0xd0
 800dbf0:	429c      	cmp	r4, r3
 800dbf2:	d105      	bne.n	800dc00 <std+0x54>
 800dbf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbfc:	f000 ba8c 	b.w	800e118 <__retarget_lock_init_recursive>
 800dc00:	bd10      	pop	{r4, pc}
 800dc02:	bf00      	nop
 800dc04:	0800de51 	.word	0x0800de51
 800dc08:	0800de73 	.word	0x0800de73
 800dc0c:	0800deab 	.word	0x0800deab
 800dc10:	0800decf 	.word	0x0800decf
 800dc14:	20003400 	.word	0x20003400

0800dc18 <stdio_exit_handler>:
 800dc18:	4a02      	ldr	r2, [pc, #8]	@ (800dc24 <stdio_exit_handler+0xc>)
 800dc1a:	4903      	ldr	r1, [pc, #12]	@ (800dc28 <stdio_exit_handler+0x10>)
 800dc1c:	4803      	ldr	r0, [pc, #12]	@ (800dc2c <stdio_exit_handler+0x14>)
 800dc1e:	f000 b869 	b.w	800dcf4 <_fwalk_sglue>
 800dc22:	bf00      	nop
 800dc24:	20000a38 	.word	0x20000a38
 800dc28:	0800fbbd 	.word	0x0800fbbd
 800dc2c:	20000a48 	.word	0x20000a48

0800dc30 <cleanup_stdio>:
 800dc30:	6841      	ldr	r1, [r0, #4]
 800dc32:	4b0c      	ldr	r3, [pc, #48]	@ (800dc64 <cleanup_stdio+0x34>)
 800dc34:	4299      	cmp	r1, r3
 800dc36:	b510      	push	{r4, lr}
 800dc38:	4604      	mov	r4, r0
 800dc3a:	d001      	beq.n	800dc40 <cleanup_stdio+0x10>
 800dc3c:	f001 ffbe 	bl	800fbbc <_fflush_r>
 800dc40:	68a1      	ldr	r1, [r4, #8]
 800dc42:	4b09      	ldr	r3, [pc, #36]	@ (800dc68 <cleanup_stdio+0x38>)
 800dc44:	4299      	cmp	r1, r3
 800dc46:	d002      	beq.n	800dc4e <cleanup_stdio+0x1e>
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f001 ffb7 	bl	800fbbc <_fflush_r>
 800dc4e:	68e1      	ldr	r1, [r4, #12]
 800dc50:	4b06      	ldr	r3, [pc, #24]	@ (800dc6c <cleanup_stdio+0x3c>)
 800dc52:	4299      	cmp	r1, r3
 800dc54:	d004      	beq.n	800dc60 <cleanup_stdio+0x30>
 800dc56:	4620      	mov	r0, r4
 800dc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc5c:	f001 bfae 	b.w	800fbbc <_fflush_r>
 800dc60:	bd10      	pop	{r4, pc}
 800dc62:	bf00      	nop
 800dc64:	20003400 	.word	0x20003400
 800dc68:	20003468 	.word	0x20003468
 800dc6c:	200034d0 	.word	0x200034d0

0800dc70 <global_stdio_init.part.0>:
 800dc70:	b510      	push	{r4, lr}
 800dc72:	4b0b      	ldr	r3, [pc, #44]	@ (800dca0 <global_stdio_init.part.0+0x30>)
 800dc74:	4c0b      	ldr	r4, [pc, #44]	@ (800dca4 <global_stdio_init.part.0+0x34>)
 800dc76:	4a0c      	ldr	r2, [pc, #48]	@ (800dca8 <global_stdio_init.part.0+0x38>)
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	2104      	movs	r1, #4
 800dc80:	f7ff ff94 	bl	800dbac <std>
 800dc84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc88:	2201      	movs	r2, #1
 800dc8a:	2109      	movs	r1, #9
 800dc8c:	f7ff ff8e 	bl	800dbac <std>
 800dc90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc94:	2202      	movs	r2, #2
 800dc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc9a:	2112      	movs	r1, #18
 800dc9c:	f7ff bf86 	b.w	800dbac <std>
 800dca0:	20003538 	.word	0x20003538
 800dca4:	20003400 	.word	0x20003400
 800dca8:	0800dc19 	.word	0x0800dc19

0800dcac <__sfp_lock_acquire>:
 800dcac:	4801      	ldr	r0, [pc, #4]	@ (800dcb4 <__sfp_lock_acquire+0x8>)
 800dcae:	f000 ba34 	b.w	800e11a <__retarget_lock_acquire_recursive>
 800dcb2:	bf00      	nop
 800dcb4:	20003541 	.word	0x20003541

0800dcb8 <__sfp_lock_release>:
 800dcb8:	4801      	ldr	r0, [pc, #4]	@ (800dcc0 <__sfp_lock_release+0x8>)
 800dcba:	f000 ba2f 	b.w	800e11c <__retarget_lock_release_recursive>
 800dcbe:	bf00      	nop
 800dcc0:	20003541 	.word	0x20003541

0800dcc4 <__sinit>:
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	f7ff fff0 	bl	800dcac <__sfp_lock_acquire>
 800dccc:	6a23      	ldr	r3, [r4, #32]
 800dcce:	b11b      	cbz	r3, 800dcd8 <__sinit+0x14>
 800dcd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcd4:	f7ff bff0 	b.w	800dcb8 <__sfp_lock_release>
 800dcd8:	4b04      	ldr	r3, [pc, #16]	@ (800dcec <__sinit+0x28>)
 800dcda:	6223      	str	r3, [r4, #32]
 800dcdc:	4b04      	ldr	r3, [pc, #16]	@ (800dcf0 <__sinit+0x2c>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1f5      	bne.n	800dcd0 <__sinit+0xc>
 800dce4:	f7ff ffc4 	bl	800dc70 <global_stdio_init.part.0>
 800dce8:	e7f2      	b.n	800dcd0 <__sinit+0xc>
 800dcea:	bf00      	nop
 800dcec:	0800dc31 	.word	0x0800dc31
 800dcf0:	20003538 	.word	0x20003538

0800dcf4 <_fwalk_sglue>:
 800dcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf8:	4607      	mov	r7, r0
 800dcfa:	4688      	mov	r8, r1
 800dcfc:	4614      	mov	r4, r2
 800dcfe:	2600      	movs	r6, #0
 800dd00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd04:	f1b9 0901 	subs.w	r9, r9, #1
 800dd08:	d505      	bpl.n	800dd16 <_fwalk_sglue+0x22>
 800dd0a:	6824      	ldr	r4, [r4, #0]
 800dd0c:	2c00      	cmp	r4, #0
 800dd0e:	d1f7      	bne.n	800dd00 <_fwalk_sglue+0xc>
 800dd10:	4630      	mov	r0, r6
 800dd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd16:	89ab      	ldrh	r3, [r5, #12]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d907      	bls.n	800dd2c <_fwalk_sglue+0x38>
 800dd1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd20:	3301      	adds	r3, #1
 800dd22:	d003      	beq.n	800dd2c <_fwalk_sglue+0x38>
 800dd24:	4629      	mov	r1, r5
 800dd26:	4638      	mov	r0, r7
 800dd28:	47c0      	blx	r8
 800dd2a:	4306      	orrs	r6, r0
 800dd2c:	3568      	adds	r5, #104	@ 0x68
 800dd2e:	e7e9      	b.n	800dd04 <_fwalk_sglue+0x10>

0800dd30 <iprintf>:
 800dd30:	b40f      	push	{r0, r1, r2, r3}
 800dd32:	b507      	push	{r0, r1, r2, lr}
 800dd34:	4906      	ldr	r1, [pc, #24]	@ (800dd50 <iprintf+0x20>)
 800dd36:	ab04      	add	r3, sp, #16
 800dd38:	6808      	ldr	r0, [r1, #0]
 800dd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd3e:	6881      	ldr	r1, [r0, #8]
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	f001 fd9f 	bl	800f884 <_vfiprintf_r>
 800dd46:	b003      	add	sp, #12
 800dd48:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd4c:	b004      	add	sp, #16
 800dd4e:	4770      	bx	lr
 800dd50:	20000a44 	.word	0x20000a44

0800dd54 <_puts_r>:
 800dd54:	6a03      	ldr	r3, [r0, #32]
 800dd56:	b570      	push	{r4, r5, r6, lr}
 800dd58:	6884      	ldr	r4, [r0, #8]
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	460e      	mov	r6, r1
 800dd5e:	b90b      	cbnz	r3, 800dd64 <_puts_r+0x10>
 800dd60:	f7ff ffb0 	bl	800dcc4 <__sinit>
 800dd64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd66:	07db      	lsls	r3, r3, #31
 800dd68:	d405      	bmi.n	800dd76 <_puts_r+0x22>
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	0598      	lsls	r0, r3, #22
 800dd6e:	d402      	bmi.n	800dd76 <_puts_r+0x22>
 800dd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd72:	f000 f9d2 	bl	800e11a <__retarget_lock_acquire_recursive>
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	0719      	lsls	r1, r3, #28
 800dd7a:	d502      	bpl.n	800dd82 <_puts_r+0x2e>
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d135      	bne.n	800ddee <_puts_r+0x9a>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4628      	mov	r0, r5
 800dd86:	f000 f8e5 	bl	800df54 <__swsetup_r>
 800dd8a:	b380      	cbz	r0, 800ddee <_puts_r+0x9a>
 800dd8c:	f04f 35ff 	mov.w	r5, #4294967295
 800dd90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd92:	07da      	lsls	r2, r3, #31
 800dd94:	d405      	bmi.n	800dda2 <_puts_r+0x4e>
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	059b      	lsls	r3, r3, #22
 800dd9a:	d402      	bmi.n	800dda2 <_puts_r+0x4e>
 800dd9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd9e:	f000 f9bd 	bl	800e11c <__retarget_lock_release_recursive>
 800dda2:	4628      	mov	r0, r5
 800dda4:	bd70      	pop	{r4, r5, r6, pc}
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	da04      	bge.n	800ddb4 <_puts_r+0x60>
 800ddaa:	69a2      	ldr	r2, [r4, #24]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	dc17      	bgt.n	800dde0 <_puts_r+0x8c>
 800ddb0:	290a      	cmp	r1, #10
 800ddb2:	d015      	beq.n	800dde0 <_puts_r+0x8c>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	6022      	str	r2, [r4, #0]
 800ddba:	7019      	strb	r1, [r3, #0]
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	60a3      	str	r3, [r4, #8]
 800ddc6:	2900      	cmp	r1, #0
 800ddc8:	d1ed      	bne.n	800dda6 <_puts_r+0x52>
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	da11      	bge.n	800ddf2 <_puts_r+0x9e>
 800ddce:	4622      	mov	r2, r4
 800ddd0:	210a      	movs	r1, #10
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f000 f87f 	bl	800ded6 <__swbuf_r>
 800ddd8:	3001      	adds	r0, #1
 800ddda:	d0d7      	beq.n	800dd8c <_puts_r+0x38>
 800dddc:	250a      	movs	r5, #10
 800ddde:	e7d7      	b.n	800dd90 <_puts_r+0x3c>
 800dde0:	4622      	mov	r2, r4
 800dde2:	4628      	mov	r0, r5
 800dde4:	f000 f877 	bl	800ded6 <__swbuf_r>
 800dde8:	3001      	adds	r0, #1
 800ddea:	d1e7      	bne.n	800ddbc <_puts_r+0x68>
 800ddec:	e7ce      	b.n	800dd8c <_puts_r+0x38>
 800ddee:	3e01      	subs	r6, #1
 800ddf0:	e7e4      	b.n	800ddbc <_puts_r+0x68>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	6022      	str	r2, [r4, #0]
 800ddf8:	220a      	movs	r2, #10
 800ddfa:	701a      	strb	r2, [r3, #0]
 800ddfc:	e7ee      	b.n	800dddc <_puts_r+0x88>
	...

0800de00 <puts>:
 800de00:	4b02      	ldr	r3, [pc, #8]	@ (800de0c <puts+0xc>)
 800de02:	4601      	mov	r1, r0
 800de04:	6818      	ldr	r0, [r3, #0]
 800de06:	f7ff bfa5 	b.w	800dd54 <_puts_r>
 800de0a:	bf00      	nop
 800de0c:	20000a44 	.word	0x20000a44

0800de10 <siprintf>:
 800de10:	b40e      	push	{r1, r2, r3}
 800de12:	b500      	push	{lr}
 800de14:	b09c      	sub	sp, #112	@ 0x70
 800de16:	ab1d      	add	r3, sp, #116	@ 0x74
 800de18:	9002      	str	r0, [sp, #8]
 800de1a:	9006      	str	r0, [sp, #24]
 800de1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de20:	4809      	ldr	r0, [pc, #36]	@ (800de48 <siprintf+0x38>)
 800de22:	9107      	str	r1, [sp, #28]
 800de24:	9104      	str	r1, [sp, #16]
 800de26:	4909      	ldr	r1, [pc, #36]	@ (800de4c <siprintf+0x3c>)
 800de28:	f853 2b04 	ldr.w	r2, [r3], #4
 800de2c:	9105      	str	r1, [sp, #20]
 800de2e:	6800      	ldr	r0, [r0, #0]
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	a902      	add	r1, sp, #8
 800de34:	f001 fc00 	bl	800f638 <_svfiprintf_r>
 800de38:	9b02      	ldr	r3, [sp, #8]
 800de3a:	2200      	movs	r2, #0
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	b01c      	add	sp, #112	@ 0x70
 800de40:	f85d eb04 	ldr.w	lr, [sp], #4
 800de44:	b003      	add	sp, #12
 800de46:	4770      	bx	lr
 800de48:	20000a44 	.word	0x20000a44
 800de4c:	ffff0208 	.word	0xffff0208

0800de50 <__sread>:
 800de50:	b510      	push	{r4, lr}
 800de52:	460c      	mov	r4, r1
 800de54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de58:	f000 f900 	bl	800e05c <_read_r>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	bfab      	itete	ge
 800de60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de62:	89a3      	ldrhlt	r3, [r4, #12]
 800de64:	181b      	addge	r3, r3, r0
 800de66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de6a:	bfac      	ite	ge
 800de6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de6e:	81a3      	strhlt	r3, [r4, #12]
 800de70:	bd10      	pop	{r4, pc}

0800de72 <__swrite>:
 800de72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de76:	461f      	mov	r7, r3
 800de78:	898b      	ldrh	r3, [r1, #12]
 800de7a:	05db      	lsls	r3, r3, #23
 800de7c:	4605      	mov	r5, r0
 800de7e:	460c      	mov	r4, r1
 800de80:	4616      	mov	r6, r2
 800de82:	d505      	bpl.n	800de90 <__swrite+0x1e>
 800de84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de88:	2302      	movs	r3, #2
 800de8a:	2200      	movs	r2, #0
 800de8c:	f000 f8d4 	bl	800e038 <_lseek_r>
 800de90:	89a3      	ldrh	r3, [r4, #12]
 800de92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de9a:	81a3      	strh	r3, [r4, #12]
 800de9c:	4632      	mov	r2, r6
 800de9e:	463b      	mov	r3, r7
 800dea0:	4628      	mov	r0, r5
 800dea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea6:	f000 b8fb 	b.w	800e0a0 <_write_r>

0800deaa <__sseek>:
 800deaa:	b510      	push	{r4, lr}
 800deac:	460c      	mov	r4, r1
 800deae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb2:	f000 f8c1 	bl	800e038 <_lseek_r>
 800deb6:	1c43      	adds	r3, r0, #1
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	bf15      	itete	ne
 800debc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800debe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dec6:	81a3      	strheq	r3, [r4, #12]
 800dec8:	bf18      	it	ne
 800deca:	81a3      	strhne	r3, [r4, #12]
 800decc:	bd10      	pop	{r4, pc}

0800dece <__sclose>:
 800dece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded2:	f000 b8a1 	b.w	800e018 <_close_r>

0800ded6 <__swbuf_r>:
 800ded6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded8:	460e      	mov	r6, r1
 800deda:	4614      	mov	r4, r2
 800dedc:	4605      	mov	r5, r0
 800dede:	b118      	cbz	r0, 800dee8 <__swbuf_r+0x12>
 800dee0:	6a03      	ldr	r3, [r0, #32]
 800dee2:	b90b      	cbnz	r3, 800dee8 <__swbuf_r+0x12>
 800dee4:	f7ff feee 	bl	800dcc4 <__sinit>
 800dee8:	69a3      	ldr	r3, [r4, #24]
 800deea:	60a3      	str	r3, [r4, #8]
 800deec:	89a3      	ldrh	r3, [r4, #12]
 800deee:	071a      	lsls	r2, r3, #28
 800def0:	d501      	bpl.n	800def6 <__swbuf_r+0x20>
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	b943      	cbnz	r3, 800df08 <__swbuf_r+0x32>
 800def6:	4621      	mov	r1, r4
 800def8:	4628      	mov	r0, r5
 800defa:	f000 f82b 	bl	800df54 <__swsetup_r>
 800defe:	b118      	cbz	r0, 800df08 <__swbuf_r+0x32>
 800df00:	f04f 37ff 	mov.w	r7, #4294967295
 800df04:	4638      	mov	r0, r7
 800df06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	6922      	ldr	r2, [r4, #16]
 800df0c:	1a98      	subs	r0, r3, r2
 800df0e:	6963      	ldr	r3, [r4, #20]
 800df10:	b2f6      	uxtb	r6, r6
 800df12:	4283      	cmp	r3, r0
 800df14:	4637      	mov	r7, r6
 800df16:	dc05      	bgt.n	800df24 <__swbuf_r+0x4e>
 800df18:	4621      	mov	r1, r4
 800df1a:	4628      	mov	r0, r5
 800df1c:	f001 fe4e 	bl	800fbbc <_fflush_r>
 800df20:	2800      	cmp	r0, #0
 800df22:	d1ed      	bne.n	800df00 <__swbuf_r+0x2a>
 800df24:	68a3      	ldr	r3, [r4, #8]
 800df26:	3b01      	subs	r3, #1
 800df28:	60a3      	str	r3, [r4, #8]
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	1c5a      	adds	r2, r3, #1
 800df2e:	6022      	str	r2, [r4, #0]
 800df30:	701e      	strb	r6, [r3, #0]
 800df32:	6962      	ldr	r2, [r4, #20]
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	429a      	cmp	r2, r3
 800df38:	d004      	beq.n	800df44 <__swbuf_r+0x6e>
 800df3a:	89a3      	ldrh	r3, [r4, #12]
 800df3c:	07db      	lsls	r3, r3, #31
 800df3e:	d5e1      	bpl.n	800df04 <__swbuf_r+0x2e>
 800df40:	2e0a      	cmp	r6, #10
 800df42:	d1df      	bne.n	800df04 <__swbuf_r+0x2e>
 800df44:	4621      	mov	r1, r4
 800df46:	4628      	mov	r0, r5
 800df48:	f001 fe38 	bl	800fbbc <_fflush_r>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d0d9      	beq.n	800df04 <__swbuf_r+0x2e>
 800df50:	e7d6      	b.n	800df00 <__swbuf_r+0x2a>
	...

0800df54 <__swsetup_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4b29      	ldr	r3, [pc, #164]	@ (800dffc <__swsetup_r+0xa8>)
 800df58:	4605      	mov	r5, r0
 800df5a:	6818      	ldr	r0, [r3, #0]
 800df5c:	460c      	mov	r4, r1
 800df5e:	b118      	cbz	r0, 800df68 <__swsetup_r+0x14>
 800df60:	6a03      	ldr	r3, [r0, #32]
 800df62:	b90b      	cbnz	r3, 800df68 <__swsetup_r+0x14>
 800df64:	f7ff feae 	bl	800dcc4 <__sinit>
 800df68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df6c:	0719      	lsls	r1, r3, #28
 800df6e:	d422      	bmi.n	800dfb6 <__swsetup_r+0x62>
 800df70:	06da      	lsls	r2, r3, #27
 800df72:	d407      	bmi.n	800df84 <__swsetup_r+0x30>
 800df74:	2209      	movs	r2, #9
 800df76:	602a      	str	r2, [r5, #0]
 800df78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df7c:	81a3      	strh	r3, [r4, #12]
 800df7e:	f04f 30ff 	mov.w	r0, #4294967295
 800df82:	e033      	b.n	800dfec <__swsetup_r+0x98>
 800df84:	0758      	lsls	r0, r3, #29
 800df86:	d512      	bpl.n	800dfae <__swsetup_r+0x5a>
 800df88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df8a:	b141      	cbz	r1, 800df9e <__swsetup_r+0x4a>
 800df8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df90:	4299      	cmp	r1, r3
 800df92:	d002      	beq.n	800df9a <__swsetup_r+0x46>
 800df94:	4628      	mov	r0, r5
 800df96:	f000 ff1f 	bl	800edd8 <_free_r>
 800df9a:	2300      	movs	r3, #0
 800df9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dfa4:	81a3      	strh	r3, [r4, #12]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	6063      	str	r3, [r4, #4]
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	89a3      	ldrh	r3, [r4, #12]
 800dfb0:	f043 0308 	orr.w	r3, r3, #8
 800dfb4:	81a3      	strh	r3, [r4, #12]
 800dfb6:	6923      	ldr	r3, [r4, #16]
 800dfb8:	b94b      	cbnz	r3, 800dfce <__swsetup_r+0x7a>
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dfc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfc4:	d003      	beq.n	800dfce <__swsetup_r+0x7a>
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	4628      	mov	r0, r5
 800dfca:	f001 fe45 	bl	800fc58 <__smakebuf_r>
 800dfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd2:	f013 0201 	ands.w	r2, r3, #1
 800dfd6:	d00a      	beq.n	800dfee <__swsetup_r+0x9a>
 800dfd8:	2200      	movs	r2, #0
 800dfda:	60a2      	str	r2, [r4, #8]
 800dfdc:	6962      	ldr	r2, [r4, #20]
 800dfde:	4252      	negs	r2, r2
 800dfe0:	61a2      	str	r2, [r4, #24]
 800dfe2:	6922      	ldr	r2, [r4, #16]
 800dfe4:	b942      	cbnz	r2, 800dff8 <__swsetup_r+0xa4>
 800dfe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dfea:	d1c5      	bne.n	800df78 <__swsetup_r+0x24>
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	0799      	lsls	r1, r3, #30
 800dff0:	bf58      	it	pl
 800dff2:	6962      	ldrpl	r2, [r4, #20]
 800dff4:	60a2      	str	r2, [r4, #8]
 800dff6:	e7f4      	b.n	800dfe2 <__swsetup_r+0x8e>
 800dff8:	2000      	movs	r0, #0
 800dffa:	e7f7      	b.n	800dfec <__swsetup_r+0x98>
 800dffc:	20000a44 	.word	0x20000a44

0800e000 <memset>:
 800e000:	4402      	add	r2, r0
 800e002:	4603      	mov	r3, r0
 800e004:	4293      	cmp	r3, r2
 800e006:	d100      	bne.n	800e00a <memset+0xa>
 800e008:	4770      	bx	lr
 800e00a:	f803 1b01 	strb.w	r1, [r3], #1
 800e00e:	e7f9      	b.n	800e004 <memset+0x4>

0800e010 <_localeconv_r>:
 800e010:	4800      	ldr	r0, [pc, #0]	@ (800e014 <_localeconv_r+0x4>)
 800e012:	4770      	bx	lr
 800e014:	20000b84 	.word	0x20000b84

0800e018 <_close_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d06      	ldr	r5, [pc, #24]	@ (800e034 <_close_r+0x1c>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	4604      	mov	r4, r0
 800e020:	4608      	mov	r0, r1
 800e022:	602b      	str	r3, [r5, #0]
 800e024:	f002 f874 	bl	8010110 <_close>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_close_r+0x1a>
 800e02c:	682b      	ldr	r3, [r5, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_close_r+0x1a>
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	2000353c 	.word	0x2000353c

0800e038 <_lseek_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d07      	ldr	r5, [pc, #28]	@ (800e058 <_lseek_r+0x20>)
 800e03c:	4604      	mov	r4, r0
 800e03e:	4608      	mov	r0, r1
 800e040:	4611      	mov	r1, r2
 800e042:	2200      	movs	r2, #0
 800e044:	602a      	str	r2, [r5, #0]
 800e046:	461a      	mov	r2, r3
 800e048:	f002 f88a 	bl	8010160 <_lseek>
 800e04c:	1c43      	adds	r3, r0, #1
 800e04e:	d102      	bne.n	800e056 <_lseek_r+0x1e>
 800e050:	682b      	ldr	r3, [r5, #0]
 800e052:	b103      	cbz	r3, 800e056 <_lseek_r+0x1e>
 800e054:	6023      	str	r3, [r4, #0]
 800e056:	bd38      	pop	{r3, r4, r5, pc}
 800e058:	2000353c 	.word	0x2000353c

0800e05c <_read_r>:
 800e05c:	b538      	push	{r3, r4, r5, lr}
 800e05e:	4d07      	ldr	r5, [pc, #28]	@ (800e07c <_read_r+0x20>)
 800e060:	4604      	mov	r4, r0
 800e062:	4608      	mov	r0, r1
 800e064:	4611      	mov	r1, r2
 800e066:	2200      	movs	r2, #0
 800e068:	602a      	str	r2, [r5, #0]
 800e06a:	461a      	mov	r2, r3
 800e06c:	f002 f880 	bl	8010170 <_read>
 800e070:	1c43      	adds	r3, r0, #1
 800e072:	d102      	bne.n	800e07a <_read_r+0x1e>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b103      	cbz	r3, 800e07a <_read_r+0x1e>
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
 800e07c:	2000353c 	.word	0x2000353c

0800e080 <_sbrk_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d06      	ldr	r5, [pc, #24]	@ (800e09c <_sbrk_r+0x1c>)
 800e084:	2300      	movs	r3, #0
 800e086:	4604      	mov	r4, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	602b      	str	r3, [r5, #0]
 800e08c:	f7f4 facc 	bl	8002628 <_sbrk>
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	d102      	bne.n	800e09a <_sbrk_r+0x1a>
 800e094:	682b      	ldr	r3, [r5, #0]
 800e096:	b103      	cbz	r3, 800e09a <_sbrk_r+0x1a>
 800e098:	6023      	str	r3, [r4, #0]
 800e09a:	bd38      	pop	{r3, r4, r5, pc}
 800e09c:	2000353c 	.word	0x2000353c

0800e0a0 <_write_r>:
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	4d07      	ldr	r5, [pc, #28]	@ (800e0c0 <_write_r+0x20>)
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	4608      	mov	r0, r1
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	602a      	str	r2, [r5, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	f002 f866 	bl	8010180 <_write>
 800e0b4:	1c43      	adds	r3, r0, #1
 800e0b6:	d102      	bne.n	800e0be <_write_r+0x1e>
 800e0b8:	682b      	ldr	r3, [r5, #0]
 800e0ba:	b103      	cbz	r3, 800e0be <_write_r+0x1e>
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	2000353c 	.word	0x2000353c

0800e0c4 <__errno>:
 800e0c4:	4b01      	ldr	r3, [pc, #4]	@ (800e0cc <__errno+0x8>)
 800e0c6:	6818      	ldr	r0, [r3, #0]
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	20000a44 	.word	0x20000a44

0800e0d0 <__libc_init_array>:
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	4d0d      	ldr	r5, [pc, #52]	@ (800e108 <__libc_init_array+0x38>)
 800e0d4:	4c0d      	ldr	r4, [pc, #52]	@ (800e10c <__libc_init_array+0x3c>)
 800e0d6:	1b64      	subs	r4, r4, r5
 800e0d8:	10a4      	asrs	r4, r4, #2
 800e0da:	2600      	movs	r6, #0
 800e0dc:	42a6      	cmp	r6, r4
 800e0de:	d109      	bne.n	800e0f4 <__libc_init_array+0x24>
 800e0e0:	4d0b      	ldr	r5, [pc, #44]	@ (800e110 <__libc_init_array+0x40>)
 800e0e2:	4c0c      	ldr	r4, [pc, #48]	@ (800e114 <__libc_init_array+0x44>)
 800e0e4:	f002 f856 	bl	8010194 <_init>
 800e0e8:	1b64      	subs	r4, r4, r5
 800e0ea:	10a4      	asrs	r4, r4, #2
 800e0ec:	2600      	movs	r6, #0
 800e0ee:	42a6      	cmp	r6, r4
 800e0f0:	d105      	bne.n	800e0fe <__libc_init_array+0x2e>
 800e0f2:	bd70      	pop	{r4, r5, r6, pc}
 800e0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f8:	4798      	blx	r3
 800e0fa:	3601      	adds	r6, #1
 800e0fc:	e7ee      	b.n	800e0dc <__libc_init_array+0xc>
 800e0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e102:	4798      	blx	r3
 800e104:	3601      	adds	r6, #1
 800e106:	e7f2      	b.n	800e0ee <__libc_init_array+0x1e>
 800e108:	0802a438 	.word	0x0802a438
 800e10c:	0802a438 	.word	0x0802a438
 800e110:	0802a438 	.word	0x0802a438
 800e114:	0802a43c 	.word	0x0802a43c

0800e118 <__retarget_lock_init_recursive>:
 800e118:	4770      	bx	lr

0800e11a <__retarget_lock_acquire_recursive>:
 800e11a:	4770      	bx	lr

0800e11c <__retarget_lock_release_recursive>:
 800e11c:	4770      	bx	lr

0800e11e <memcpy>:
 800e11e:	440a      	add	r2, r1
 800e120:	4291      	cmp	r1, r2
 800e122:	f100 33ff 	add.w	r3, r0, #4294967295
 800e126:	d100      	bne.n	800e12a <memcpy+0xc>
 800e128:	4770      	bx	lr
 800e12a:	b510      	push	{r4, lr}
 800e12c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e130:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e134:	4291      	cmp	r1, r2
 800e136:	d1f9      	bne.n	800e12c <memcpy+0xe>
 800e138:	bd10      	pop	{r4, pc}

0800e13a <quorem>:
 800e13a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13e:	6903      	ldr	r3, [r0, #16]
 800e140:	690c      	ldr	r4, [r1, #16]
 800e142:	42a3      	cmp	r3, r4
 800e144:	4607      	mov	r7, r0
 800e146:	db7e      	blt.n	800e246 <quorem+0x10c>
 800e148:	3c01      	subs	r4, #1
 800e14a:	f101 0814 	add.w	r8, r1, #20
 800e14e:	00a3      	lsls	r3, r4, #2
 800e150:	f100 0514 	add.w	r5, r0, #20
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e164:	3301      	adds	r3, #1
 800e166:	429a      	cmp	r2, r3
 800e168:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e16c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e170:	d32e      	bcc.n	800e1d0 <quorem+0x96>
 800e172:	f04f 0a00 	mov.w	sl, #0
 800e176:	46c4      	mov	ip, r8
 800e178:	46ae      	mov	lr, r5
 800e17a:	46d3      	mov	fp, sl
 800e17c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e180:	b298      	uxth	r0, r3
 800e182:	fb06 a000 	mla	r0, r6, r0, sl
 800e186:	0c02      	lsrs	r2, r0, #16
 800e188:	0c1b      	lsrs	r3, r3, #16
 800e18a:	fb06 2303 	mla	r3, r6, r3, r2
 800e18e:	f8de 2000 	ldr.w	r2, [lr]
 800e192:	b280      	uxth	r0, r0
 800e194:	b292      	uxth	r2, r2
 800e196:	1a12      	subs	r2, r2, r0
 800e198:	445a      	add	r2, fp
 800e19a:	f8de 0000 	ldr.w	r0, [lr]
 800e19e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e1a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e1ac:	b292      	uxth	r2, r2
 800e1ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e1b2:	45e1      	cmp	r9, ip
 800e1b4:	f84e 2b04 	str.w	r2, [lr], #4
 800e1b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e1bc:	d2de      	bcs.n	800e17c <quorem+0x42>
 800e1be:	9b00      	ldr	r3, [sp, #0]
 800e1c0:	58eb      	ldr	r3, [r5, r3]
 800e1c2:	b92b      	cbnz	r3, 800e1d0 <quorem+0x96>
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	3b04      	subs	r3, #4
 800e1c8:	429d      	cmp	r5, r3
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	d32f      	bcc.n	800e22e <quorem+0xf4>
 800e1ce:	613c      	str	r4, [r7, #16]
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	f001 f8c5 	bl	800f360 <__mcmp>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	db25      	blt.n	800e226 <quorem+0xec>
 800e1da:	4629      	mov	r1, r5
 800e1dc:	2000      	movs	r0, #0
 800e1de:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1e2:	f8d1 c000 	ldr.w	ip, [r1]
 800e1e6:	fa1f fe82 	uxth.w	lr, r2
 800e1ea:	fa1f f38c 	uxth.w	r3, ip
 800e1ee:	eba3 030e 	sub.w	r3, r3, lr
 800e1f2:	4403      	add	r3, r0
 800e1f4:	0c12      	lsrs	r2, r2, #16
 800e1f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e1fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e204:	45c1      	cmp	r9, r8
 800e206:	f841 3b04 	str.w	r3, [r1], #4
 800e20a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e20e:	d2e6      	bcs.n	800e1de <quorem+0xa4>
 800e210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e214:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e218:	b922      	cbnz	r2, 800e224 <quorem+0xea>
 800e21a:	3b04      	subs	r3, #4
 800e21c:	429d      	cmp	r5, r3
 800e21e:	461a      	mov	r2, r3
 800e220:	d30b      	bcc.n	800e23a <quorem+0x100>
 800e222:	613c      	str	r4, [r7, #16]
 800e224:	3601      	adds	r6, #1
 800e226:	4630      	mov	r0, r6
 800e228:	b003      	add	sp, #12
 800e22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22e:	6812      	ldr	r2, [r2, #0]
 800e230:	3b04      	subs	r3, #4
 800e232:	2a00      	cmp	r2, #0
 800e234:	d1cb      	bne.n	800e1ce <quorem+0x94>
 800e236:	3c01      	subs	r4, #1
 800e238:	e7c6      	b.n	800e1c8 <quorem+0x8e>
 800e23a:	6812      	ldr	r2, [r2, #0]
 800e23c:	3b04      	subs	r3, #4
 800e23e:	2a00      	cmp	r2, #0
 800e240:	d1ef      	bne.n	800e222 <quorem+0xe8>
 800e242:	3c01      	subs	r4, #1
 800e244:	e7ea      	b.n	800e21c <quorem+0xe2>
 800e246:	2000      	movs	r0, #0
 800e248:	e7ee      	b.n	800e228 <quorem+0xee>
 800e24a:	0000      	movs	r0, r0
 800e24c:	0000      	movs	r0, r0
	...

0800e250 <_dtoa_r>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	69c7      	ldr	r7, [r0, #28]
 800e256:	b099      	sub	sp, #100	@ 0x64
 800e258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e25c:	ec55 4b10 	vmov	r4, r5, d0
 800e260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e262:	9109      	str	r1, [sp, #36]	@ 0x24
 800e264:	4683      	mov	fp, r0
 800e266:	920e      	str	r2, [sp, #56]	@ 0x38
 800e268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e26a:	b97f      	cbnz	r7, 800e28c <_dtoa_r+0x3c>
 800e26c:	2010      	movs	r0, #16
 800e26e:	f7fe ff61 	bl	800d134 <malloc>
 800e272:	4602      	mov	r2, r0
 800e274:	f8cb 001c 	str.w	r0, [fp, #28]
 800e278:	b920      	cbnz	r0, 800e284 <_dtoa_r+0x34>
 800e27a:	4ba7      	ldr	r3, [pc, #668]	@ (800e518 <_dtoa_r+0x2c8>)
 800e27c:	21ef      	movs	r1, #239	@ 0xef
 800e27e:	48a7      	ldr	r0, [pc, #668]	@ (800e51c <_dtoa_r+0x2cc>)
 800e280:	f001 fd62 	bl	800fd48 <__assert_func>
 800e284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e288:	6007      	str	r7, [r0, #0]
 800e28a:	60c7      	str	r7, [r0, #12]
 800e28c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e290:	6819      	ldr	r1, [r3, #0]
 800e292:	b159      	cbz	r1, 800e2ac <_dtoa_r+0x5c>
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	604a      	str	r2, [r1, #4]
 800e298:	2301      	movs	r3, #1
 800e29a:	4093      	lsls	r3, r2
 800e29c:	608b      	str	r3, [r1, #8]
 800e29e:	4658      	mov	r0, fp
 800e2a0:	f000 fe24 	bl	800eeec <_Bfree>
 800e2a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	601a      	str	r2, [r3, #0]
 800e2ac:	1e2b      	subs	r3, r5, #0
 800e2ae:	bfb9      	ittee	lt
 800e2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e2b4:	9303      	strlt	r3, [sp, #12]
 800e2b6:	2300      	movge	r3, #0
 800e2b8:	6033      	strge	r3, [r6, #0]
 800e2ba:	9f03      	ldr	r7, [sp, #12]
 800e2bc:	4b98      	ldr	r3, [pc, #608]	@ (800e520 <_dtoa_r+0x2d0>)
 800e2be:	bfbc      	itt	lt
 800e2c0:	2201      	movlt	r2, #1
 800e2c2:	6032      	strlt	r2, [r6, #0]
 800e2c4:	43bb      	bics	r3, r7
 800e2c6:	d112      	bne.n	800e2ee <_dtoa_r+0x9e>
 800e2c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e2ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e2d4:	4323      	orrs	r3, r4
 800e2d6:	f000 854d 	beq.w	800ed74 <_dtoa_r+0xb24>
 800e2da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e2dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e534 <_dtoa_r+0x2e4>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 854f 	beq.w	800ed84 <_dtoa_r+0xb34>
 800e2e6:	f10a 0303 	add.w	r3, sl, #3
 800e2ea:	f000 bd49 	b.w	800ed80 <_dtoa_r+0xb30>
 800e2ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	ec51 0b17 	vmov	r0, r1, d7
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e2fe:	f7f2 fbeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800e302:	4680      	mov	r8, r0
 800e304:	b158      	cbz	r0, 800e31e <_dtoa_r+0xce>
 800e306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e308:	2301      	movs	r3, #1
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e30e:	b113      	cbz	r3, 800e316 <_dtoa_r+0xc6>
 800e310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e312:	4b84      	ldr	r3, [pc, #528]	@ (800e524 <_dtoa_r+0x2d4>)
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e538 <_dtoa_r+0x2e8>
 800e31a:	f000 bd33 	b.w	800ed84 <_dtoa_r+0xb34>
 800e31e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e322:	aa16      	add	r2, sp, #88	@ 0x58
 800e324:	a917      	add	r1, sp, #92	@ 0x5c
 800e326:	4658      	mov	r0, fp
 800e328:	f001 f8ca 	bl	800f4c0 <__d2b>
 800e32c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e330:	4681      	mov	r9, r0
 800e332:	2e00      	cmp	r6, #0
 800e334:	d077      	beq.n	800e426 <_dtoa_r+0x1d6>
 800e336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e34c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e350:	4619      	mov	r1, r3
 800e352:	2200      	movs	r2, #0
 800e354:	4b74      	ldr	r3, [pc, #464]	@ (800e528 <_dtoa_r+0x2d8>)
 800e356:	f7f1 ff9f 	bl	8000298 <__aeabi_dsub>
 800e35a:	a369      	add	r3, pc, #420	@ (adr r3, 800e500 <_dtoa_r+0x2b0>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f2 f952 	bl	8000608 <__aeabi_dmul>
 800e364:	a368      	add	r3, pc, #416	@ (adr r3, 800e508 <_dtoa_r+0x2b8>)
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	f7f1 ff97 	bl	800029c <__adddf3>
 800e36e:	4604      	mov	r4, r0
 800e370:	4630      	mov	r0, r6
 800e372:	460d      	mov	r5, r1
 800e374:	f7f2 f8de 	bl	8000534 <__aeabi_i2d>
 800e378:	a365      	add	r3, pc, #404	@ (adr r3, 800e510 <_dtoa_r+0x2c0>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	f7f2 f943 	bl	8000608 <__aeabi_dmul>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4620      	mov	r0, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	f7f1 ff87 	bl	800029c <__adddf3>
 800e38e:	4604      	mov	r4, r0
 800e390:	460d      	mov	r5, r1
 800e392:	f7f2 fbe9 	bl	8000b68 <__aeabi_d2iz>
 800e396:	2200      	movs	r2, #0
 800e398:	4607      	mov	r7, r0
 800e39a:	2300      	movs	r3, #0
 800e39c:	4620      	mov	r0, r4
 800e39e:	4629      	mov	r1, r5
 800e3a0:	f7f2 fba4 	bl	8000aec <__aeabi_dcmplt>
 800e3a4:	b140      	cbz	r0, 800e3b8 <_dtoa_r+0x168>
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	f7f2 f8c4 	bl	8000534 <__aeabi_i2d>
 800e3ac:	4622      	mov	r2, r4
 800e3ae:	462b      	mov	r3, r5
 800e3b0:	f7f2 fb92 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3b4:	b900      	cbnz	r0, 800e3b8 <_dtoa_r+0x168>
 800e3b6:	3f01      	subs	r7, #1
 800e3b8:	2f16      	cmp	r7, #22
 800e3ba:	d851      	bhi.n	800e460 <_dtoa_r+0x210>
 800e3bc:	4b5b      	ldr	r3, [pc, #364]	@ (800e52c <_dtoa_r+0x2dc>)
 800e3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3ca:	f7f2 fb8f 	bl	8000aec <__aeabi_dcmplt>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d048      	beq.n	800e464 <_dtoa_r+0x214>
 800e3d2:	3f01      	subs	r7, #1
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e3d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e3da:	1b9b      	subs	r3, r3, r6
 800e3dc:	1e5a      	subs	r2, r3, #1
 800e3de:	bf44      	itt	mi
 800e3e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e3e4:	2300      	movmi	r3, #0
 800e3e6:	9208      	str	r2, [sp, #32]
 800e3e8:	bf54      	ite	pl
 800e3ea:	f04f 0800 	movpl.w	r8, #0
 800e3ee:	9308      	strmi	r3, [sp, #32]
 800e3f0:	2f00      	cmp	r7, #0
 800e3f2:	db39      	blt.n	800e468 <_dtoa_r+0x218>
 800e3f4:	9b08      	ldr	r3, [sp, #32]
 800e3f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e3f8:	443b      	add	r3, r7
 800e3fa:	9308      	str	r3, [sp, #32]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e402:	2b09      	cmp	r3, #9
 800e404:	d864      	bhi.n	800e4d0 <_dtoa_r+0x280>
 800e406:	2b05      	cmp	r3, #5
 800e408:	bfc4      	itt	gt
 800e40a:	3b04      	subgt	r3, #4
 800e40c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e410:	f1a3 0302 	sub.w	r3, r3, #2
 800e414:	bfcc      	ite	gt
 800e416:	2400      	movgt	r4, #0
 800e418:	2401      	movle	r4, #1
 800e41a:	2b03      	cmp	r3, #3
 800e41c:	d863      	bhi.n	800e4e6 <_dtoa_r+0x296>
 800e41e:	e8df f003 	tbb	[pc, r3]
 800e422:	372a      	.short	0x372a
 800e424:	5535      	.short	0x5535
 800e426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e42a:	441e      	add	r6, r3
 800e42c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e430:	2b20      	cmp	r3, #32
 800e432:	bfc1      	itttt	gt
 800e434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e438:	409f      	lslgt	r7, r3
 800e43a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e43e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e442:	bfd6      	itet	le
 800e444:	f1c3 0320 	rsble	r3, r3, #32
 800e448:	ea47 0003 	orrgt.w	r0, r7, r3
 800e44c:	fa04 f003 	lslle.w	r0, r4, r3
 800e450:	f7f2 f860 	bl	8000514 <__aeabi_ui2d>
 800e454:	2201      	movs	r2, #1
 800e456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e45a:	3e01      	subs	r6, #1
 800e45c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e45e:	e777      	b.n	800e350 <_dtoa_r+0x100>
 800e460:	2301      	movs	r3, #1
 800e462:	e7b8      	b.n	800e3d6 <_dtoa_r+0x186>
 800e464:	9012      	str	r0, [sp, #72]	@ 0x48
 800e466:	e7b7      	b.n	800e3d8 <_dtoa_r+0x188>
 800e468:	427b      	negs	r3, r7
 800e46a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e46c:	2300      	movs	r3, #0
 800e46e:	eba8 0807 	sub.w	r8, r8, r7
 800e472:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e474:	e7c4      	b.n	800e400 <_dtoa_r+0x1b0>
 800e476:	2300      	movs	r3, #0
 800e478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dc35      	bgt.n	800e4ec <_dtoa_r+0x29c>
 800e480:	2301      	movs	r3, #1
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	9307      	str	r3, [sp, #28]
 800e486:	461a      	mov	r2, r3
 800e488:	920e      	str	r2, [sp, #56]	@ 0x38
 800e48a:	e00b      	b.n	800e4a4 <_dtoa_r+0x254>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e7f3      	b.n	800e478 <_dtoa_r+0x228>
 800e490:	2300      	movs	r3, #0
 800e492:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e496:	18fb      	adds	r3, r7, r3
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	3301      	adds	r3, #1
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	9307      	str	r3, [sp, #28]
 800e4a0:	bfb8      	it	lt
 800e4a2:	2301      	movlt	r3, #1
 800e4a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	2204      	movs	r2, #4
 800e4ac:	f102 0514 	add.w	r5, r2, #20
 800e4b0:	429d      	cmp	r5, r3
 800e4b2:	d91f      	bls.n	800e4f4 <_dtoa_r+0x2a4>
 800e4b4:	6041      	str	r1, [r0, #4]
 800e4b6:	4658      	mov	r0, fp
 800e4b8:	f000 fcd8 	bl	800ee6c <_Balloc>
 800e4bc:	4682      	mov	sl, r0
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d13c      	bne.n	800e53c <_dtoa_r+0x2ec>
 800e4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e530 <_dtoa_r+0x2e0>)
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e4ca:	e6d8      	b.n	800e27e <_dtoa_r+0x2e>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e7e0      	b.n	800e492 <_dtoa_r+0x242>
 800e4d0:	2401      	movs	r4, #1
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	9307      	str	r3, [sp, #28]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2312      	movs	r3, #18
 800e4e4:	e7d0      	b.n	800e488 <_dtoa_r+0x238>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4ea:	e7f5      	b.n	800e4d8 <_dtoa_r+0x288>
 800e4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	9307      	str	r3, [sp, #28]
 800e4f2:	e7d7      	b.n	800e4a4 <_dtoa_r+0x254>
 800e4f4:	3101      	adds	r1, #1
 800e4f6:	0052      	lsls	r2, r2, #1
 800e4f8:	e7d8      	b.n	800e4ac <_dtoa_r+0x25c>
 800e4fa:	bf00      	nop
 800e4fc:	f3af 8000 	nop.w
 800e500:	636f4361 	.word	0x636f4361
 800e504:	3fd287a7 	.word	0x3fd287a7
 800e508:	8b60c8b3 	.word	0x8b60c8b3
 800e50c:	3fc68a28 	.word	0x3fc68a28
 800e510:	509f79fb 	.word	0x509f79fb
 800e514:	3fd34413 	.word	0x3fd34413
 800e518:	0802a0e9 	.word	0x0802a0e9
 800e51c:	0802a100 	.word	0x0802a100
 800e520:	7ff00000 	.word	0x7ff00000
 800e524:	0802a0b9 	.word	0x0802a0b9
 800e528:	3ff80000 	.word	0x3ff80000
 800e52c:	0802a1f8 	.word	0x0802a1f8
 800e530:	0802a158 	.word	0x0802a158
 800e534:	0802a0e5 	.word	0x0802a0e5
 800e538:	0802a0b8 	.word	0x0802a0b8
 800e53c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e540:	6018      	str	r0, [r3, #0]
 800e542:	9b07      	ldr	r3, [sp, #28]
 800e544:	2b0e      	cmp	r3, #14
 800e546:	f200 80a4 	bhi.w	800e692 <_dtoa_r+0x442>
 800e54a:	2c00      	cmp	r4, #0
 800e54c:	f000 80a1 	beq.w	800e692 <_dtoa_r+0x442>
 800e550:	2f00      	cmp	r7, #0
 800e552:	dd33      	ble.n	800e5bc <_dtoa_r+0x36c>
 800e554:	4bad      	ldr	r3, [pc, #692]	@ (800e80c <_dtoa_r+0x5bc>)
 800e556:	f007 020f 	and.w	r2, r7, #15
 800e55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e55e:	ed93 7b00 	vldr	d7, [r3]
 800e562:	05f8      	lsls	r0, r7, #23
 800e564:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e56c:	d516      	bpl.n	800e59c <_dtoa_r+0x34c>
 800e56e:	4ba8      	ldr	r3, [pc, #672]	@ (800e810 <_dtoa_r+0x5c0>)
 800e570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e578:	f7f2 f970 	bl	800085c <__aeabi_ddiv>
 800e57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e580:	f004 040f 	and.w	r4, r4, #15
 800e584:	2603      	movs	r6, #3
 800e586:	4da2      	ldr	r5, [pc, #648]	@ (800e810 <_dtoa_r+0x5c0>)
 800e588:	b954      	cbnz	r4, 800e5a0 <_dtoa_r+0x350>
 800e58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e592:	f7f2 f963 	bl	800085c <__aeabi_ddiv>
 800e596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e59a:	e028      	b.n	800e5ee <_dtoa_r+0x39e>
 800e59c:	2602      	movs	r6, #2
 800e59e:	e7f2      	b.n	800e586 <_dtoa_r+0x336>
 800e5a0:	07e1      	lsls	r1, r4, #31
 800e5a2:	d508      	bpl.n	800e5b6 <_dtoa_r+0x366>
 800e5a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5ac:	f7f2 f82c 	bl	8000608 <__aeabi_dmul>
 800e5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5b4:	3601      	adds	r6, #1
 800e5b6:	1064      	asrs	r4, r4, #1
 800e5b8:	3508      	adds	r5, #8
 800e5ba:	e7e5      	b.n	800e588 <_dtoa_r+0x338>
 800e5bc:	f000 80d2 	beq.w	800e764 <_dtoa_r+0x514>
 800e5c0:	427c      	negs	r4, r7
 800e5c2:	4b92      	ldr	r3, [pc, #584]	@ (800e80c <_dtoa_r+0x5bc>)
 800e5c4:	4d92      	ldr	r5, [pc, #584]	@ (800e810 <_dtoa_r+0x5c0>)
 800e5c6:	f004 020f 	and.w	r2, r4, #15
 800e5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5d6:	f7f2 f817 	bl	8000608 <__aeabi_dmul>
 800e5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5de:	1124      	asrs	r4, r4, #4
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	2602      	movs	r6, #2
 800e5e4:	2c00      	cmp	r4, #0
 800e5e6:	f040 80b2 	bne.w	800e74e <_dtoa_r+0x4fe>
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1d3      	bne.n	800e596 <_dtoa_r+0x346>
 800e5ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e5f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 80b7 	beq.w	800e768 <_dtoa_r+0x518>
 800e5fa:	4b86      	ldr	r3, [pc, #536]	@ (800e814 <_dtoa_r+0x5c4>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	4620      	mov	r0, r4
 800e600:	4629      	mov	r1, r5
 800e602:	f7f2 fa73 	bl	8000aec <__aeabi_dcmplt>
 800e606:	2800      	cmp	r0, #0
 800e608:	f000 80ae 	beq.w	800e768 <_dtoa_r+0x518>
 800e60c:	9b07      	ldr	r3, [sp, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 80aa 	beq.w	800e768 <_dtoa_r+0x518>
 800e614:	9b00      	ldr	r3, [sp, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	dd37      	ble.n	800e68a <_dtoa_r+0x43a>
 800e61a:	1e7b      	subs	r3, r7, #1
 800e61c:	9304      	str	r3, [sp, #16]
 800e61e:	4620      	mov	r0, r4
 800e620:	4b7d      	ldr	r3, [pc, #500]	@ (800e818 <_dtoa_r+0x5c8>)
 800e622:	2200      	movs	r2, #0
 800e624:	4629      	mov	r1, r5
 800e626:	f7f1 ffef 	bl	8000608 <__aeabi_dmul>
 800e62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e62e:	9c00      	ldr	r4, [sp, #0]
 800e630:	3601      	adds	r6, #1
 800e632:	4630      	mov	r0, r6
 800e634:	f7f1 ff7e 	bl	8000534 <__aeabi_i2d>
 800e638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e63c:	f7f1 ffe4 	bl	8000608 <__aeabi_dmul>
 800e640:	4b76      	ldr	r3, [pc, #472]	@ (800e81c <_dtoa_r+0x5cc>)
 800e642:	2200      	movs	r2, #0
 800e644:	f7f1 fe2a 	bl	800029c <__adddf3>
 800e648:	4605      	mov	r5, r0
 800e64a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e64e:	2c00      	cmp	r4, #0
 800e650:	f040 808d 	bne.w	800e76e <_dtoa_r+0x51e>
 800e654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e658:	4b71      	ldr	r3, [pc, #452]	@ (800e820 <_dtoa_r+0x5d0>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	f7f1 fe1c 	bl	8000298 <__aeabi_dsub>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e668:	462a      	mov	r2, r5
 800e66a:	4633      	mov	r3, r6
 800e66c:	f7f2 fa5c 	bl	8000b28 <__aeabi_dcmpgt>
 800e670:	2800      	cmp	r0, #0
 800e672:	f040 828b 	bne.w	800eb8c <_dtoa_r+0x93c>
 800e676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e67a:	462a      	mov	r2, r5
 800e67c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e680:	f7f2 fa34 	bl	8000aec <__aeabi_dcmplt>
 800e684:	2800      	cmp	r0, #0
 800e686:	f040 8128 	bne.w	800e8da <_dtoa_r+0x68a>
 800e68a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e68e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e694:	2b00      	cmp	r3, #0
 800e696:	f2c0 815a 	blt.w	800e94e <_dtoa_r+0x6fe>
 800e69a:	2f0e      	cmp	r7, #14
 800e69c:	f300 8157 	bgt.w	800e94e <_dtoa_r+0x6fe>
 800e6a0:	4b5a      	ldr	r3, [pc, #360]	@ (800e80c <_dtoa_r+0x5bc>)
 800e6a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6a6:	ed93 7b00 	vldr	d7, [r3]
 800e6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	ed8d 7b00 	vstr	d7, [sp]
 800e6b2:	da03      	bge.n	800e6bc <_dtoa_r+0x46c>
 800e6b4:	9b07      	ldr	r3, [sp, #28]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f340 8101 	ble.w	800e8be <_dtoa_r+0x66e>
 800e6bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e6c0:	4656      	mov	r6, sl
 800e6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	f7f2 f8c7 	bl	800085c <__aeabi_ddiv>
 800e6ce:	f7f2 fa4b 	bl	8000b68 <__aeabi_d2iz>
 800e6d2:	4680      	mov	r8, r0
 800e6d4:	f7f1 ff2e 	bl	8000534 <__aeabi_i2d>
 800e6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6dc:	f7f1 ff94 	bl	8000608 <__aeabi_dmul>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e6ec:	f7f1 fdd4 	bl	8000298 <__aeabi_dsub>
 800e6f0:	f806 4b01 	strb.w	r4, [r6], #1
 800e6f4:	9d07      	ldr	r5, [sp, #28]
 800e6f6:	eba6 040a 	sub.w	r4, r6, sl
 800e6fa:	42a5      	cmp	r5, r4
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	f040 8117 	bne.w	800e932 <_dtoa_r+0x6e2>
 800e704:	f7f1 fdca 	bl	800029c <__adddf3>
 800e708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	f7f2 fa0a 	bl	8000b28 <__aeabi_dcmpgt>
 800e714:	2800      	cmp	r0, #0
 800e716:	f040 80f9 	bne.w	800e90c <_dtoa_r+0x6bc>
 800e71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e71e:	4620      	mov	r0, r4
 800e720:	4629      	mov	r1, r5
 800e722:	f7f2 f9d9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e726:	b118      	cbz	r0, 800e730 <_dtoa_r+0x4e0>
 800e728:	f018 0f01 	tst.w	r8, #1
 800e72c:	f040 80ee 	bne.w	800e90c <_dtoa_r+0x6bc>
 800e730:	4649      	mov	r1, r9
 800e732:	4658      	mov	r0, fp
 800e734:	f000 fbda 	bl	800eeec <_Bfree>
 800e738:	2300      	movs	r3, #0
 800e73a:	7033      	strb	r3, [r6, #0]
 800e73c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e73e:	3701      	adds	r7, #1
 800e740:	601f      	str	r7, [r3, #0]
 800e742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e744:	2b00      	cmp	r3, #0
 800e746:	f000 831d 	beq.w	800ed84 <_dtoa_r+0xb34>
 800e74a:	601e      	str	r6, [r3, #0]
 800e74c:	e31a      	b.n	800ed84 <_dtoa_r+0xb34>
 800e74e:	07e2      	lsls	r2, r4, #31
 800e750:	d505      	bpl.n	800e75e <_dtoa_r+0x50e>
 800e752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e756:	f7f1 ff57 	bl	8000608 <__aeabi_dmul>
 800e75a:	3601      	adds	r6, #1
 800e75c:	2301      	movs	r3, #1
 800e75e:	1064      	asrs	r4, r4, #1
 800e760:	3508      	adds	r5, #8
 800e762:	e73f      	b.n	800e5e4 <_dtoa_r+0x394>
 800e764:	2602      	movs	r6, #2
 800e766:	e742      	b.n	800e5ee <_dtoa_r+0x39e>
 800e768:	9c07      	ldr	r4, [sp, #28]
 800e76a:	9704      	str	r7, [sp, #16]
 800e76c:	e761      	b.n	800e632 <_dtoa_r+0x3e2>
 800e76e:	4b27      	ldr	r3, [pc, #156]	@ (800e80c <_dtoa_r+0x5bc>)
 800e770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e77a:	4454      	add	r4, sl
 800e77c:	2900      	cmp	r1, #0
 800e77e:	d053      	beq.n	800e828 <_dtoa_r+0x5d8>
 800e780:	4928      	ldr	r1, [pc, #160]	@ (800e824 <_dtoa_r+0x5d4>)
 800e782:	2000      	movs	r0, #0
 800e784:	f7f2 f86a 	bl	800085c <__aeabi_ddiv>
 800e788:	4633      	mov	r3, r6
 800e78a:	462a      	mov	r2, r5
 800e78c:	f7f1 fd84 	bl	8000298 <__aeabi_dsub>
 800e790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e794:	4656      	mov	r6, sl
 800e796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e79a:	f7f2 f9e5 	bl	8000b68 <__aeabi_d2iz>
 800e79e:	4605      	mov	r5, r0
 800e7a0:	f7f1 fec8 	bl	8000534 <__aeabi_i2d>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7ac:	f7f1 fd74 	bl	8000298 <__aeabi_dsub>
 800e7b0:	3530      	adds	r5, #48	@ 0x30
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7ba:	f806 5b01 	strb.w	r5, [r6], #1
 800e7be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7c2:	f7f2 f993 	bl	8000aec <__aeabi_dcmplt>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d171      	bne.n	800e8ae <_dtoa_r+0x65e>
 800e7ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7ce:	4911      	ldr	r1, [pc, #68]	@ (800e814 <_dtoa_r+0x5c4>)
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	f7f1 fd61 	bl	8000298 <__aeabi_dsub>
 800e7d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7da:	f7f2 f987 	bl	8000aec <__aeabi_dcmplt>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	f040 8095 	bne.w	800e90e <_dtoa_r+0x6be>
 800e7e4:	42a6      	cmp	r6, r4
 800e7e6:	f43f af50 	beq.w	800e68a <_dtoa_r+0x43a>
 800e7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e818 <_dtoa_r+0x5c8>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f7f1 ff09 	bl	8000608 <__aeabi_dmul>
 800e7f6:	4b08      	ldr	r3, [pc, #32]	@ (800e818 <_dtoa_r+0x5c8>)
 800e7f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e802:	f7f1 ff01 	bl	8000608 <__aeabi_dmul>
 800e806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e80a:	e7c4      	b.n	800e796 <_dtoa_r+0x546>
 800e80c:	0802a1f8 	.word	0x0802a1f8
 800e810:	0802a1d0 	.word	0x0802a1d0
 800e814:	3ff00000 	.word	0x3ff00000
 800e818:	40240000 	.word	0x40240000
 800e81c:	401c0000 	.word	0x401c0000
 800e820:	40140000 	.word	0x40140000
 800e824:	3fe00000 	.word	0x3fe00000
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	f7f1 feec 	bl	8000608 <__aeabi_dmul>
 800e830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e834:	9415      	str	r4, [sp, #84]	@ 0x54
 800e836:	4656      	mov	r6, sl
 800e838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e83c:	f7f2 f994 	bl	8000b68 <__aeabi_d2iz>
 800e840:	4605      	mov	r5, r0
 800e842:	f7f1 fe77 	bl	8000534 <__aeabi_i2d>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e84e:	f7f1 fd23 	bl	8000298 <__aeabi_dsub>
 800e852:	3530      	adds	r5, #48	@ 0x30
 800e854:	f806 5b01 	strb.w	r5, [r6], #1
 800e858:	4602      	mov	r2, r0
 800e85a:	460b      	mov	r3, r1
 800e85c:	42a6      	cmp	r6, r4
 800e85e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e862:	f04f 0200 	mov.w	r2, #0
 800e866:	d124      	bne.n	800e8b2 <_dtoa_r+0x662>
 800e868:	4bac      	ldr	r3, [pc, #688]	@ (800eb1c <_dtoa_r+0x8cc>)
 800e86a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e86e:	f7f1 fd15 	bl	800029c <__adddf3>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
 800e876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e87a:	f7f2 f955 	bl	8000b28 <__aeabi_dcmpgt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d145      	bne.n	800e90e <_dtoa_r+0x6be>
 800e882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e886:	49a5      	ldr	r1, [pc, #660]	@ (800eb1c <_dtoa_r+0x8cc>)
 800e888:	2000      	movs	r0, #0
 800e88a:	f7f1 fd05 	bl	8000298 <__aeabi_dsub>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e896:	f7f2 f929 	bl	8000aec <__aeabi_dcmplt>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	f43f aef5 	beq.w	800e68a <_dtoa_r+0x43a>
 800e8a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e8a2:	1e73      	subs	r3, r6, #1
 800e8a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e8aa:	2b30      	cmp	r3, #48	@ 0x30
 800e8ac:	d0f8      	beq.n	800e8a0 <_dtoa_r+0x650>
 800e8ae:	9f04      	ldr	r7, [sp, #16]
 800e8b0:	e73e      	b.n	800e730 <_dtoa_r+0x4e0>
 800e8b2:	4b9b      	ldr	r3, [pc, #620]	@ (800eb20 <_dtoa_r+0x8d0>)
 800e8b4:	f7f1 fea8 	bl	8000608 <__aeabi_dmul>
 800e8b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8bc:	e7bc      	b.n	800e838 <_dtoa_r+0x5e8>
 800e8be:	d10c      	bne.n	800e8da <_dtoa_r+0x68a>
 800e8c0:	4b98      	ldr	r3, [pc, #608]	@ (800eb24 <_dtoa_r+0x8d4>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8c8:	f7f1 fe9e 	bl	8000608 <__aeabi_dmul>
 800e8cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8d0:	f7f2 f920 	bl	8000b14 <__aeabi_dcmpge>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	f000 8157 	beq.w	800eb88 <_dtoa_r+0x938>
 800e8da:	2400      	movs	r4, #0
 800e8dc:	4625      	mov	r5, r4
 800e8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8e0:	43db      	mvns	r3, r3
 800e8e2:	9304      	str	r3, [sp, #16]
 800e8e4:	4656      	mov	r6, sl
 800e8e6:	2700      	movs	r7, #0
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4658      	mov	r0, fp
 800e8ec:	f000 fafe 	bl	800eeec <_Bfree>
 800e8f0:	2d00      	cmp	r5, #0
 800e8f2:	d0dc      	beq.n	800e8ae <_dtoa_r+0x65e>
 800e8f4:	b12f      	cbz	r7, 800e902 <_dtoa_r+0x6b2>
 800e8f6:	42af      	cmp	r7, r5
 800e8f8:	d003      	beq.n	800e902 <_dtoa_r+0x6b2>
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	4658      	mov	r0, fp
 800e8fe:	f000 faf5 	bl	800eeec <_Bfree>
 800e902:	4629      	mov	r1, r5
 800e904:	4658      	mov	r0, fp
 800e906:	f000 faf1 	bl	800eeec <_Bfree>
 800e90a:	e7d0      	b.n	800e8ae <_dtoa_r+0x65e>
 800e90c:	9704      	str	r7, [sp, #16]
 800e90e:	4633      	mov	r3, r6
 800e910:	461e      	mov	r6, r3
 800e912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e916:	2a39      	cmp	r2, #57	@ 0x39
 800e918:	d107      	bne.n	800e92a <_dtoa_r+0x6da>
 800e91a:	459a      	cmp	sl, r3
 800e91c:	d1f8      	bne.n	800e910 <_dtoa_r+0x6c0>
 800e91e:	9a04      	ldr	r2, [sp, #16]
 800e920:	3201      	adds	r2, #1
 800e922:	9204      	str	r2, [sp, #16]
 800e924:	2230      	movs	r2, #48	@ 0x30
 800e926:	f88a 2000 	strb.w	r2, [sl]
 800e92a:	781a      	ldrb	r2, [r3, #0]
 800e92c:	3201      	adds	r2, #1
 800e92e:	701a      	strb	r2, [r3, #0]
 800e930:	e7bd      	b.n	800e8ae <_dtoa_r+0x65e>
 800e932:	4b7b      	ldr	r3, [pc, #492]	@ (800eb20 <_dtoa_r+0x8d0>)
 800e934:	2200      	movs	r2, #0
 800e936:	f7f1 fe67 	bl	8000608 <__aeabi_dmul>
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	4604      	mov	r4, r0
 800e940:	460d      	mov	r5, r1
 800e942:	f7f2 f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e946:	2800      	cmp	r0, #0
 800e948:	f43f aebb 	beq.w	800e6c2 <_dtoa_r+0x472>
 800e94c:	e6f0      	b.n	800e730 <_dtoa_r+0x4e0>
 800e94e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e950:	2a00      	cmp	r2, #0
 800e952:	f000 80db 	beq.w	800eb0c <_dtoa_r+0x8bc>
 800e956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e958:	2a01      	cmp	r2, #1
 800e95a:	f300 80bf 	bgt.w	800eadc <_dtoa_r+0x88c>
 800e95e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e960:	2a00      	cmp	r2, #0
 800e962:	f000 80b7 	beq.w	800ead4 <_dtoa_r+0x884>
 800e966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e96a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e96c:	4646      	mov	r6, r8
 800e96e:	9a08      	ldr	r2, [sp, #32]
 800e970:	2101      	movs	r1, #1
 800e972:	441a      	add	r2, r3
 800e974:	4658      	mov	r0, fp
 800e976:	4498      	add	r8, r3
 800e978:	9208      	str	r2, [sp, #32]
 800e97a:	f000 fb6b 	bl	800f054 <__i2b>
 800e97e:	4605      	mov	r5, r0
 800e980:	b15e      	cbz	r6, 800e99a <_dtoa_r+0x74a>
 800e982:	9b08      	ldr	r3, [sp, #32]
 800e984:	2b00      	cmp	r3, #0
 800e986:	dd08      	ble.n	800e99a <_dtoa_r+0x74a>
 800e988:	42b3      	cmp	r3, r6
 800e98a:	9a08      	ldr	r2, [sp, #32]
 800e98c:	bfa8      	it	ge
 800e98e:	4633      	movge	r3, r6
 800e990:	eba8 0803 	sub.w	r8, r8, r3
 800e994:	1af6      	subs	r6, r6, r3
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	9308      	str	r3, [sp, #32]
 800e99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e99c:	b1f3      	cbz	r3, 800e9dc <_dtoa_r+0x78c>
 800e99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 80b7 	beq.w	800eb14 <_dtoa_r+0x8c4>
 800e9a6:	b18c      	cbz	r4, 800e9cc <_dtoa_r+0x77c>
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	4658      	mov	r0, fp
 800e9ae:	f000 fc11 	bl	800f1d4 <__pow5mult>
 800e9b2:	464a      	mov	r2, r9
 800e9b4:	4601      	mov	r1, r0
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	4658      	mov	r0, fp
 800e9ba:	f000 fb61 	bl	800f080 <__multiply>
 800e9be:	4649      	mov	r1, r9
 800e9c0:	9004      	str	r0, [sp, #16]
 800e9c2:	4658      	mov	r0, fp
 800e9c4:	f000 fa92 	bl	800eeec <_Bfree>
 800e9c8:	9b04      	ldr	r3, [sp, #16]
 800e9ca:	4699      	mov	r9, r3
 800e9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ce:	1b1a      	subs	r2, r3, r4
 800e9d0:	d004      	beq.n	800e9dc <_dtoa_r+0x78c>
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	f000 fbfd 	bl	800f1d4 <__pow5mult>
 800e9da:	4681      	mov	r9, r0
 800e9dc:	2101      	movs	r1, #1
 800e9de:	4658      	mov	r0, fp
 800e9e0:	f000 fb38 	bl	800f054 <__i2b>
 800e9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 81cf 	beq.w	800ed8c <_dtoa_r+0xb3c>
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	4658      	mov	r0, fp
 800e9f4:	f000 fbee 	bl	800f1d4 <__pow5mult>
 800e9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	f300 8095 	bgt.w	800eb2c <_dtoa_r+0x8dc>
 800ea02:	9b02      	ldr	r3, [sp, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f040 8087 	bne.w	800eb18 <_dtoa_r+0x8c8>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f040 8089 	bne.w	800eb28 <_dtoa_r+0x8d8>
 800ea16:	9b03      	ldr	r3, [sp, #12]
 800ea18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea1c:	0d1b      	lsrs	r3, r3, #20
 800ea1e:	051b      	lsls	r3, r3, #20
 800ea20:	b12b      	cbz	r3, 800ea2e <_dtoa_r+0x7de>
 800ea22:	9b08      	ldr	r3, [sp, #32]
 800ea24:	3301      	adds	r3, #1
 800ea26:	9308      	str	r3, [sp, #32]
 800ea28:	f108 0801 	add.w	r8, r8, #1
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f000 81b0 	beq.w	800ed98 <_dtoa_r+0xb48>
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea3e:	6918      	ldr	r0, [r3, #16]
 800ea40:	f000 fabc 	bl	800efbc <__hi0bits>
 800ea44:	f1c0 0020 	rsb	r0, r0, #32
 800ea48:	9b08      	ldr	r3, [sp, #32]
 800ea4a:	4418      	add	r0, r3
 800ea4c:	f010 001f 	ands.w	r0, r0, #31
 800ea50:	d077      	beq.n	800eb42 <_dtoa_r+0x8f2>
 800ea52:	f1c0 0320 	rsb	r3, r0, #32
 800ea56:	2b04      	cmp	r3, #4
 800ea58:	dd6b      	ble.n	800eb32 <_dtoa_r+0x8e2>
 800ea5a:	9b08      	ldr	r3, [sp, #32]
 800ea5c:	f1c0 001c 	rsb	r0, r0, #28
 800ea60:	4403      	add	r3, r0
 800ea62:	4480      	add	r8, r0
 800ea64:	4406      	add	r6, r0
 800ea66:	9308      	str	r3, [sp, #32]
 800ea68:	f1b8 0f00 	cmp.w	r8, #0
 800ea6c:	dd05      	ble.n	800ea7a <_dtoa_r+0x82a>
 800ea6e:	4649      	mov	r1, r9
 800ea70:	4642      	mov	r2, r8
 800ea72:	4658      	mov	r0, fp
 800ea74:	f000 fc08 	bl	800f288 <__lshift>
 800ea78:	4681      	mov	r9, r0
 800ea7a:	9b08      	ldr	r3, [sp, #32]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dd05      	ble.n	800ea8c <_dtoa_r+0x83c>
 800ea80:	4621      	mov	r1, r4
 800ea82:	461a      	mov	r2, r3
 800ea84:	4658      	mov	r0, fp
 800ea86:	f000 fbff 	bl	800f288 <__lshift>
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d059      	beq.n	800eb46 <_dtoa_r+0x8f6>
 800ea92:	4621      	mov	r1, r4
 800ea94:	4648      	mov	r0, r9
 800ea96:	f000 fc63 	bl	800f360 <__mcmp>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	da53      	bge.n	800eb46 <_dtoa_r+0x8f6>
 800ea9e:	1e7b      	subs	r3, r7, #1
 800eaa0:	9304      	str	r3, [sp, #16]
 800eaa2:	4649      	mov	r1, r9
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	220a      	movs	r2, #10
 800eaa8:	4658      	mov	r0, fp
 800eaaa:	f000 fa41 	bl	800ef30 <__multadd>
 800eaae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eab0:	4681      	mov	r9, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 8172 	beq.w	800ed9c <_dtoa_r+0xb4c>
 800eab8:	2300      	movs	r3, #0
 800eaba:	4629      	mov	r1, r5
 800eabc:	220a      	movs	r2, #10
 800eabe:	4658      	mov	r0, fp
 800eac0:	f000 fa36 	bl	800ef30 <__multadd>
 800eac4:	9b00      	ldr	r3, [sp, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	4605      	mov	r5, r0
 800eaca:	dc67      	bgt.n	800eb9c <_dtoa_r+0x94c>
 800eacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eace:	2b02      	cmp	r3, #2
 800ead0:	dc41      	bgt.n	800eb56 <_dtoa_r+0x906>
 800ead2:	e063      	b.n	800eb9c <_dtoa_r+0x94c>
 800ead4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ead6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eada:	e746      	b.n	800e96a <_dtoa_r+0x71a>
 800eadc:	9b07      	ldr	r3, [sp, #28]
 800eade:	1e5c      	subs	r4, r3, #1
 800eae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eae2:	42a3      	cmp	r3, r4
 800eae4:	bfbf      	itttt	lt
 800eae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800eae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800eaea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800eaec:	1ae3      	sublt	r3, r4, r3
 800eaee:	bfb4      	ite	lt
 800eaf0:	18d2      	addlt	r2, r2, r3
 800eaf2:	1b1c      	subge	r4, r3, r4
 800eaf4:	9b07      	ldr	r3, [sp, #28]
 800eaf6:	bfbc      	itt	lt
 800eaf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800eafa:	2400      	movlt	r4, #0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	bfb5      	itete	lt
 800eb00:	eba8 0603 	sublt.w	r6, r8, r3
 800eb04:	9b07      	ldrge	r3, [sp, #28]
 800eb06:	2300      	movlt	r3, #0
 800eb08:	4646      	movge	r6, r8
 800eb0a:	e730      	b.n	800e96e <_dtoa_r+0x71e>
 800eb0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eb0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eb10:	4646      	mov	r6, r8
 800eb12:	e735      	b.n	800e980 <_dtoa_r+0x730>
 800eb14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb16:	e75c      	b.n	800e9d2 <_dtoa_r+0x782>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	e788      	b.n	800ea2e <_dtoa_r+0x7de>
 800eb1c:	3fe00000 	.word	0x3fe00000
 800eb20:	40240000 	.word	0x40240000
 800eb24:	40140000 	.word	0x40140000
 800eb28:	9b02      	ldr	r3, [sp, #8]
 800eb2a:	e780      	b.n	800ea2e <_dtoa_r+0x7de>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb30:	e782      	b.n	800ea38 <_dtoa_r+0x7e8>
 800eb32:	d099      	beq.n	800ea68 <_dtoa_r+0x818>
 800eb34:	9a08      	ldr	r2, [sp, #32]
 800eb36:	331c      	adds	r3, #28
 800eb38:	441a      	add	r2, r3
 800eb3a:	4498      	add	r8, r3
 800eb3c:	441e      	add	r6, r3
 800eb3e:	9208      	str	r2, [sp, #32]
 800eb40:	e792      	b.n	800ea68 <_dtoa_r+0x818>
 800eb42:	4603      	mov	r3, r0
 800eb44:	e7f6      	b.n	800eb34 <_dtoa_r+0x8e4>
 800eb46:	9b07      	ldr	r3, [sp, #28]
 800eb48:	9704      	str	r7, [sp, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	dc20      	bgt.n	800eb90 <_dtoa_r+0x940>
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	dd1e      	ble.n	800eb94 <_dtoa_r+0x944>
 800eb56:	9b00      	ldr	r3, [sp, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f47f aec0 	bne.w	800e8de <_dtoa_r+0x68e>
 800eb5e:	4621      	mov	r1, r4
 800eb60:	2205      	movs	r2, #5
 800eb62:	4658      	mov	r0, fp
 800eb64:	f000 f9e4 	bl	800ef30 <__multadd>
 800eb68:	4601      	mov	r1, r0
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4648      	mov	r0, r9
 800eb6e:	f000 fbf7 	bl	800f360 <__mcmp>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f77f aeb3 	ble.w	800e8de <_dtoa_r+0x68e>
 800eb78:	4656      	mov	r6, sl
 800eb7a:	2331      	movs	r3, #49	@ 0x31
 800eb7c:	f806 3b01 	strb.w	r3, [r6], #1
 800eb80:	9b04      	ldr	r3, [sp, #16]
 800eb82:	3301      	adds	r3, #1
 800eb84:	9304      	str	r3, [sp, #16]
 800eb86:	e6ae      	b.n	800e8e6 <_dtoa_r+0x696>
 800eb88:	9c07      	ldr	r4, [sp, #28]
 800eb8a:	9704      	str	r7, [sp, #16]
 800eb8c:	4625      	mov	r5, r4
 800eb8e:	e7f3      	b.n	800eb78 <_dtoa_r+0x928>
 800eb90:	9b07      	ldr	r3, [sp, #28]
 800eb92:	9300      	str	r3, [sp, #0]
 800eb94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 8104 	beq.w	800eda4 <_dtoa_r+0xb54>
 800eb9c:	2e00      	cmp	r6, #0
 800eb9e:	dd05      	ble.n	800ebac <_dtoa_r+0x95c>
 800eba0:	4629      	mov	r1, r5
 800eba2:	4632      	mov	r2, r6
 800eba4:	4658      	mov	r0, fp
 800eba6:	f000 fb6f 	bl	800f288 <__lshift>
 800ebaa:	4605      	mov	r5, r0
 800ebac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d05a      	beq.n	800ec68 <_dtoa_r+0xa18>
 800ebb2:	6869      	ldr	r1, [r5, #4]
 800ebb4:	4658      	mov	r0, fp
 800ebb6:	f000 f959 	bl	800ee6c <_Balloc>
 800ebba:	4606      	mov	r6, r0
 800ebbc:	b928      	cbnz	r0, 800ebca <_dtoa_r+0x97a>
 800ebbe:	4b84      	ldr	r3, [pc, #528]	@ (800edd0 <_dtoa_r+0xb80>)
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ebc6:	f7ff bb5a 	b.w	800e27e <_dtoa_r+0x2e>
 800ebca:	692a      	ldr	r2, [r5, #16]
 800ebcc:	3202      	adds	r2, #2
 800ebce:	0092      	lsls	r2, r2, #2
 800ebd0:	f105 010c 	add.w	r1, r5, #12
 800ebd4:	300c      	adds	r0, #12
 800ebd6:	f7ff faa2 	bl	800e11e <memcpy>
 800ebda:	2201      	movs	r2, #1
 800ebdc:	4631      	mov	r1, r6
 800ebde:	4658      	mov	r0, fp
 800ebe0:	f000 fb52 	bl	800f288 <__lshift>
 800ebe4:	f10a 0301 	add.w	r3, sl, #1
 800ebe8:	9307      	str	r3, [sp, #28]
 800ebea:	9b00      	ldr	r3, [sp, #0]
 800ebec:	4453      	add	r3, sl
 800ebee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebf0:	9b02      	ldr	r3, [sp, #8]
 800ebf2:	f003 0301 	and.w	r3, r3, #1
 800ebf6:	462f      	mov	r7, r5
 800ebf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	9b07      	ldr	r3, [sp, #28]
 800ebfe:	4621      	mov	r1, r4
 800ec00:	3b01      	subs	r3, #1
 800ec02:	4648      	mov	r0, r9
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	f7ff fa98 	bl	800e13a <quorem>
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	9002      	str	r0, [sp, #8]
 800ec0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec12:	4648      	mov	r0, r9
 800ec14:	f000 fba4 	bl	800f360 <__mcmp>
 800ec18:	462a      	mov	r2, r5
 800ec1a:	9008      	str	r0, [sp, #32]
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	4658      	mov	r0, fp
 800ec20:	f000 fbba 	bl	800f398 <__mdiff>
 800ec24:	68c2      	ldr	r2, [r0, #12]
 800ec26:	4606      	mov	r6, r0
 800ec28:	bb02      	cbnz	r2, 800ec6c <_dtoa_r+0xa1c>
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	4648      	mov	r0, r9
 800ec2e:	f000 fb97 	bl	800f360 <__mcmp>
 800ec32:	4602      	mov	r2, r0
 800ec34:	4631      	mov	r1, r6
 800ec36:	4658      	mov	r0, fp
 800ec38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec3a:	f000 f957 	bl	800eeec <_Bfree>
 800ec3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec42:	9e07      	ldr	r6, [sp, #28]
 800ec44:	ea43 0102 	orr.w	r1, r3, r2
 800ec48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec4a:	4319      	orrs	r1, r3
 800ec4c:	d110      	bne.n	800ec70 <_dtoa_r+0xa20>
 800ec4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec52:	d029      	beq.n	800eca8 <_dtoa_r+0xa58>
 800ec54:	9b08      	ldr	r3, [sp, #32]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	dd02      	ble.n	800ec60 <_dtoa_r+0xa10>
 800ec5a:	9b02      	ldr	r3, [sp, #8]
 800ec5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ec60:	9b00      	ldr	r3, [sp, #0]
 800ec62:	f883 8000 	strb.w	r8, [r3]
 800ec66:	e63f      	b.n	800e8e8 <_dtoa_r+0x698>
 800ec68:	4628      	mov	r0, r5
 800ec6a:	e7bb      	b.n	800ebe4 <_dtoa_r+0x994>
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	e7e1      	b.n	800ec34 <_dtoa_r+0x9e4>
 800ec70:	9b08      	ldr	r3, [sp, #32]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	db04      	blt.n	800ec80 <_dtoa_r+0xa30>
 800ec76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec78:	430b      	orrs	r3, r1
 800ec7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec7c:	430b      	orrs	r3, r1
 800ec7e:	d120      	bne.n	800ecc2 <_dtoa_r+0xa72>
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	dded      	ble.n	800ec60 <_dtoa_r+0xa10>
 800ec84:	4649      	mov	r1, r9
 800ec86:	2201      	movs	r2, #1
 800ec88:	4658      	mov	r0, fp
 800ec8a:	f000 fafd 	bl	800f288 <__lshift>
 800ec8e:	4621      	mov	r1, r4
 800ec90:	4681      	mov	r9, r0
 800ec92:	f000 fb65 	bl	800f360 <__mcmp>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	dc03      	bgt.n	800eca2 <_dtoa_r+0xa52>
 800ec9a:	d1e1      	bne.n	800ec60 <_dtoa_r+0xa10>
 800ec9c:	f018 0f01 	tst.w	r8, #1
 800eca0:	d0de      	beq.n	800ec60 <_dtoa_r+0xa10>
 800eca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eca6:	d1d8      	bne.n	800ec5a <_dtoa_r+0xa0a>
 800eca8:	9a00      	ldr	r2, [sp, #0]
 800ecaa:	2339      	movs	r3, #57	@ 0x39
 800ecac:	7013      	strb	r3, [r2, #0]
 800ecae:	4633      	mov	r3, r6
 800ecb0:	461e      	mov	r6, r3
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ecb8:	2a39      	cmp	r2, #57	@ 0x39
 800ecba:	d052      	beq.n	800ed62 <_dtoa_r+0xb12>
 800ecbc:	3201      	adds	r2, #1
 800ecbe:	701a      	strb	r2, [r3, #0]
 800ecc0:	e612      	b.n	800e8e8 <_dtoa_r+0x698>
 800ecc2:	2a00      	cmp	r2, #0
 800ecc4:	dd07      	ble.n	800ecd6 <_dtoa_r+0xa86>
 800ecc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ecca:	d0ed      	beq.n	800eca8 <_dtoa_r+0xa58>
 800eccc:	9a00      	ldr	r2, [sp, #0]
 800ecce:	f108 0301 	add.w	r3, r8, #1
 800ecd2:	7013      	strb	r3, [r2, #0]
 800ecd4:	e608      	b.n	800e8e8 <_dtoa_r+0x698>
 800ecd6:	9b07      	ldr	r3, [sp, #28]
 800ecd8:	9a07      	ldr	r2, [sp, #28]
 800ecda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ecde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d028      	beq.n	800ed36 <_dtoa_r+0xae6>
 800ece4:	4649      	mov	r1, r9
 800ece6:	2300      	movs	r3, #0
 800ece8:	220a      	movs	r2, #10
 800ecea:	4658      	mov	r0, fp
 800ecec:	f000 f920 	bl	800ef30 <__multadd>
 800ecf0:	42af      	cmp	r7, r5
 800ecf2:	4681      	mov	r9, r0
 800ecf4:	f04f 0300 	mov.w	r3, #0
 800ecf8:	f04f 020a 	mov.w	r2, #10
 800ecfc:	4639      	mov	r1, r7
 800ecfe:	4658      	mov	r0, fp
 800ed00:	d107      	bne.n	800ed12 <_dtoa_r+0xac2>
 800ed02:	f000 f915 	bl	800ef30 <__multadd>
 800ed06:	4607      	mov	r7, r0
 800ed08:	4605      	mov	r5, r0
 800ed0a:	9b07      	ldr	r3, [sp, #28]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	9307      	str	r3, [sp, #28]
 800ed10:	e774      	b.n	800ebfc <_dtoa_r+0x9ac>
 800ed12:	f000 f90d 	bl	800ef30 <__multadd>
 800ed16:	4629      	mov	r1, r5
 800ed18:	4607      	mov	r7, r0
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	220a      	movs	r2, #10
 800ed1e:	4658      	mov	r0, fp
 800ed20:	f000 f906 	bl	800ef30 <__multadd>
 800ed24:	4605      	mov	r5, r0
 800ed26:	e7f0      	b.n	800ed0a <_dtoa_r+0xaba>
 800ed28:	9b00      	ldr	r3, [sp, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	bfcc      	ite	gt
 800ed2e:	461e      	movgt	r6, r3
 800ed30:	2601      	movle	r6, #1
 800ed32:	4456      	add	r6, sl
 800ed34:	2700      	movs	r7, #0
 800ed36:	4649      	mov	r1, r9
 800ed38:	2201      	movs	r2, #1
 800ed3a:	4658      	mov	r0, fp
 800ed3c:	f000 faa4 	bl	800f288 <__lshift>
 800ed40:	4621      	mov	r1, r4
 800ed42:	4681      	mov	r9, r0
 800ed44:	f000 fb0c 	bl	800f360 <__mcmp>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	dcb0      	bgt.n	800ecae <_dtoa_r+0xa5e>
 800ed4c:	d102      	bne.n	800ed54 <_dtoa_r+0xb04>
 800ed4e:	f018 0f01 	tst.w	r8, #1
 800ed52:	d1ac      	bne.n	800ecae <_dtoa_r+0xa5e>
 800ed54:	4633      	mov	r3, r6
 800ed56:	461e      	mov	r6, r3
 800ed58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed5c:	2a30      	cmp	r2, #48	@ 0x30
 800ed5e:	d0fa      	beq.n	800ed56 <_dtoa_r+0xb06>
 800ed60:	e5c2      	b.n	800e8e8 <_dtoa_r+0x698>
 800ed62:	459a      	cmp	sl, r3
 800ed64:	d1a4      	bne.n	800ecb0 <_dtoa_r+0xa60>
 800ed66:	9b04      	ldr	r3, [sp, #16]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	9304      	str	r3, [sp, #16]
 800ed6c:	2331      	movs	r3, #49	@ 0x31
 800ed6e:	f88a 3000 	strb.w	r3, [sl]
 800ed72:	e5b9      	b.n	800e8e8 <_dtoa_r+0x698>
 800ed74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800edd4 <_dtoa_r+0xb84>
 800ed7a:	b11b      	cbz	r3, 800ed84 <_dtoa_r+0xb34>
 800ed7c:	f10a 0308 	add.w	r3, sl, #8
 800ed80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ed82:	6013      	str	r3, [r2, #0]
 800ed84:	4650      	mov	r0, sl
 800ed86:	b019      	add	sp, #100	@ 0x64
 800ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	f77f ae37 	ble.w	800ea02 <_dtoa_r+0x7b2>
 800ed94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed98:	2001      	movs	r0, #1
 800ed9a:	e655      	b.n	800ea48 <_dtoa_r+0x7f8>
 800ed9c:	9b00      	ldr	r3, [sp, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f77f aed6 	ble.w	800eb50 <_dtoa_r+0x900>
 800eda4:	4656      	mov	r6, sl
 800eda6:	4621      	mov	r1, r4
 800eda8:	4648      	mov	r0, r9
 800edaa:	f7ff f9c6 	bl	800e13a <quorem>
 800edae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800edb2:	f806 8b01 	strb.w	r8, [r6], #1
 800edb6:	9b00      	ldr	r3, [sp, #0]
 800edb8:	eba6 020a 	sub.w	r2, r6, sl
 800edbc:	4293      	cmp	r3, r2
 800edbe:	ddb3      	ble.n	800ed28 <_dtoa_r+0xad8>
 800edc0:	4649      	mov	r1, r9
 800edc2:	2300      	movs	r3, #0
 800edc4:	220a      	movs	r2, #10
 800edc6:	4658      	mov	r0, fp
 800edc8:	f000 f8b2 	bl	800ef30 <__multadd>
 800edcc:	4681      	mov	r9, r0
 800edce:	e7ea      	b.n	800eda6 <_dtoa_r+0xb56>
 800edd0:	0802a158 	.word	0x0802a158
 800edd4:	0802a0dc 	.word	0x0802a0dc

0800edd8 <_free_r>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	4605      	mov	r5, r0
 800eddc:	2900      	cmp	r1, #0
 800edde:	d041      	beq.n	800ee64 <_free_r+0x8c>
 800ede0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ede4:	1f0c      	subs	r4, r1, #4
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	bfb8      	it	lt
 800edea:	18e4      	addlt	r4, r4, r3
 800edec:	f7fe fa4c 	bl	800d288 <__malloc_lock>
 800edf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ee68 <_free_r+0x90>)
 800edf2:	6813      	ldr	r3, [r2, #0]
 800edf4:	b933      	cbnz	r3, 800ee04 <_free_r+0x2c>
 800edf6:	6063      	str	r3, [r4, #4]
 800edf8:	6014      	str	r4, [r2, #0]
 800edfa:	4628      	mov	r0, r5
 800edfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee00:	f7fe ba48 	b.w	800d294 <__malloc_unlock>
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	d908      	bls.n	800ee1a <_free_r+0x42>
 800ee08:	6820      	ldr	r0, [r4, #0]
 800ee0a:	1821      	adds	r1, r4, r0
 800ee0c:	428b      	cmp	r3, r1
 800ee0e:	bf01      	itttt	eq
 800ee10:	6819      	ldreq	r1, [r3, #0]
 800ee12:	685b      	ldreq	r3, [r3, #4]
 800ee14:	1809      	addeq	r1, r1, r0
 800ee16:	6021      	streq	r1, [r4, #0]
 800ee18:	e7ed      	b.n	800edf6 <_free_r+0x1e>
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	b10b      	cbz	r3, 800ee24 <_free_r+0x4c>
 800ee20:	42a3      	cmp	r3, r4
 800ee22:	d9fa      	bls.n	800ee1a <_free_r+0x42>
 800ee24:	6811      	ldr	r1, [r2, #0]
 800ee26:	1850      	adds	r0, r2, r1
 800ee28:	42a0      	cmp	r0, r4
 800ee2a:	d10b      	bne.n	800ee44 <_free_r+0x6c>
 800ee2c:	6820      	ldr	r0, [r4, #0]
 800ee2e:	4401      	add	r1, r0
 800ee30:	1850      	adds	r0, r2, r1
 800ee32:	4283      	cmp	r3, r0
 800ee34:	6011      	str	r1, [r2, #0]
 800ee36:	d1e0      	bne.n	800edfa <_free_r+0x22>
 800ee38:	6818      	ldr	r0, [r3, #0]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	6053      	str	r3, [r2, #4]
 800ee3e:	4408      	add	r0, r1
 800ee40:	6010      	str	r0, [r2, #0]
 800ee42:	e7da      	b.n	800edfa <_free_r+0x22>
 800ee44:	d902      	bls.n	800ee4c <_free_r+0x74>
 800ee46:	230c      	movs	r3, #12
 800ee48:	602b      	str	r3, [r5, #0]
 800ee4a:	e7d6      	b.n	800edfa <_free_r+0x22>
 800ee4c:	6820      	ldr	r0, [r4, #0]
 800ee4e:	1821      	adds	r1, r4, r0
 800ee50:	428b      	cmp	r3, r1
 800ee52:	bf04      	itt	eq
 800ee54:	6819      	ldreq	r1, [r3, #0]
 800ee56:	685b      	ldreq	r3, [r3, #4]
 800ee58:	6063      	str	r3, [r4, #4]
 800ee5a:	bf04      	itt	eq
 800ee5c:	1809      	addeq	r1, r1, r0
 800ee5e:	6021      	streq	r1, [r4, #0]
 800ee60:	6054      	str	r4, [r2, #4]
 800ee62:	e7ca      	b.n	800edfa <_free_r+0x22>
 800ee64:	bd38      	pop	{r3, r4, r5, pc}
 800ee66:	bf00      	nop
 800ee68:	200033fc 	.word	0x200033fc

0800ee6c <_Balloc>:
 800ee6c:	b570      	push	{r4, r5, r6, lr}
 800ee6e:	69c6      	ldr	r6, [r0, #28]
 800ee70:	4604      	mov	r4, r0
 800ee72:	460d      	mov	r5, r1
 800ee74:	b976      	cbnz	r6, 800ee94 <_Balloc+0x28>
 800ee76:	2010      	movs	r0, #16
 800ee78:	f7fe f95c 	bl	800d134 <malloc>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	61e0      	str	r0, [r4, #28]
 800ee80:	b920      	cbnz	r0, 800ee8c <_Balloc+0x20>
 800ee82:	4b18      	ldr	r3, [pc, #96]	@ (800eee4 <_Balloc+0x78>)
 800ee84:	4818      	ldr	r0, [pc, #96]	@ (800eee8 <_Balloc+0x7c>)
 800ee86:	216b      	movs	r1, #107	@ 0x6b
 800ee88:	f000 ff5e 	bl	800fd48 <__assert_func>
 800ee8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee90:	6006      	str	r6, [r0, #0]
 800ee92:	60c6      	str	r6, [r0, #12]
 800ee94:	69e6      	ldr	r6, [r4, #28]
 800ee96:	68f3      	ldr	r3, [r6, #12]
 800ee98:	b183      	cbz	r3, 800eebc <_Balloc+0x50>
 800ee9a:	69e3      	ldr	r3, [r4, #28]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eea2:	b9b8      	cbnz	r0, 800eed4 <_Balloc+0x68>
 800eea4:	2101      	movs	r1, #1
 800eea6:	fa01 f605 	lsl.w	r6, r1, r5
 800eeaa:	1d72      	adds	r2, r6, #5
 800eeac:	0092      	lsls	r2, r2, #2
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f000 ff68 	bl	800fd84 <_calloc_r>
 800eeb4:	b160      	cbz	r0, 800eed0 <_Balloc+0x64>
 800eeb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eeba:	e00e      	b.n	800eeda <_Balloc+0x6e>
 800eebc:	2221      	movs	r2, #33	@ 0x21
 800eebe:	2104      	movs	r1, #4
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 ff5f 	bl	800fd84 <_calloc_r>
 800eec6:	69e3      	ldr	r3, [r4, #28]
 800eec8:	60f0      	str	r0, [r6, #12]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1e4      	bne.n	800ee9a <_Balloc+0x2e>
 800eed0:	2000      	movs	r0, #0
 800eed2:	bd70      	pop	{r4, r5, r6, pc}
 800eed4:	6802      	ldr	r2, [r0, #0]
 800eed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eeda:	2300      	movs	r3, #0
 800eedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eee0:	e7f7      	b.n	800eed2 <_Balloc+0x66>
 800eee2:	bf00      	nop
 800eee4:	0802a0e9 	.word	0x0802a0e9
 800eee8:	0802a169 	.word	0x0802a169

0800eeec <_Bfree>:
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	69c6      	ldr	r6, [r0, #28]
 800eef0:	4605      	mov	r5, r0
 800eef2:	460c      	mov	r4, r1
 800eef4:	b976      	cbnz	r6, 800ef14 <_Bfree+0x28>
 800eef6:	2010      	movs	r0, #16
 800eef8:	f7fe f91c 	bl	800d134 <malloc>
 800eefc:	4602      	mov	r2, r0
 800eefe:	61e8      	str	r0, [r5, #28]
 800ef00:	b920      	cbnz	r0, 800ef0c <_Bfree+0x20>
 800ef02:	4b09      	ldr	r3, [pc, #36]	@ (800ef28 <_Bfree+0x3c>)
 800ef04:	4809      	ldr	r0, [pc, #36]	@ (800ef2c <_Bfree+0x40>)
 800ef06:	218f      	movs	r1, #143	@ 0x8f
 800ef08:	f000 ff1e 	bl	800fd48 <__assert_func>
 800ef0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef10:	6006      	str	r6, [r0, #0]
 800ef12:	60c6      	str	r6, [r0, #12]
 800ef14:	b13c      	cbz	r4, 800ef26 <_Bfree+0x3a>
 800ef16:	69eb      	ldr	r3, [r5, #28]
 800ef18:	6862      	ldr	r2, [r4, #4]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef20:	6021      	str	r1, [r4, #0]
 800ef22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef26:	bd70      	pop	{r4, r5, r6, pc}
 800ef28:	0802a0e9 	.word	0x0802a0e9
 800ef2c:	0802a169 	.word	0x0802a169

0800ef30 <__multadd>:
 800ef30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef34:	690d      	ldr	r5, [r1, #16]
 800ef36:	4607      	mov	r7, r0
 800ef38:	460c      	mov	r4, r1
 800ef3a:	461e      	mov	r6, r3
 800ef3c:	f101 0c14 	add.w	ip, r1, #20
 800ef40:	2000      	movs	r0, #0
 800ef42:	f8dc 3000 	ldr.w	r3, [ip]
 800ef46:	b299      	uxth	r1, r3
 800ef48:	fb02 6101 	mla	r1, r2, r1, r6
 800ef4c:	0c1e      	lsrs	r6, r3, #16
 800ef4e:	0c0b      	lsrs	r3, r1, #16
 800ef50:	fb02 3306 	mla	r3, r2, r6, r3
 800ef54:	b289      	uxth	r1, r1
 800ef56:	3001      	adds	r0, #1
 800ef58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef5c:	4285      	cmp	r5, r0
 800ef5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ef62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef66:	dcec      	bgt.n	800ef42 <__multadd+0x12>
 800ef68:	b30e      	cbz	r6, 800efae <__multadd+0x7e>
 800ef6a:	68a3      	ldr	r3, [r4, #8]
 800ef6c:	42ab      	cmp	r3, r5
 800ef6e:	dc19      	bgt.n	800efa4 <__multadd+0x74>
 800ef70:	6861      	ldr	r1, [r4, #4]
 800ef72:	4638      	mov	r0, r7
 800ef74:	3101      	adds	r1, #1
 800ef76:	f7ff ff79 	bl	800ee6c <_Balloc>
 800ef7a:	4680      	mov	r8, r0
 800ef7c:	b928      	cbnz	r0, 800ef8a <__multadd+0x5a>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	4b0c      	ldr	r3, [pc, #48]	@ (800efb4 <__multadd+0x84>)
 800ef82:	480d      	ldr	r0, [pc, #52]	@ (800efb8 <__multadd+0x88>)
 800ef84:	21ba      	movs	r1, #186	@ 0xba
 800ef86:	f000 fedf 	bl	800fd48 <__assert_func>
 800ef8a:	6922      	ldr	r2, [r4, #16]
 800ef8c:	3202      	adds	r2, #2
 800ef8e:	f104 010c 	add.w	r1, r4, #12
 800ef92:	0092      	lsls	r2, r2, #2
 800ef94:	300c      	adds	r0, #12
 800ef96:	f7ff f8c2 	bl	800e11e <memcpy>
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	4638      	mov	r0, r7
 800ef9e:	f7ff ffa5 	bl	800eeec <_Bfree>
 800efa2:	4644      	mov	r4, r8
 800efa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800efa8:	3501      	adds	r5, #1
 800efaa:	615e      	str	r6, [r3, #20]
 800efac:	6125      	str	r5, [r4, #16]
 800efae:	4620      	mov	r0, r4
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	0802a158 	.word	0x0802a158
 800efb8:	0802a169 	.word	0x0802a169

0800efbc <__hi0bits>:
 800efbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800efc0:	4603      	mov	r3, r0
 800efc2:	bf36      	itet	cc
 800efc4:	0403      	lslcc	r3, r0, #16
 800efc6:	2000      	movcs	r0, #0
 800efc8:	2010      	movcc	r0, #16
 800efca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800efce:	bf3c      	itt	cc
 800efd0:	021b      	lslcc	r3, r3, #8
 800efd2:	3008      	addcc	r0, #8
 800efd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800efd8:	bf3c      	itt	cc
 800efda:	011b      	lslcc	r3, r3, #4
 800efdc:	3004      	addcc	r0, #4
 800efde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efe2:	bf3c      	itt	cc
 800efe4:	009b      	lslcc	r3, r3, #2
 800efe6:	3002      	addcc	r0, #2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	db05      	blt.n	800eff8 <__hi0bits+0x3c>
 800efec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eff0:	f100 0001 	add.w	r0, r0, #1
 800eff4:	bf08      	it	eq
 800eff6:	2020      	moveq	r0, #32
 800eff8:	4770      	bx	lr

0800effa <__lo0bits>:
 800effa:	6803      	ldr	r3, [r0, #0]
 800effc:	4602      	mov	r2, r0
 800effe:	f013 0007 	ands.w	r0, r3, #7
 800f002:	d00b      	beq.n	800f01c <__lo0bits+0x22>
 800f004:	07d9      	lsls	r1, r3, #31
 800f006:	d421      	bmi.n	800f04c <__lo0bits+0x52>
 800f008:	0798      	lsls	r0, r3, #30
 800f00a:	bf49      	itett	mi
 800f00c:	085b      	lsrmi	r3, r3, #1
 800f00e:	089b      	lsrpl	r3, r3, #2
 800f010:	2001      	movmi	r0, #1
 800f012:	6013      	strmi	r3, [r2, #0]
 800f014:	bf5c      	itt	pl
 800f016:	6013      	strpl	r3, [r2, #0]
 800f018:	2002      	movpl	r0, #2
 800f01a:	4770      	bx	lr
 800f01c:	b299      	uxth	r1, r3
 800f01e:	b909      	cbnz	r1, 800f024 <__lo0bits+0x2a>
 800f020:	0c1b      	lsrs	r3, r3, #16
 800f022:	2010      	movs	r0, #16
 800f024:	b2d9      	uxtb	r1, r3
 800f026:	b909      	cbnz	r1, 800f02c <__lo0bits+0x32>
 800f028:	3008      	adds	r0, #8
 800f02a:	0a1b      	lsrs	r3, r3, #8
 800f02c:	0719      	lsls	r1, r3, #28
 800f02e:	bf04      	itt	eq
 800f030:	091b      	lsreq	r3, r3, #4
 800f032:	3004      	addeq	r0, #4
 800f034:	0799      	lsls	r1, r3, #30
 800f036:	bf04      	itt	eq
 800f038:	089b      	lsreq	r3, r3, #2
 800f03a:	3002      	addeq	r0, #2
 800f03c:	07d9      	lsls	r1, r3, #31
 800f03e:	d403      	bmi.n	800f048 <__lo0bits+0x4e>
 800f040:	085b      	lsrs	r3, r3, #1
 800f042:	f100 0001 	add.w	r0, r0, #1
 800f046:	d003      	beq.n	800f050 <__lo0bits+0x56>
 800f048:	6013      	str	r3, [r2, #0]
 800f04a:	4770      	bx	lr
 800f04c:	2000      	movs	r0, #0
 800f04e:	4770      	bx	lr
 800f050:	2020      	movs	r0, #32
 800f052:	4770      	bx	lr

0800f054 <__i2b>:
 800f054:	b510      	push	{r4, lr}
 800f056:	460c      	mov	r4, r1
 800f058:	2101      	movs	r1, #1
 800f05a:	f7ff ff07 	bl	800ee6c <_Balloc>
 800f05e:	4602      	mov	r2, r0
 800f060:	b928      	cbnz	r0, 800f06e <__i2b+0x1a>
 800f062:	4b05      	ldr	r3, [pc, #20]	@ (800f078 <__i2b+0x24>)
 800f064:	4805      	ldr	r0, [pc, #20]	@ (800f07c <__i2b+0x28>)
 800f066:	f240 1145 	movw	r1, #325	@ 0x145
 800f06a:	f000 fe6d 	bl	800fd48 <__assert_func>
 800f06e:	2301      	movs	r3, #1
 800f070:	6144      	str	r4, [r0, #20]
 800f072:	6103      	str	r3, [r0, #16]
 800f074:	bd10      	pop	{r4, pc}
 800f076:	bf00      	nop
 800f078:	0802a158 	.word	0x0802a158
 800f07c:	0802a169 	.word	0x0802a169

0800f080 <__multiply>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	4614      	mov	r4, r2
 800f086:	690a      	ldr	r2, [r1, #16]
 800f088:	6923      	ldr	r3, [r4, #16]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	bfa8      	it	ge
 800f08e:	4623      	movge	r3, r4
 800f090:	460f      	mov	r7, r1
 800f092:	bfa4      	itt	ge
 800f094:	460c      	movge	r4, r1
 800f096:	461f      	movge	r7, r3
 800f098:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f09c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f0a0:	68a3      	ldr	r3, [r4, #8]
 800f0a2:	6861      	ldr	r1, [r4, #4]
 800f0a4:	eb0a 0609 	add.w	r6, sl, r9
 800f0a8:	42b3      	cmp	r3, r6
 800f0aa:	b085      	sub	sp, #20
 800f0ac:	bfb8      	it	lt
 800f0ae:	3101      	addlt	r1, #1
 800f0b0:	f7ff fedc 	bl	800ee6c <_Balloc>
 800f0b4:	b930      	cbnz	r0, 800f0c4 <__multiply+0x44>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	4b44      	ldr	r3, [pc, #272]	@ (800f1cc <__multiply+0x14c>)
 800f0ba:	4845      	ldr	r0, [pc, #276]	@ (800f1d0 <__multiply+0x150>)
 800f0bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f0c0:	f000 fe42 	bl	800fd48 <__assert_func>
 800f0c4:	f100 0514 	add.w	r5, r0, #20
 800f0c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0cc:	462b      	mov	r3, r5
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	4543      	cmp	r3, r8
 800f0d2:	d321      	bcc.n	800f118 <__multiply+0x98>
 800f0d4:	f107 0114 	add.w	r1, r7, #20
 800f0d8:	f104 0214 	add.w	r2, r4, #20
 800f0dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f0e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f0e4:	9302      	str	r3, [sp, #8]
 800f0e6:	1b13      	subs	r3, r2, r4
 800f0e8:	3b15      	subs	r3, #21
 800f0ea:	f023 0303 	bic.w	r3, r3, #3
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	f104 0715 	add.w	r7, r4, #21
 800f0f4:	42ba      	cmp	r2, r7
 800f0f6:	bf38      	it	cc
 800f0f8:	2304      	movcc	r3, #4
 800f0fa:	9301      	str	r3, [sp, #4]
 800f0fc:	9b02      	ldr	r3, [sp, #8]
 800f0fe:	9103      	str	r1, [sp, #12]
 800f100:	428b      	cmp	r3, r1
 800f102:	d80c      	bhi.n	800f11e <__multiply+0x9e>
 800f104:	2e00      	cmp	r6, #0
 800f106:	dd03      	ble.n	800f110 <__multiply+0x90>
 800f108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d05b      	beq.n	800f1c8 <__multiply+0x148>
 800f110:	6106      	str	r6, [r0, #16]
 800f112:	b005      	add	sp, #20
 800f114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f118:	f843 2b04 	str.w	r2, [r3], #4
 800f11c:	e7d8      	b.n	800f0d0 <__multiply+0x50>
 800f11e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f122:	f1ba 0f00 	cmp.w	sl, #0
 800f126:	d024      	beq.n	800f172 <__multiply+0xf2>
 800f128:	f104 0e14 	add.w	lr, r4, #20
 800f12c:	46a9      	mov	r9, r5
 800f12e:	f04f 0c00 	mov.w	ip, #0
 800f132:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f136:	f8d9 3000 	ldr.w	r3, [r9]
 800f13a:	fa1f fb87 	uxth.w	fp, r7
 800f13e:	b29b      	uxth	r3, r3
 800f140:	fb0a 330b 	mla	r3, sl, fp, r3
 800f144:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f148:	f8d9 7000 	ldr.w	r7, [r9]
 800f14c:	4463      	add	r3, ip
 800f14e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f152:	fb0a c70b 	mla	r7, sl, fp, ip
 800f156:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f160:	4572      	cmp	r2, lr
 800f162:	f849 3b04 	str.w	r3, [r9], #4
 800f166:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f16a:	d8e2      	bhi.n	800f132 <__multiply+0xb2>
 800f16c:	9b01      	ldr	r3, [sp, #4]
 800f16e:	f845 c003 	str.w	ip, [r5, r3]
 800f172:	9b03      	ldr	r3, [sp, #12]
 800f174:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f178:	3104      	adds	r1, #4
 800f17a:	f1b9 0f00 	cmp.w	r9, #0
 800f17e:	d021      	beq.n	800f1c4 <__multiply+0x144>
 800f180:	682b      	ldr	r3, [r5, #0]
 800f182:	f104 0c14 	add.w	ip, r4, #20
 800f186:	46ae      	mov	lr, r5
 800f188:	f04f 0a00 	mov.w	sl, #0
 800f18c:	f8bc b000 	ldrh.w	fp, [ip]
 800f190:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f194:	fb09 770b 	mla	r7, r9, fp, r7
 800f198:	4457      	add	r7, sl
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1a0:	f84e 3b04 	str.w	r3, [lr], #4
 800f1a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1ac:	f8be 3000 	ldrh.w	r3, [lr]
 800f1b0:	fb09 330a 	mla	r3, r9, sl, r3
 800f1b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f1b8:	4562      	cmp	r2, ip
 800f1ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1be:	d8e5      	bhi.n	800f18c <__multiply+0x10c>
 800f1c0:	9f01      	ldr	r7, [sp, #4]
 800f1c2:	51eb      	str	r3, [r5, r7]
 800f1c4:	3504      	adds	r5, #4
 800f1c6:	e799      	b.n	800f0fc <__multiply+0x7c>
 800f1c8:	3e01      	subs	r6, #1
 800f1ca:	e79b      	b.n	800f104 <__multiply+0x84>
 800f1cc:	0802a158 	.word	0x0802a158
 800f1d0:	0802a169 	.word	0x0802a169

0800f1d4 <__pow5mult>:
 800f1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d8:	4615      	mov	r5, r2
 800f1da:	f012 0203 	ands.w	r2, r2, #3
 800f1de:	4607      	mov	r7, r0
 800f1e0:	460e      	mov	r6, r1
 800f1e2:	d007      	beq.n	800f1f4 <__pow5mult+0x20>
 800f1e4:	4c25      	ldr	r4, [pc, #148]	@ (800f27c <__pow5mult+0xa8>)
 800f1e6:	3a01      	subs	r2, #1
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1ee:	f7ff fe9f 	bl	800ef30 <__multadd>
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	10ad      	asrs	r5, r5, #2
 800f1f6:	d03d      	beq.n	800f274 <__pow5mult+0xa0>
 800f1f8:	69fc      	ldr	r4, [r7, #28]
 800f1fa:	b97c      	cbnz	r4, 800f21c <__pow5mult+0x48>
 800f1fc:	2010      	movs	r0, #16
 800f1fe:	f7fd ff99 	bl	800d134 <malloc>
 800f202:	4602      	mov	r2, r0
 800f204:	61f8      	str	r0, [r7, #28]
 800f206:	b928      	cbnz	r0, 800f214 <__pow5mult+0x40>
 800f208:	4b1d      	ldr	r3, [pc, #116]	@ (800f280 <__pow5mult+0xac>)
 800f20a:	481e      	ldr	r0, [pc, #120]	@ (800f284 <__pow5mult+0xb0>)
 800f20c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f210:	f000 fd9a 	bl	800fd48 <__assert_func>
 800f214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f218:	6004      	str	r4, [r0, #0]
 800f21a:	60c4      	str	r4, [r0, #12]
 800f21c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f224:	b94c      	cbnz	r4, 800f23a <__pow5mult+0x66>
 800f226:	f240 2171 	movw	r1, #625	@ 0x271
 800f22a:	4638      	mov	r0, r7
 800f22c:	f7ff ff12 	bl	800f054 <__i2b>
 800f230:	2300      	movs	r3, #0
 800f232:	f8c8 0008 	str.w	r0, [r8, #8]
 800f236:	4604      	mov	r4, r0
 800f238:	6003      	str	r3, [r0, #0]
 800f23a:	f04f 0900 	mov.w	r9, #0
 800f23e:	07eb      	lsls	r3, r5, #31
 800f240:	d50a      	bpl.n	800f258 <__pow5mult+0x84>
 800f242:	4631      	mov	r1, r6
 800f244:	4622      	mov	r2, r4
 800f246:	4638      	mov	r0, r7
 800f248:	f7ff ff1a 	bl	800f080 <__multiply>
 800f24c:	4631      	mov	r1, r6
 800f24e:	4680      	mov	r8, r0
 800f250:	4638      	mov	r0, r7
 800f252:	f7ff fe4b 	bl	800eeec <_Bfree>
 800f256:	4646      	mov	r6, r8
 800f258:	106d      	asrs	r5, r5, #1
 800f25a:	d00b      	beq.n	800f274 <__pow5mult+0xa0>
 800f25c:	6820      	ldr	r0, [r4, #0]
 800f25e:	b938      	cbnz	r0, 800f270 <__pow5mult+0x9c>
 800f260:	4622      	mov	r2, r4
 800f262:	4621      	mov	r1, r4
 800f264:	4638      	mov	r0, r7
 800f266:	f7ff ff0b 	bl	800f080 <__multiply>
 800f26a:	6020      	str	r0, [r4, #0]
 800f26c:	f8c0 9000 	str.w	r9, [r0]
 800f270:	4604      	mov	r4, r0
 800f272:	e7e4      	b.n	800f23e <__pow5mult+0x6a>
 800f274:	4630      	mov	r0, r6
 800f276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f27a:	bf00      	nop
 800f27c:	0802a1c4 	.word	0x0802a1c4
 800f280:	0802a0e9 	.word	0x0802a0e9
 800f284:	0802a169 	.word	0x0802a169

0800f288 <__lshift>:
 800f288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f28c:	460c      	mov	r4, r1
 800f28e:	6849      	ldr	r1, [r1, #4]
 800f290:	6923      	ldr	r3, [r4, #16]
 800f292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f296:	68a3      	ldr	r3, [r4, #8]
 800f298:	4607      	mov	r7, r0
 800f29a:	4691      	mov	r9, r2
 800f29c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2a0:	f108 0601 	add.w	r6, r8, #1
 800f2a4:	42b3      	cmp	r3, r6
 800f2a6:	db0b      	blt.n	800f2c0 <__lshift+0x38>
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f7ff fddf 	bl	800ee6c <_Balloc>
 800f2ae:	4605      	mov	r5, r0
 800f2b0:	b948      	cbnz	r0, 800f2c6 <__lshift+0x3e>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	4b28      	ldr	r3, [pc, #160]	@ (800f358 <__lshift+0xd0>)
 800f2b6:	4829      	ldr	r0, [pc, #164]	@ (800f35c <__lshift+0xd4>)
 800f2b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f2bc:	f000 fd44 	bl	800fd48 <__assert_func>
 800f2c0:	3101      	adds	r1, #1
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	e7ee      	b.n	800f2a4 <__lshift+0x1c>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	f100 0114 	add.w	r1, r0, #20
 800f2cc:	f100 0210 	add.w	r2, r0, #16
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	4553      	cmp	r3, sl
 800f2d4:	db33      	blt.n	800f33e <__lshift+0xb6>
 800f2d6:	6920      	ldr	r0, [r4, #16]
 800f2d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2dc:	f104 0314 	add.w	r3, r4, #20
 800f2e0:	f019 091f 	ands.w	r9, r9, #31
 800f2e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2ec:	d02b      	beq.n	800f346 <__lshift+0xbe>
 800f2ee:	f1c9 0e20 	rsb	lr, r9, #32
 800f2f2:	468a      	mov	sl, r1
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	6818      	ldr	r0, [r3, #0]
 800f2f8:	fa00 f009 	lsl.w	r0, r0, r9
 800f2fc:	4310      	orrs	r0, r2
 800f2fe:	f84a 0b04 	str.w	r0, [sl], #4
 800f302:	f853 2b04 	ldr.w	r2, [r3], #4
 800f306:	459c      	cmp	ip, r3
 800f308:	fa22 f20e 	lsr.w	r2, r2, lr
 800f30c:	d8f3      	bhi.n	800f2f6 <__lshift+0x6e>
 800f30e:	ebac 0304 	sub.w	r3, ip, r4
 800f312:	3b15      	subs	r3, #21
 800f314:	f023 0303 	bic.w	r3, r3, #3
 800f318:	3304      	adds	r3, #4
 800f31a:	f104 0015 	add.w	r0, r4, #21
 800f31e:	4584      	cmp	ip, r0
 800f320:	bf38      	it	cc
 800f322:	2304      	movcc	r3, #4
 800f324:	50ca      	str	r2, [r1, r3]
 800f326:	b10a      	cbz	r2, 800f32c <__lshift+0xa4>
 800f328:	f108 0602 	add.w	r6, r8, #2
 800f32c:	3e01      	subs	r6, #1
 800f32e:	4638      	mov	r0, r7
 800f330:	612e      	str	r6, [r5, #16]
 800f332:	4621      	mov	r1, r4
 800f334:	f7ff fdda 	bl	800eeec <_Bfree>
 800f338:	4628      	mov	r0, r5
 800f33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f342:	3301      	adds	r3, #1
 800f344:	e7c5      	b.n	800f2d2 <__lshift+0x4a>
 800f346:	3904      	subs	r1, #4
 800f348:	f853 2b04 	ldr.w	r2, [r3], #4
 800f34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f350:	459c      	cmp	ip, r3
 800f352:	d8f9      	bhi.n	800f348 <__lshift+0xc0>
 800f354:	e7ea      	b.n	800f32c <__lshift+0xa4>
 800f356:	bf00      	nop
 800f358:	0802a158 	.word	0x0802a158
 800f35c:	0802a169 	.word	0x0802a169

0800f360 <__mcmp>:
 800f360:	690a      	ldr	r2, [r1, #16]
 800f362:	4603      	mov	r3, r0
 800f364:	6900      	ldr	r0, [r0, #16]
 800f366:	1a80      	subs	r0, r0, r2
 800f368:	b530      	push	{r4, r5, lr}
 800f36a:	d10e      	bne.n	800f38a <__mcmp+0x2a>
 800f36c:	3314      	adds	r3, #20
 800f36e:	3114      	adds	r1, #20
 800f370:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f37c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f380:	4295      	cmp	r5, r2
 800f382:	d003      	beq.n	800f38c <__mcmp+0x2c>
 800f384:	d205      	bcs.n	800f392 <__mcmp+0x32>
 800f386:	f04f 30ff 	mov.w	r0, #4294967295
 800f38a:	bd30      	pop	{r4, r5, pc}
 800f38c:	42a3      	cmp	r3, r4
 800f38e:	d3f3      	bcc.n	800f378 <__mcmp+0x18>
 800f390:	e7fb      	b.n	800f38a <__mcmp+0x2a>
 800f392:	2001      	movs	r0, #1
 800f394:	e7f9      	b.n	800f38a <__mcmp+0x2a>
	...

0800f398 <__mdiff>:
 800f398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	4689      	mov	r9, r1
 800f39e:	4606      	mov	r6, r0
 800f3a0:	4611      	mov	r1, r2
 800f3a2:	4648      	mov	r0, r9
 800f3a4:	4614      	mov	r4, r2
 800f3a6:	f7ff ffdb 	bl	800f360 <__mcmp>
 800f3aa:	1e05      	subs	r5, r0, #0
 800f3ac:	d112      	bne.n	800f3d4 <__mdiff+0x3c>
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f7ff fd5b 	bl	800ee6c <_Balloc>
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	b928      	cbnz	r0, 800f3c6 <__mdiff+0x2e>
 800f3ba:	4b3f      	ldr	r3, [pc, #252]	@ (800f4b8 <__mdiff+0x120>)
 800f3bc:	f240 2137 	movw	r1, #567	@ 0x237
 800f3c0:	483e      	ldr	r0, [pc, #248]	@ (800f4bc <__mdiff+0x124>)
 800f3c2:	f000 fcc1 	bl	800fd48 <__assert_func>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	b003      	add	sp, #12
 800f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d4:	bfbc      	itt	lt
 800f3d6:	464b      	movlt	r3, r9
 800f3d8:	46a1      	movlt	r9, r4
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f3e0:	bfba      	itte	lt
 800f3e2:	461c      	movlt	r4, r3
 800f3e4:	2501      	movlt	r5, #1
 800f3e6:	2500      	movge	r5, #0
 800f3e8:	f7ff fd40 	bl	800ee6c <_Balloc>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	b918      	cbnz	r0, 800f3f8 <__mdiff+0x60>
 800f3f0:	4b31      	ldr	r3, [pc, #196]	@ (800f4b8 <__mdiff+0x120>)
 800f3f2:	f240 2145 	movw	r1, #581	@ 0x245
 800f3f6:	e7e3      	b.n	800f3c0 <__mdiff+0x28>
 800f3f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f3fc:	6926      	ldr	r6, [r4, #16]
 800f3fe:	60c5      	str	r5, [r0, #12]
 800f400:	f109 0310 	add.w	r3, r9, #16
 800f404:	f109 0514 	add.w	r5, r9, #20
 800f408:	f104 0e14 	add.w	lr, r4, #20
 800f40c:	f100 0b14 	add.w	fp, r0, #20
 800f410:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f414:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f418:	9301      	str	r3, [sp, #4]
 800f41a:	46d9      	mov	r9, fp
 800f41c:	f04f 0c00 	mov.w	ip, #0
 800f420:	9b01      	ldr	r3, [sp, #4]
 800f422:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f426:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f42a:	9301      	str	r3, [sp, #4]
 800f42c:	fa1f f38a 	uxth.w	r3, sl
 800f430:	4619      	mov	r1, r3
 800f432:	b283      	uxth	r3, r0
 800f434:	1acb      	subs	r3, r1, r3
 800f436:	0c00      	lsrs	r0, r0, #16
 800f438:	4463      	add	r3, ip
 800f43a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f43e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f442:	b29b      	uxth	r3, r3
 800f444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f448:	4576      	cmp	r6, lr
 800f44a:	f849 3b04 	str.w	r3, [r9], #4
 800f44e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f452:	d8e5      	bhi.n	800f420 <__mdiff+0x88>
 800f454:	1b33      	subs	r3, r6, r4
 800f456:	3b15      	subs	r3, #21
 800f458:	f023 0303 	bic.w	r3, r3, #3
 800f45c:	3415      	adds	r4, #21
 800f45e:	3304      	adds	r3, #4
 800f460:	42a6      	cmp	r6, r4
 800f462:	bf38      	it	cc
 800f464:	2304      	movcc	r3, #4
 800f466:	441d      	add	r5, r3
 800f468:	445b      	add	r3, fp
 800f46a:	461e      	mov	r6, r3
 800f46c:	462c      	mov	r4, r5
 800f46e:	4544      	cmp	r4, r8
 800f470:	d30e      	bcc.n	800f490 <__mdiff+0xf8>
 800f472:	f108 0103 	add.w	r1, r8, #3
 800f476:	1b49      	subs	r1, r1, r5
 800f478:	f021 0103 	bic.w	r1, r1, #3
 800f47c:	3d03      	subs	r5, #3
 800f47e:	45a8      	cmp	r8, r5
 800f480:	bf38      	it	cc
 800f482:	2100      	movcc	r1, #0
 800f484:	440b      	add	r3, r1
 800f486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f48a:	b191      	cbz	r1, 800f4b2 <__mdiff+0x11a>
 800f48c:	6117      	str	r7, [r2, #16]
 800f48e:	e79d      	b.n	800f3cc <__mdiff+0x34>
 800f490:	f854 1b04 	ldr.w	r1, [r4], #4
 800f494:	46e6      	mov	lr, ip
 800f496:	0c08      	lsrs	r0, r1, #16
 800f498:	fa1c fc81 	uxtah	ip, ip, r1
 800f49c:	4471      	add	r1, lr
 800f49e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f4a2:	b289      	uxth	r1, r1
 800f4a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f4a8:	f846 1b04 	str.w	r1, [r6], #4
 800f4ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f4b0:	e7dd      	b.n	800f46e <__mdiff+0xd6>
 800f4b2:	3f01      	subs	r7, #1
 800f4b4:	e7e7      	b.n	800f486 <__mdiff+0xee>
 800f4b6:	bf00      	nop
 800f4b8:	0802a158 	.word	0x0802a158
 800f4bc:	0802a169 	.word	0x0802a169

0800f4c0 <__d2b>:
 800f4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4c4:	460f      	mov	r7, r1
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	ec59 8b10 	vmov	r8, r9, d0
 800f4cc:	4616      	mov	r6, r2
 800f4ce:	f7ff fccd 	bl	800ee6c <_Balloc>
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	b930      	cbnz	r0, 800f4e4 <__d2b+0x24>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	4b23      	ldr	r3, [pc, #140]	@ (800f568 <__d2b+0xa8>)
 800f4da:	4824      	ldr	r0, [pc, #144]	@ (800f56c <__d2b+0xac>)
 800f4dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800f4e0:	f000 fc32 	bl	800fd48 <__assert_func>
 800f4e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f4e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4ec:	b10d      	cbz	r5, 800f4f2 <__d2b+0x32>
 800f4ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4f2:	9301      	str	r3, [sp, #4]
 800f4f4:	f1b8 0300 	subs.w	r3, r8, #0
 800f4f8:	d023      	beq.n	800f542 <__d2b+0x82>
 800f4fa:	4668      	mov	r0, sp
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	f7ff fd7c 	bl	800effa <__lo0bits>
 800f502:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f506:	b1d0      	cbz	r0, 800f53e <__d2b+0x7e>
 800f508:	f1c0 0320 	rsb	r3, r0, #32
 800f50c:	fa02 f303 	lsl.w	r3, r2, r3
 800f510:	430b      	orrs	r3, r1
 800f512:	40c2      	lsrs	r2, r0
 800f514:	6163      	str	r3, [r4, #20]
 800f516:	9201      	str	r2, [sp, #4]
 800f518:	9b01      	ldr	r3, [sp, #4]
 800f51a:	61a3      	str	r3, [r4, #24]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	bf0c      	ite	eq
 800f520:	2201      	moveq	r2, #1
 800f522:	2202      	movne	r2, #2
 800f524:	6122      	str	r2, [r4, #16]
 800f526:	b1a5      	cbz	r5, 800f552 <__d2b+0x92>
 800f528:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f52c:	4405      	add	r5, r0
 800f52e:	603d      	str	r5, [r7, #0]
 800f530:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f534:	6030      	str	r0, [r6, #0]
 800f536:	4620      	mov	r0, r4
 800f538:	b003      	add	sp, #12
 800f53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f53e:	6161      	str	r1, [r4, #20]
 800f540:	e7ea      	b.n	800f518 <__d2b+0x58>
 800f542:	a801      	add	r0, sp, #4
 800f544:	f7ff fd59 	bl	800effa <__lo0bits>
 800f548:	9b01      	ldr	r3, [sp, #4]
 800f54a:	6163      	str	r3, [r4, #20]
 800f54c:	3020      	adds	r0, #32
 800f54e:	2201      	movs	r2, #1
 800f550:	e7e8      	b.n	800f524 <__d2b+0x64>
 800f552:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f556:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f55a:	6038      	str	r0, [r7, #0]
 800f55c:	6918      	ldr	r0, [r3, #16]
 800f55e:	f7ff fd2d 	bl	800efbc <__hi0bits>
 800f562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f566:	e7e5      	b.n	800f534 <__d2b+0x74>
 800f568:	0802a158 	.word	0x0802a158
 800f56c:	0802a169 	.word	0x0802a169

0800f570 <_malloc_usable_size_r>:
 800f570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f574:	1f18      	subs	r0, r3, #4
 800f576:	2b00      	cmp	r3, #0
 800f578:	bfbc      	itt	lt
 800f57a:	580b      	ldrlt	r3, [r1, r0]
 800f57c:	18c0      	addlt	r0, r0, r3
 800f57e:	4770      	bx	lr

0800f580 <__ssputs_r>:
 800f580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f584:	688e      	ldr	r6, [r1, #8]
 800f586:	461f      	mov	r7, r3
 800f588:	42be      	cmp	r6, r7
 800f58a:	680b      	ldr	r3, [r1, #0]
 800f58c:	4682      	mov	sl, r0
 800f58e:	460c      	mov	r4, r1
 800f590:	4690      	mov	r8, r2
 800f592:	d82d      	bhi.n	800f5f0 <__ssputs_r+0x70>
 800f594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f598:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f59c:	d026      	beq.n	800f5ec <__ssputs_r+0x6c>
 800f59e:	6965      	ldr	r5, [r4, #20]
 800f5a0:	6909      	ldr	r1, [r1, #16]
 800f5a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5a6:	eba3 0901 	sub.w	r9, r3, r1
 800f5aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5ae:	1c7b      	adds	r3, r7, #1
 800f5b0:	444b      	add	r3, r9
 800f5b2:	106d      	asrs	r5, r5, #1
 800f5b4:	429d      	cmp	r5, r3
 800f5b6:	bf38      	it	cc
 800f5b8:	461d      	movcc	r5, r3
 800f5ba:	0553      	lsls	r3, r2, #21
 800f5bc:	d527      	bpl.n	800f60e <__ssputs_r+0x8e>
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7fd fde2 	bl	800d188 <_malloc_r>
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	b360      	cbz	r0, 800f622 <__ssputs_r+0xa2>
 800f5c8:	6921      	ldr	r1, [r4, #16]
 800f5ca:	464a      	mov	r2, r9
 800f5cc:	f7fe fda7 	bl	800e11e <memcpy>
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5da:	81a3      	strh	r3, [r4, #12]
 800f5dc:	6126      	str	r6, [r4, #16]
 800f5de:	6165      	str	r5, [r4, #20]
 800f5e0:	444e      	add	r6, r9
 800f5e2:	eba5 0509 	sub.w	r5, r5, r9
 800f5e6:	6026      	str	r6, [r4, #0]
 800f5e8:	60a5      	str	r5, [r4, #8]
 800f5ea:	463e      	mov	r6, r7
 800f5ec:	42be      	cmp	r6, r7
 800f5ee:	d900      	bls.n	800f5f2 <__ssputs_r+0x72>
 800f5f0:	463e      	mov	r6, r7
 800f5f2:	6820      	ldr	r0, [r4, #0]
 800f5f4:	4632      	mov	r2, r6
 800f5f6:	4641      	mov	r1, r8
 800f5f8:	f000 fb6a 	bl	800fcd0 <memmove>
 800f5fc:	68a3      	ldr	r3, [r4, #8]
 800f5fe:	1b9b      	subs	r3, r3, r6
 800f600:	60a3      	str	r3, [r4, #8]
 800f602:	6823      	ldr	r3, [r4, #0]
 800f604:	4433      	add	r3, r6
 800f606:	6023      	str	r3, [r4, #0]
 800f608:	2000      	movs	r0, #0
 800f60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60e:	462a      	mov	r2, r5
 800f610:	f7fd fe46 	bl	800d2a0 <_realloc_r>
 800f614:	4606      	mov	r6, r0
 800f616:	2800      	cmp	r0, #0
 800f618:	d1e0      	bne.n	800f5dc <__ssputs_r+0x5c>
 800f61a:	6921      	ldr	r1, [r4, #16]
 800f61c:	4650      	mov	r0, sl
 800f61e:	f7ff fbdb 	bl	800edd8 <_free_r>
 800f622:	230c      	movs	r3, #12
 800f624:	f8ca 3000 	str.w	r3, [sl]
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	f04f 30ff 	mov.w	r0, #4294967295
 800f634:	e7e9      	b.n	800f60a <__ssputs_r+0x8a>
	...

0800f638 <_svfiprintf_r>:
 800f638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63c:	4698      	mov	r8, r3
 800f63e:	898b      	ldrh	r3, [r1, #12]
 800f640:	061b      	lsls	r3, r3, #24
 800f642:	b09d      	sub	sp, #116	@ 0x74
 800f644:	4607      	mov	r7, r0
 800f646:	460d      	mov	r5, r1
 800f648:	4614      	mov	r4, r2
 800f64a:	d510      	bpl.n	800f66e <_svfiprintf_r+0x36>
 800f64c:	690b      	ldr	r3, [r1, #16]
 800f64e:	b973      	cbnz	r3, 800f66e <_svfiprintf_r+0x36>
 800f650:	2140      	movs	r1, #64	@ 0x40
 800f652:	f7fd fd99 	bl	800d188 <_malloc_r>
 800f656:	6028      	str	r0, [r5, #0]
 800f658:	6128      	str	r0, [r5, #16]
 800f65a:	b930      	cbnz	r0, 800f66a <_svfiprintf_r+0x32>
 800f65c:	230c      	movs	r3, #12
 800f65e:	603b      	str	r3, [r7, #0]
 800f660:	f04f 30ff 	mov.w	r0, #4294967295
 800f664:	b01d      	add	sp, #116	@ 0x74
 800f666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66a:	2340      	movs	r3, #64	@ 0x40
 800f66c:	616b      	str	r3, [r5, #20]
 800f66e:	2300      	movs	r3, #0
 800f670:	9309      	str	r3, [sp, #36]	@ 0x24
 800f672:	2320      	movs	r3, #32
 800f674:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f678:	f8cd 800c 	str.w	r8, [sp, #12]
 800f67c:	2330      	movs	r3, #48	@ 0x30
 800f67e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f81c <_svfiprintf_r+0x1e4>
 800f682:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f686:	f04f 0901 	mov.w	r9, #1
 800f68a:	4623      	mov	r3, r4
 800f68c:	469a      	mov	sl, r3
 800f68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f692:	b10a      	cbz	r2, 800f698 <_svfiprintf_r+0x60>
 800f694:	2a25      	cmp	r2, #37	@ 0x25
 800f696:	d1f9      	bne.n	800f68c <_svfiprintf_r+0x54>
 800f698:	ebba 0b04 	subs.w	fp, sl, r4
 800f69c:	d00b      	beq.n	800f6b6 <_svfiprintf_r+0x7e>
 800f69e:	465b      	mov	r3, fp
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4629      	mov	r1, r5
 800f6a4:	4638      	mov	r0, r7
 800f6a6:	f7ff ff6b 	bl	800f580 <__ssputs_r>
 800f6aa:	3001      	adds	r0, #1
 800f6ac:	f000 80a7 	beq.w	800f7fe <_svfiprintf_r+0x1c6>
 800f6b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6b2:	445a      	add	r2, fp
 800f6b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f000 809f 	beq.w	800f7fe <_svfiprintf_r+0x1c6>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ca:	f10a 0a01 	add.w	sl, sl, #1
 800f6ce:	9304      	str	r3, [sp, #16]
 800f6d0:	9307      	str	r3, [sp, #28]
 800f6d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6d8:	4654      	mov	r4, sl
 800f6da:	2205      	movs	r2, #5
 800f6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6e0:	484e      	ldr	r0, [pc, #312]	@ (800f81c <_svfiprintf_r+0x1e4>)
 800f6e2:	f7f0 fd7d 	bl	80001e0 <memchr>
 800f6e6:	9a04      	ldr	r2, [sp, #16]
 800f6e8:	b9d8      	cbnz	r0, 800f722 <_svfiprintf_r+0xea>
 800f6ea:	06d0      	lsls	r0, r2, #27
 800f6ec:	bf44      	itt	mi
 800f6ee:	2320      	movmi	r3, #32
 800f6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6f4:	0711      	lsls	r1, r2, #28
 800f6f6:	bf44      	itt	mi
 800f6f8:	232b      	movmi	r3, #43	@ 0x2b
 800f6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800f702:	2b2a      	cmp	r3, #42	@ 0x2a
 800f704:	d015      	beq.n	800f732 <_svfiprintf_r+0xfa>
 800f706:	9a07      	ldr	r2, [sp, #28]
 800f708:	4654      	mov	r4, sl
 800f70a:	2000      	movs	r0, #0
 800f70c:	f04f 0c0a 	mov.w	ip, #10
 800f710:	4621      	mov	r1, r4
 800f712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f716:	3b30      	subs	r3, #48	@ 0x30
 800f718:	2b09      	cmp	r3, #9
 800f71a:	d94b      	bls.n	800f7b4 <_svfiprintf_r+0x17c>
 800f71c:	b1b0      	cbz	r0, 800f74c <_svfiprintf_r+0x114>
 800f71e:	9207      	str	r2, [sp, #28]
 800f720:	e014      	b.n	800f74c <_svfiprintf_r+0x114>
 800f722:	eba0 0308 	sub.w	r3, r0, r8
 800f726:	fa09 f303 	lsl.w	r3, r9, r3
 800f72a:	4313      	orrs	r3, r2
 800f72c:	9304      	str	r3, [sp, #16]
 800f72e:	46a2      	mov	sl, r4
 800f730:	e7d2      	b.n	800f6d8 <_svfiprintf_r+0xa0>
 800f732:	9b03      	ldr	r3, [sp, #12]
 800f734:	1d19      	adds	r1, r3, #4
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	9103      	str	r1, [sp, #12]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	bfbb      	ittet	lt
 800f73e:	425b      	neglt	r3, r3
 800f740:	f042 0202 	orrlt.w	r2, r2, #2
 800f744:	9307      	strge	r3, [sp, #28]
 800f746:	9307      	strlt	r3, [sp, #28]
 800f748:	bfb8      	it	lt
 800f74a:	9204      	strlt	r2, [sp, #16]
 800f74c:	7823      	ldrb	r3, [r4, #0]
 800f74e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f750:	d10a      	bne.n	800f768 <_svfiprintf_r+0x130>
 800f752:	7863      	ldrb	r3, [r4, #1]
 800f754:	2b2a      	cmp	r3, #42	@ 0x2a
 800f756:	d132      	bne.n	800f7be <_svfiprintf_r+0x186>
 800f758:	9b03      	ldr	r3, [sp, #12]
 800f75a:	1d1a      	adds	r2, r3, #4
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	9203      	str	r2, [sp, #12]
 800f760:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f764:	3402      	adds	r4, #2
 800f766:	9305      	str	r3, [sp, #20]
 800f768:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f82c <_svfiprintf_r+0x1f4>
 800f76c:	7821      	ldrb	r1, [r4, #0]
 800f76e:	2203      	movs	r2, #3
 800f770:	4650      	mov	r0, sl
 800f772:	f7f0 fd35 	bl	80001e0 <memchr>
 800f776:	b138      	cbz	r0, 800f788 <_svfiprintf_r+0x150>
 800f778:	9b04      	ldr	r3, [sp, #16]
 800f77a:	eba0 000a 	sub.w	r0, r0, sl
 800f77e:	2240      	movs	r2, #64	@ 0x40
 800f780:	4082      	lsls	r2, r0
 800f782:	4313      	orrs	r3, r2
 800f784:	3401      	adds	r4, #1
 800f786:	9304      	str	r3, [sp, #16]
 800f788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f78c:	4824      	ldr	r0, [pc, #144]	@ (800f820 <_svfiprintf_r+0x1e8>)
 800f78e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f792:	2206      	movs	r2, #6
 800f794:	f7f0 fd24 	bl	80001e0 <memchr>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d036      	beq.n	800f80a <_svfiprintf_r+0x1d2>
 800f79c:	4b21      	ldr	r3, [pc, #132]	@ (800f824 <_svfiprintf_r+0x1ec>)
 800f79e:	bb1b      	cbnz	r3, 800f7e8 <_svfiprintf_r+0x1b0>
 800f7a0:	9b03      	ldr	r3, [sp, #12]
 800f7a2:	3307      	adds	r3, #7
 800f7a4:	f023 0307 	bic.w	r3, r3, #7
 800f7a8:	3308      	adds	r3, #8
 800f7aa:	9303      	str	r3, [sp, #12]
 800f7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ae:	4433      	add	r3, r6
 800f7b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b2:	e76a      	b.n	800f68a <_svfiprintf_r+0x52>
 800f7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	2001      	movs	r0, #1
 800f7bc:	e7a8      	b.n	800f710 <_svfiprintf_r+0xd8>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	3401      	adds	r4, #1
 800f7c2:	9305      	str	r3, [sp, #20]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	f04f 0c0a 	mov.w	ip, #10
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7d0:	3a30      	subs	r2, #48	@ 0x30
 800f7d2:	2a09      	cmp	r2, #9
 800f7d4:	d903      	bls.n	800f7de <_svfiprintf_r+0x1a6>
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d0c6      	beq.n	800f768 <_svfiprintf_r+0x130>
 800f7da:	9105      	str	r1, [sp, #20]
 800f7dc:	e7c4      	b.n	800f768 <_svfiprintf_r+0x130>
 800f7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e7f0      	b.n	800f7ca <_svfiprintf_r+0x192>
 800f7e8:	ab03      	add	r3, sp, #12
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	462a      	mov	r2, r5
 800f7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f828 <_svfiprintf_r+0x1f0>)
 800f7f0:	a904      	add	r1, sp, #16
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	f7fd fe22 	bl	800d43c <_printf_float>
 800f7f8:	1c42      	adds	r2, r0, #1
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	d1d6      	bne.n	800f7ac <_svfiprintf_r+0x174>
 800f7fe:	89ab      	ldrh	r3, [r5, #12]
 800f800:	065b      	lsls	r3, r3, #25
 800f802:	f53f af2d 	bmi.w	800f660 <_svfiprintf_r+0x28>
 800f806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f808:	e72c      	b.n	800f664 <_svfiprintf_r+0x2c>
 800f80a:	ab03      	add	r3, sp, #12
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	462a      	mov	r2, r5
 800f810:	4b05      	ldr	r3, [pc, #20]	@ (800f828 <_svfiprintf_r+0x1f0>)
 800f812:	a904      	add	r1, sp, #16
 800f814:	4638      	mov	r0, r7
 800f816:	f7fe f8a9 	bl	800d96c <_printf_i>
 800f81a:	e7ed      	b.n	800f7f8 <_svfiprintf_r+0x1c0>
 800f81c:	0802a2c0 	.word	0x0802a2c0
 800f820:	0802a2ca 	.word	0x0802a2ca
 800f824:	0800d43d 	.word	0x0800d43d
 800f828:	0800f581 	.word	0x0800f581
 800f82c:	0802a2c6 	.word	0x0802a2c6

0800f830 <__sfputc_r>:
 800f830:	6893      	ldr	r3, [r2, #8]
 800f832:	3b01      	subs	r3, #1
 800f834:	2b00      	cmp	r3, #0
 800f836:	b410      	push	{r4}
 800f838:	6093      	str	r3, [r2, #8]
 800f83a:	da08      	bge.n	800f84e <__sfputc_r+0x1e>
 800f83c:	6994      	ldr	r4, [r2, #24]
 800f83e:	42a3      	cmp	r3, r4
 800f840:	db01      	blt.n	800f846 <__sfputc_r+0x16>
 800f842:	290a      	cmp	r1, #10
 800f844:	d103      	bne.n	800f84e <__sfputc_r+0x1e>
 800f846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f84a:	f7fe bb44 	b.w	800ded6 <__swbuf_r>
 800f84e:	6813      	ldr	r3, [r2, #0]
 800f850:	1c58      	adds	r0, r3, #1
 800f852:	6010      	str	r0, [r2, #0]
 800f854:	7019      	strb	r1, [r3, #0]
 800f856:	4608      	mov	r0, r1
 800f858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f85c:	4770      	bx	lr

0800f85e <__sfputs_r>:
 800f85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f860:	4606      	mov	r6, r0
 800f862:	460f      	mov	r7, r1
 800f864:	4614      	mov	r4, r2
 800f866:	18d5      	adds	r5, r2, r3
 800f868:	42ac      	cmp	r4, r5
 800f86a:	d101      	bne.n	800f870 <__sfputs_r+0x12>
 800f86c:	2000      	movs	r0, #0
 800f86e:	e007      	b.n	800f880 <__sfputs_r+0x22>
 800f870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f874:	463a      	mov	r2, r7
 800f876:	4630      	mov	r0, r6
 800f878:	f7ff ffda 	bl	800f830 <__sfputc_r>
 800f87c:	1c43      	adds	r3, r0, #1
 800f87e:	d1f3      	bne.n	800f868 <__sfputs_r+0xa>
 800f880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f884 <_vfiprintf_r>:
 800f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f888:	460d      	mov	r5, r1
 800f88a:	b09d      	sub	sp, #116	@ 0x74
 800f88c:	4614      	mov	r4, r2
 800f88e:	4698      	mov	r8, r3
 800f890:	4606      	mov	r6, r0
 800f892:	b118      	cbz	r0, 800f89c <_vfiprintf_r+0x18>
 800f894:	6a03      	ldr	r3, [r0, #32]
 800f896:	b90b      	cbnz	r3, 800f89c <_vfiprintf_r+0x18>
 800f898:	f7fe fa14 	bl	800dcc4 <__sinit>
 800f89c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f89e:	07d9      	lsls	r1, r3, #31
 800f8a0:	d405      	bmi.n	800f8ae <_vfiprintf_r+0x2a>
 800f8a2:	89ab      	ldrh	r3, [r5, #12]
 800f8a4:	059a      	lsls	r2, r3, #22
 800f8a6:	d402      	bmi.n	800f8ae <_vfiprintf_r+0x2a>
 800f8a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8aa:	f7fe fc36 	bl	800e11a <__retarget_lock_acquire_recursive>
 800f8ae:	89ab      	ldrh	r3, [r5, #12]
 800f8b0:	071b      	lsls	r3, r3, #28
 800f8b2:	d501      	bpl.n	800f8b8 <_vfiprintf_r+0x34>
 800f8b4:	692b      	ldr	r3, [r5, #16]
 800f8b6:	b99b      	cbnz	r3, 800f8e0 <_vfiprintf_r+0x5c>
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	f7fe fb4a 	bl	800df54 <__swsetup_r>
 800f8c0:	b170      	cbz	r0, 800f8e0 <_vfiprintf_r+0x5c>
 800f8c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8c4:	07dc      	lsls	r4, r3, #31
 800f8c6:	d504      	bpl.n	800f8d2 <_vfiprintf_r+0x4e>
 800f8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8cc:	b01d      	add	sp, #116	@ 0x74
 800f8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	0598      	lsls	r0, r3, #22
 800f8d6:	d4f7      	bmi.n	800f8c8 <_vfiprintf_r+0x44>
 800f8d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8da:	f7fe fc1f 	bl	800e11c <__retarget_lock_release_recursive>
 800f8de:	e7f3      	b.n	800f8c8 <_vfiprintf_r+0x44>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8e4:	2320      	movs	r3, #32
 800f8e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8ee:	2330      	movs	r3, #48	@ 0x30
 800f8f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800faa0 <_vfiprintf_r+0x21c>
 800f8f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8f8:	f04f 0901 	mov.w	r9, #1
 800f8fc:	4623      	mov	r3, r4
 800f8fe:	469a      	mov	sl, r3
 800f900:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f904:	b10a      	cbz	r2, 800f90a <_vfiprintf_r+0x86>
 800f906:	2a25      	cmp	r2, #37	@ 0x25
 800f908:	d1f9      	bne.n	800f8fe <_vfiprintf_r+0x7a>
 800f90a:	ebba 0b04 	subs.w	fp, sl, r4
 800f90e:	d00b      	beq.n	800f928 <_vfiprintf_r+0xa4>
 800f910:	465b      	mov	r3, fp
 800f912:	4622      	mov	r2, r4
 800f914:	4629      	mov	r1, r5
 800f916:	4630      	mov	r0, r6
 800f918:	f7ff ffa1 	bl	800f85e <__sfputs_r>
 800f91c:	3001      	adds	r0, #1
 800f91e:	f000 80a7 	beq.w	800fa70 <_vfiprintf_r+0x1ec>
 800f922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f924:	445a      	add	r2, fp
 800f926:	9209      	str	r2, [sp, #36]	@ 0x24
 800f928:	f89a 3000 	ldrb.w	r3, [sl]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 809f 	beq.w	800fa70 <_vfiprintf_r+0x1ec>
 800f932:	2300      	movs	r3, #0
 800f934:	f04f 32ff 	mov.w	r2, #4294967295
 800f938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f93c:	f10a 0a01 	add.w	sl, sl, #1
 800f940:	9304      	str	r3, [sp, #16]
 800f942:	9307      	str	r3, [sp, #28]
 800f944:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f948:	931a      	str	r3, [sp, #104]	@ 0x68
 800f94a:	4654      	mov	r4, sl
 800f94c:	2205      	movs	r2, #5
 800f94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f952:	4853      	ldr	r0, [pc, #332]	@ (800faa0 <_vfiprintf_r+0x21c>)
 800f954:	f7f0 fc44 	bl	80001e0 <memchr>
 800f958:	9a04      	ldr	r2, [sp, #16]
 800f95a:	b9d8      	cbnz	r0, 800f994 <_vfiprintf_r+0x110>
 800f95c:	06d1      	lsls	r1, r2, #27
 800f95e:	bf44      	itt	mi
 800f960:	2320      	movmi	r3, #32
 800f962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f966:	0713      	lsls	r3, r2, #28
 800f968:	bf44      	itt	mi
 800f96a:	232b      	movmi	r3, #43	@ 0x2b
 800f96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f970:	f89a 3000 	ldrb.w	r3, [sl]
 800f974:	2b2a      	cmp	r3, #42	@ 0x2a
 800f976:	d015      	beq.n	800f9a4 <_vfiprintf_r+0x120>
 800f978:	9a07      	ldr	r2, [sp, #28]
 800f97a:	4654      	mov	r4, sl
 800f97c:	2000      	movs	r0, #0
 800f97e:	f04f 0c0a 	mov.w	ip, #10
 800f982:	4621      	mov	r1, r4
 800f984:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f988:	3b30      	subs	r3, #48	@ 0x30
 800f98a:	2b09      	cmp	r3, #9
 800f98c:	d94b      	bls.n	800fa26 <_vfiprintf_r+0x1a2>
 800f98e:	b1b0      	cbz	r0, 800f9be <_vfiprintf_r+0x13a>
 800f990:	9207      	str	r2, [sp, #28]
 800f992:	e014      	b.n	800f9be <_vfiprintf_r+0x13a>
 800f994:	eba0 0308 	sub.w	r3, r0, r8
 800f998:	fa09 f303 	lsl.w	r3, r9, r3
 800f99c:	4313      	orrs	r3, r2
 800f99e:	9304      	str	r3, [sp, #16]
 800f9a0:	46a2      	mov	sl, r4
 800f9a2:	e7d2      	b.n	800f94a <_vfiprintf_r+0xc6>
 800f9a4:	9b03      	ldr	r3, [sp, #12]
 800f9a6:	1d19      	adds	r1, r3, #4
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	9103      	str	r1, [sp, #12]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bfbb      	ittet	lt
 800f9b0:	425b      	neglt	r3, r3
 800f9b2:	f042 0202 	orrlt.w	r2, r2, #2
 800f9b6:	9307      	strge	r3, [sp, #28]
 800f9b8:	9307      	strlt	r3, [sp, #28]
 800f9ba:	bfb8      	it	lt
 800f9bc:	9204      	strlt	r2, [sp, #16]
 800f9be:	7823      	ldrb	r3, [r4, #0]
 800f9c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9c2:	d10a      	bne.n	800f9da <_vfiprintf_r+0x156>
 800f9c4:	7863      	ldrb	r3, [r4, #1]
 800f9c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9c8:	d132      	bne.n	800fa30 <_vfiprintf_r+0x1ac>
 800f9ca:	9b03      	ldr	r3, [sp, #12]
 800f9cc:	1d1a      	adds	r2, r3, #4
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	9203      	str	r2, [sp, #12]
 800f9d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9d6:	3402      	adds	r4, #2
 800f9d8:	9305      	str	r3, [sp, #20]
 800f9da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fab0 <_vfiprintf_r+0x22c>
 800f9de:	7821      	ldrb	r1, [r4, #0]
 800f9e0:	2203      	movs	r2, #3
 800f9e2:	4650      	mov	r0, sl
 800f9e4:	f7f0 fbfc 	bl	80001e0 <memchr>
 800f9e8:	b138      	cbz	r0, 800f9fa <_vfiprintf_r+0x176>
 800f9ea:	9b04      	ldr	r3, [sp, #16]
 800f9ec:	eba0 000a 	sub.w	r0, r0, sl
 800f9f0:	2240      	movs	r2, #64	@ 0x40
 800f9f2:	4082      	lsls	r2, r0
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	3401      	adds	r4, #1
 800f9f8:	9304      	str	r3, [sp, #16]
 800f9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9fe:	4829      	ldr	r0, [pc, #164]	@ (800faa4 <_vfiprintf_r+0x220>)
 800fa00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa04:	2206      	movs	r2, #6
 800fa06:	f7f0 fbeb 	bl	80001e0 <memchr>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d03f      	beq.n	800fa8e <_vfiprintf_r+0x20a>
 800fa0e:	4b26      	ldr	r3, [pc, #152]	@ (800faa8 <_vfiprintf_r+0x224>)
 800fa10:	bb1b      	cbnz	r3, 800fa5a <_vfiprintf_r+0x1d6>
 800fa12:	9b03      	ldr	r3, [sp, #12]
 800fa14:	3307      	adds	r3, #7
 800fa16:	f023 0307 	bic.w	r3, r3, #7
 800fa1a:	3308      	adds	r3, #8
 800fa1c:	9303      	str	r3, [sp, #12]
 800fa1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa20:	443b      	add	r3, r7
 800fa22:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa24:	e76a      	b.n	800f8fc <_vfiprintf_r+0x78>
 800fa26:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa2a:	460c      	mov	r4, r1
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	e7a8      	b.n	800f982 <_vfiprintf_r+0xfe>
 800fa30:	2300      	movs	r3, #0
 800fa32:	3401      	adds	r4, #1
 800fa34:	9305      	str	r3, [sp, #20]
 800fa36:	4619      	mov	r1, r3
 800fa38:	f04f 0c0a 	mov.w	ip, #10
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa42:	3a30      	subs	r2, #48	@ 0x30
 800fa44:	2a09      	cmp	r2, #9
 800fa46:	d903      	bls.n	800fa50 <_vfiprintf_r+0x1cc>
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d0c6      	beq.n	800f9da <_vfiprintf_r+0x156>
 800fa4c:	9105      	str	r1, [sp, #20]
 800fa4e:	e7c4      	b.n	800f9da <_vfiprintf_r+0x156>
 800fa50:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa54:	4604      	mov	r4, r0
 800fa56:	2301      	movs	r3, #1
 800fa58:	e7f0      	b.n	800fa3c <_vfiprintf_r+0x1b8>
 800fa5a:	ab03      	add	r3, sp, #12
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	462a      	mov	r2, r5
 800fa60:	4b12      	ldr	r3, [pc, #72]	@ (800faac <_vfiprintf_r+0x228>)
 800fa62:	a904      	add	r1, sp, #16
 800fa64:	4630      	mov	r0, r6
 800fa66:	f7fd fce9 	bl	800d43c <_printf_float>
 800fa6a:	4607      	mov	r7, r0
 800fa6c:	1c78      	adds	r0, r7, #1
 800fa6e:	d1d6      	bne.n	800fa1e <_vfiprintf_r+0x19a>
 800fa70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa72:	07d9      	lsls	r1, r3, #31
 800fa74:	d405      	bmi.n	800fa82 <_vfiprintf_r+0x1fe>
 800fa76:	89ab      	ldrh	r3, [r5, #12]
 800fa78:	059a      	lsls	r2, r3, #22
 800fa7a:	d402      	bmi.n	800fa82 <_vfiprintf_r+0x1fe>
 800fa7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa7e:	f7fe fb4d 	bl	800e11c <__retarget_lock_release_recursive>
 800fa82:	89ab      	ldrh	r3, [r5, #12]
 800fa84:	065b      	lsls	r3, r3, #25
 800fa86:	f53f af1f 	bmi.w	800f8c8 <_vfiprintf_r+0x44>
 800fa8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa8c:	e71e      	b.n	800f8cc <_vfiprintf_r+0x48>
 800fa8e:	ab03      	add	r3, sp, #12
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	462a      	mov	r2, r5
 800fa94:	4b05      	ldr	r3, [pc, #20]	@ (800faac <_vfiprintf_r+0x228>)
 800fa96:	a904      	add	r1, sp, #16
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f7fd ff67 	bl	800d96c <_printf_i>
 800fa9e:	e7e4      	b.n	800fa6a <_vfiprintf_r+0x1e6>
 800faa0:	0802a2c0 	.word	0x0802a2c0
 800faa4:	0802a2ca 	.word	0x0802a2ca
 800faa8:	0800d43d 	.word	0x0800d43d
 800faac:	0800f85f 	.word	0x0800f85f
 800fab0:	0802a2c6 	.word	0x0802a2c6

0800fab4 <__sflush_r>:
 800fab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fabc:	0716      	lsls	r6, r2, #28
 800fabe:	4605      	mov	r5, r0
 800fac0:	460c      	mov	r4, r1
 800fac2:	d454      	bmi.n	800fb6e <__sflush_r+0xba>
 800fac4:	684b      	ldr	r3, [r1, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	dc02      	bgt.n	800fad0 <__sflush_r+0x1c>
 800faca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800facc:	2b00      	cmp	r3, #0
 800face:	dd48      	ble.n	800fb62 <__sflush_r+0xae>
 800fad0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fad2:	2e00      	cmp	r6, #0
 800fad4:	d045      	beq.n	800fb62 <__sflush_r+0xae>
 800fad6:	2300      	movs	r3, #0
 800fad8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fadc:	682f      	ldr	r7, [r5, #0]
 800fade:	6a21      	ldr	r1, [r4, #32]
 800fae0:	602b      	str	r3, [r5, #0]
 800fae2:	d030      	beq.n	800fb46 <__sflush_r+0x92>
 800fae4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fae6:	89a3      	ldrh	r3, [r4, #12]
 800fae8:	0759      	lsls	r1, r3, #29
 800faea:	d505      	bpl.n	800faf8 <__sflush_r+0x44>
 800faec:	6863      	ldr	r3, [r4, #4]
 800faee:	1ad2      	subs	r2, r2, r3
 800faf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800faf2:	b10b      	cbz	r3, 800faf8 <__sflush_r+0x44>
 800faf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800faf6:	1ad2      	subs	r2, r2, r3
 800faf8:	2300      	movs	r3, #0
 800fafa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fafc:	6a21      	ldr	r1, [r4, #32]
 800fafe:	4628      	mov	r0, r5
 800fb00:	47b0      	blx	r6
 800fb02:	1c43      	adds	r3, r0, #1
 800fb04:	89a3      	ldrh	r3, [r4, #12]
 800fb06:	d106      	bne.n	800fb16 <__sflush_r+0x62>
 800fb08:	6829      	ldr	r1, [r5, #0]
 800fb0a:	291d      	cmp	r1, #29
 800fb0c:	d82b      	bhi.n	800fb66 <__sflush_r+0xb2>
 800fb0e:	4a2a      	ldr	r2, [pc, #168]	@ (800fbb8 <__sflush_r+0x104>)
 800fb10:	410a      	asrs	r2, r1
 800fb12:	07d6      	lsls	r6, r2, #31
 800fb14:	d427      	bmi.n	800fb66 <__sflush_r+0xb2>
 800fb16:	2200      	movs	r2, #0
 800fb18:	6062      	str	r2, [r4, #4]
 800fb1a:	04d9      	lsls	r1, r3, #19
 800fb1c:	6922      	ldr	r2, [r4, #16]
 800fb1e:	6022      	str	r2, [r4, #0]
 800fb20:	d504      	bpl.n	800fb2c <__sflush_r+0x78>
 800fb22:	1c42      	adds	r2, r0, #1
 800fb24:	d101      	bne.n	800fb2a <__sflush_r+0x76>
 800fb26:	682b      	ldr	r3, [r5, #0]
 800fb28:	b903      	cbnz	r3, 800fb2c <__sflush_r+0x78>
 800fb2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb2e:	602f      	str	r7, [r5, #0]
 800fb30:	b1b9      	cbz	r1, 800fb62 <__sflush_r+0xae>
 800fb32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb36:	4299      	cmp	r1, r3
 800fb38:	d002      	beq.n	800fb40 <__sflush_r+0x8c>
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f7ff f94c 	bl	800edd8 <_free_r>
 800fb40:	2300      	movs	r3, #0
 800fb42:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb44:	e00d      	b.n	800fb62 <__sflush_r+0xae>
 800fb46:	2301      	movs	r3, #1
 800fb48:	4628      	mov	r0, r5
 800fb4a:	47b0      	blx	r6
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	1c50      	adds	r0, r2, #1
 800fb50:	d1c9      	bne.n	800fae6 <__sflush_r+0x32>
 800fb52:	682b      	ldr	r3, [r5, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d0c6      	beq.n	800fae6 <__sflush_r+0x32>
 800fb58:	2b1d      	cmp	r3, #29
 800fb5a:	d001      	beq.n	800fb60 <__sflush_r+0xac>
 800fb5c:	2b16      	cmp	r3, #22
 800fb5e:	d11e      	bne.n	800fb9e <__sflush_r+0xea>
 800fb60:	602f      	str	r7, [r5, #0]
 800fb62:	2000      	movs	r0, #0
 800fb64:	e022      	b.n	800fbac <__sflush_r+0xf8>
 800fb66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb6a:	b21b      	sxth	r3, r3
 800fb6c:	e01b      	b.n	800fba6 <__sflush_r+0xf2>
 800fb6e:	690f      	ldr	r7, [r1, #16]
 800fb70:	2f00      	cmp	r7, #0
 800fb72:	d0f6      	beq.n	800fb62 <__sflush_r+0xae>
 800fb74:	0793      	lsls	r3, r2, #30
 800fb76:	680e      	ldr	r6, [r1, #0]
 800fb78:	bf08      	it	eq
 800fb7a:	694b      	ldreq	r3, [r1, #20]
 800fb7c:	600f      	str	r7, [r1, #0]
 800fb7e:	bf18      	it	ne
 800fb80:	2300      	movne	r3, #0
 800fb82:	eba6 0807 	sub.w	r8, r6, r7
 800fb86:	608b      	str	r3, [r1, #8]
 800fb88:	f1b8 0f00 	cmp.w	r8, #0
 800fb8c:	dde9      	ble.n	800fb62 <__sflush_r+0xae>
 800fb8e:	6a21      	ldr	r1, [r4, #32]
 800fb90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb92:	4643      	mov	r3, r8
 800fb94:	463a      	mov	r2, r7
 800fb96:	4628      	mov	r0, r5
 800fb98:	47b0      	blx	r6
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	dc08      	bgt.n	800fbb0 <__sflush_r+0xfc>
 800fb9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fba6:	81a3      	strh	r3, [r4, #12]
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb0:	4407      	add	r7, r0
 800fbb2:	eba8 0800 	sub.w	r8, r8, r0
 800fbb6:	e7e7      	b.n	800fb88 <__sflush_r+0xd4>
 800fbb8:	dfbffffe 	.word	0xdfbffffe

0800fbbc <_fflush_r>:
 800fbbc:	b538      	push	{r3, r4, r5, lr}
 800fbbe:	690b      	ldr	r3, [r1, #16]
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	b913      	cbnz	r3, 800fbcc <_fflush_r+0x10>
 800fbc6:	2500      	movs	r5, #0
 800fbc8:	4628      	mov	r0, r5
 800fbca:	bd38      	pop	{r3, r4, r5, pc}
 800fbcc:	b118      	cbz	r0, 800fbd6 <_fflush_r+0x1a>
 800fbce:	6a03      	ldr	r3, [r0, #32]
 800fbd0:	b90b      	cbnz	r3, 800fbd6 <_fflush_r+0x1a>
 800fbd2:	f7fe f877 	bl	800dcc4 <__sinit>
 800fbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0f3      	beq.n	800fbc6 <_fflush_r+0xa>
 800fbde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbe0:	07d0      	lsls	r0, r2, #31
 800fbe2:	d404      	bmi.n	800fbee <_fflush_r+0x32>
 800fbe4:	0599      	lsls	r1, r3, #22
 800fbe6:	d402      	bmi.n	800fbee <_fflush_r+0x32>
 800fbe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbea:	f7fe fa96 	bl	800e11a <__retarget_lock_acquire_recursive>
 800fbee:	4628      	mov	r0, r5
 800fbf0:	4621      	mov	r1, r4
 800fbf2:	f7ff ff5f 	bl	800fab4 <__sflush_r>
 800fbf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbf8:	07da      	lsls	r2, r3, #31
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	d4e4      	bmi.n	800fbc8 <_fflush_r+0xc>
 800fbfe:	89a3      	ldrh	r3, [r4, #12]
 800fc00:	059b      	lsls	r3, r3, #22
 800fc02:	d4e1      	bmi.n	800fbc8 <_fflush_r+0xc>
 800fc04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc06:	f7fe fa89 	bl	800e11c <__retarget_lock_release_recursive>
 800fc0a:	e7dd      	b.n	800fbc8 <_fflush_r+0xc>

0800fc0c <__swhatbuf_r>:
 800fc0c:	b570      	push	{r4, r5, r6, lr}
 800fc0e:	460c      	mov	r4, r1
 800fc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc14:	2900      	cmp	r1, #0
 800fc16:	b096      	sub	sp, #88	@ 0x58
 800fc18:	4615      	mov	r5, r2
 800fc1a:	461e      	mov	r6, r3
 800fc1c:	da0d      	bge.n	800fc3a <__swhatbuf_r+0x2e>
 800fc1e:	89a3      	ldrh	r3, [r4, #12]
 800fc20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc24:	f04f 0100 	mov.w	r1, #0
 800fc28:	bf14      	ite	ne
 800fc2a:	2340      	movne	r3, #64	@ 0x40
 800fc2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc30:	2000      	movs	r0, #0
 800fc32:	6031      	str	r1, [r6, #0]
 800fc34:	602b      	str	r3, [r5, #0]
 800fc36:	b016      	add	sp, #88	@ 0x58
 800fc38:	bd70      	pop	{r4, r5, r6, pc}
 800fc3a:	466a      	mov	r2, sp
 800fc3c:	f000 f862 	bl	800fd04 <_fstat_r>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	dbec      	blt.n	800fc1e <__swhatbuf_r+0x12>
 800fc44:	9901      	ldr	r1, [sp, #4]
 800fc46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc4e:	4259      	negs	r1, r3
 800fc50:	4159      	adcs	r1, r3
 800fc52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc56:	e7eb      	b.n	800fc30 <__swhatbuf_r+0x24>

0800fc58 <__smakebuf_r>:
 800fc58:	898b      	ldrh	r3, [r1, #12]
 800fc5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc5c:	079d      	lsls	r5, r3, #30
 800fc5e:	4606      	mov	r6, r0
 800fc60:	460c      	mov	r4, r1
 800fc62:	d507      	bpl.n	800fc74 <__smakebuf_r+0x1c>
 800fc64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	6123      	str	r3, [r4, #16]
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	6163      	str	r3, [r4, #20]
 800fc70:	b003      	add	sp, #12
 800fc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc74:	ab01      	add	r3, sp, #4
 800fc76:	466a      	mov	r2, sp
 800fc78:	f7ff ffc8 	bl	800fc0c <__swhatbuf_r>
 800fc7c:	9f00      	ldr	r7, [sp, #0]
 800fc7e:	4605      	mov	r5, r0
 800fc80:	4639      	mov	r1, r7
 800fc82:	4630      	mov	r0, r6
 800fc84:	f7fd fa80 	bl	800d188 <_malloc_r>
 800fc88:	b948      	cbnz	r0, 800fc9e <__smakebuf_r+0x46>
 800fc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc8e:	059a      	lsls	r2, r3, #22
 800fc90:	d4ee      	bmi.n	800fc70 <__smakebuf_r+0x18>
 800fc92:	f023 0303 	bic.w	r3, r3, #3
 800fc96:	f043 0302 	orr.w	r3, r3, #2
 800fc9a:	81a3      	strh	r3, [r4, #12]
 800fc9c:	e7e2      	b.n	800fc64 <__smakebuf_r+0xc>
 800fc9e:	89a3      	ldrh	r3, [r4, #12]
 800fca0:	6020      	str	r0, [r4, #0]
 800fca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	9b01      	ldr	r3, [sp, #4]
 800fcaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcae:	b15b      	cbz	r3, 800fcc8 <__smakebuf_r+0x70>
 800fcb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	f000 f837 	bl	800fd28 <_isatty_r>
 800fcba:	b128      	cbz	r0, 800fcc8 <__smakebuf_r+0x70>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	f023 0303 	bic.w	r3, r3, #3
 800fcc2:	f043 0301 	orr.w	r3, r3, #1
 800fcc6:	81a3      	strh	r3, [r4, #12]
 800fcc8:	89a3      	ldrh	r3, [r4, #12]
 800fcca:	431d      	orrs	r5, r3
 800fccc:	81a5      	strh	r5, [r4, #12]
 800fcce:	e7cf      	b.n	800fc70 <__smakebuf_r+0x18>

0800fcd0 <memmove>:
 800fcd0:	4288      	cmp	r0, r1
 800fcd2:	b510      	push	{r4, lr}
 800fcd4:	eb01 0402 	add.w	r4, r1, r2
 800fcd8:	d902      	bls.n	800fce0 <memmove+0x10>
 800fcda:	4284      	cmp	r4, r0
 800fcdc:	4623      	mov	r3, r4
 800fcde:	d807      	bhi.n	800fcf0 <memmove+0x20>
 800fce0:	1e43      	subs	r3, r0, #1
 800fce2:	42a1      	cmp	r1, r4
 800fce4:	d008      	beq.n	800fcf8 <memmove+0x28>
 800fce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcee:	e7f8      	b.n	800fce2 <memmove+0x12>
 800fcf0:	4402      	add	r2, r0
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	428a      	cmp	r2, r1
 800fcf6:	d100      	bne.n	800fcfa <memmove+0x2a>
 800fcf8:	bd10      	pop	{r4, pc}
 800fcfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd02:	e7f7      	b.n	800fcf4 <memmove+0x24>

0800fd04 <_fstat_r>:
 800fd04:	b538      	push	{r3, r4, r5, lr}
 800fd06:	4d07      	ldr	r5, [pc, #28]	@ (800fd24 <_fstat_r+0x20>)
 800fd08:	2300      	movs	r3, #0
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	4608      	mov	r0, r1
 800fd0e:	4611      	mov	r1, r2
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	f000 fa05 	bl	8010120 <_fstat>
 800fd16:	1c43      	adds	r3, r0, #1
 800fd18:	d102      	bne.n	800fd20 <_fstat_r+0x1c>
 800fd1a:	682b      	ldr	r3, [r5, #0]
 800fd1c:	b103      	cbz	r3, 800fd20 <_fstat_r+0x1c>
 800fd1e:	6023      	str	r3, [r4, #0]
 800fd20:	bd38      	pop	{r3, r4, r5, pc}
 800fd22:	bf00      	nop
 800fd24:	2000353c 	.word	0x2000353c

0800fd28 <_isatty_r>:
 800fd28:	b538      	push	{r3, r4, r5, lr}
 800fd2a:	4d06      	ldr	r5, [pc, #24]	@ (800fd44 <_isatty_r+0x1c>)
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	4604      	mov	r4, r0
 800fd30:	4608      	mov	r0, r1
 800fd32:	602b      	str	r3, [r5, #0]
 800fd34:	f000 fa04 	bl	8010140 <_isatty>
 800fd38:	1c43      	adds	r3, r0, #1
 800fd3a:	d102      	bne.n	800fd42 <_isatty_r+0x1a>
 800fd3c:	682b      	ldr	r3, [r5, #0]
 800fd3e:	b103      	cbz	r3, 800fd42 <_isatty_r+0x1a>
 800fd40:	6023      	str	r3, [r4, #0]
 800fd42:	bd38      	pop	{r3, r4, r5, pc}
 800fd44:	2000353c 	.word	0x2000353c

0800fd48 <__assert_func>:
 800fd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd4a:	4614      	mov	r4, r2
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	4b09      	ldr	r3, [pc, #36]	@ (800fd74 <__assert_func+0x2c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	4605      	mov	r5, r0
 800fd54:	68d8      	ldr	r0, [r3, #12]
 800fd56:	b954      	cbnz	r4, 800fd6e <__assert_func+0x26>
 800fd58:	4b07      	ldr	r3, [pc, #28]	@ (800fd78 <__assert_func+0x30>)
 800fd5a:	461c      	mov	r4, r3
 800fd5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd60:	9100      	str	r1, [sp, #0]
 800fd62:	462b      	mov	r3, r5
 800fd64:	4905      	ldr	r1, [pc, #20]	@ (800fd7c <__assert_func+0x34>)
 800fd66:	f000 f841 	bl	800fdec <fiprintf>
 800fd6a:	f000 f851 	bl	800fe10 <abort>
 800fd6e:	4b04      	ldr	r3, [pc, #16]	@ (800fd80 <__assert_func+0x38>)
 800fd70:	e7f4      	b.n	800fd5c <__assert_func+0x14>
 800fd72:	bf00      	nop
 800fd74:	20000a44 	.word	0x20000a44
 800fd78:	0802a316 	.word	0x0802a316
 800fd7c:	0802a2e8 	.word	0x0802a2e8
 800fd80:	0802a2db 	.word	0x0802a2db

0800fd84 <_calloc_r>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	fba1 5402 	umull	r5, r4, r1, r2
 800fd8a:	b93c      	cbnz	r4, 800fd9c <_calloc_r+0x18>
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	f7fd f9fb 	bl	800d188 <_malloc_r>
 800fd92:	4606      	mov	r6, r0
 800fd94:	b928      	cbnz	r0, 800fda2 <_calloc_r+0x1e>
 800fd96:	2600      	movs	r6, #0
 800fd98:	4630      	mov	r0, r6
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	220c      	movs	r2, #12
 800fd9e:	6002      	str	r2, [r0, #0]
 800fda0:	e7f9      	b.n	800fd96 <_calloc_r+0x12>
 800fda2:	462a      	mov	r2, r5
 800fda4:	4621      	mov	r1, r4
 800fda6:	f7fe f92b 	bl	800e000 <memset>
 800fdaa:	e7f5      	b.n	800fd98 <_calloc_r+0x14>

0800fdac <__ascii_mbtowc>:
 800fdac:	b082      	sub	sp, #8
 800fdae:	b901      	cbnz	r1, 800fdb2 <__ascii_mbtowc+0x6>
 800fdb0:	a901      	add	r1, sp, #4
 800fdb2:	b142      	cbz	r2, 800fdc6 <__ascii_mbtowc+0x1a>
 800fdb4:	b14b      	cbz	r3, 800fdca <__ascii_mbtowc+0x1e>
 800fdb6:	7813      	ldrb	r3, [r2, #0]
 800fdb8:	600b      	str	r3, [r1, #0]
 800fdba:	7812      	ldrb	r2, [r2, #0]
 800fdbc:	1e10      	subs	r0, r2, #0
 800fdbe:	bf18      	it	ne
 800fdc0:	2001      	movne	r0, #1
 800fdc2:	b002      	add	sp, #8
 800fdc4:	4770      	bx	lr
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	e7fb      	b.n	800fdc2 <__ascii_mbtowc+0x16>
 800fdca:	f06f 0001 	mvn.w	r0, #1
 800fdce:	e7f8      	b.n	800fdc2 <__ascii_mbtowc+0x16>

0800fdd0 <__ascii_wctomb>:
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	4608      	mov	r0, r1
 800fdd4:	b141      	cbz	r1, 800fde8 <__ascii_wctomb+0x18>
 800fdd6:	2aff      	cmp	r2, #255	@ 0xff
 800fdd8:	d904      	bls.n	800fde4 <__ascii_wctomb+0x14>
 800fdda:	228a      	movs	r2, #138	@ 0x8a
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	f04f 30ff 	mov.w	r0, #4294967295
 800fde2:	4770      	bx	lr
 800fde4:	700a      	strb	r2, [r1, #0]
 800fde6:	2001      	movs	r0, #1
 800fde8:	4770      	bx	lr
	...

0800fdec <fiprintf>:
 800fdec:	b40e      	push	{r1, r2, r3}
 800fdee:	b503      	push	{r0, r1, lr}
 800fdf0:	4601      	mov	r1, r0
 800fdf2:	ab03      	add	r3, sp, #12
 800fdf4:	4805      	ldr	r0, [pc, #20]	@ (800fe0c <fiprintf+0x20>)
 800fdf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdfa:	6800      	ldr	r0, [r0, #0]
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	f7ff fd41 	bl	800f884 <_vfiprintf_r>
 800fe02:	b002      	add	sp, #8
 800fe04:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe08:	b003      	add	sp, #12
 800fe0a:	4770      	bx	lr
 800fe0c:	20000a44 	.word	0x20000a44

0800fe10 <abort>:
 800fe10:	b508      	push	{r3, lr}
 800fe12:	2006      	movs	r0, #6
 800fe14:	f000 f82c 	bl	800fe70 <raise>
 800fe18:	2001      	movs	r0, #1
 800fe1a:	f000 f9b9 	bl	8010190 <_exit>

0800fe1e <_raise_r>:
 800fe1e:	291f      	cmp	r1, #31
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4605      	mov	r5, r0
 800fe24:	460c      	mov	r4, r1
 800fe26:	d904      	bls.n	800fe32 <_raise_r+0x14>
 800fe28:	2316      	movs	r3, #22
 800fe2a:	6003      	str	r3, [r0, #0]
 800fe2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe30:	bd38      	pop	{r3, r4, r5, pc}
 800fe32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe34:	b112      	cbz	r2, 800fe3c <_raise_r+0x1e>
 800fe36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe3a:	b94b      	cbnz	r3, 800fe50 <_raise_r+0x32>
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f000 f831 	bl	800fea4 <_getpid_r>
 800fe42:	4622      	mov	r2, r4
 800fe44:	4601      	mov	r1, r0
 800fe46:	4628      	mov	r0, r5
 800fe48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe4c:	f000 b818 	b.w	800fe80 <_kill_r>
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d00a      	beq.n	800fe6a <_raise_r+0x4c>
 800fe54:	1c59      	adds	r1, r3, #1
 800fe56:	d103      	bne.n	800fe60 <_raise_r+0x42>
 800fe58:	2316      	movs	r3, #22
 800fe5a:	6003      	str	r3, [r0, #0]
 800fe5c:	2001      	movs	r0, #1
 800fe5e:	e7e7      	b.n	800fe30 <_raise_r+0x12>
 800fe60:	2100      	movs	r1, #0
 800fe62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe66:	4620      	mov	r0, r4
 800fe68:	4798      	blx	r3
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	e7e0      	b.n	800fe30 <_raise_r+0x12>
	...

0800fe70 <raise>:
 800fe70:	4b02      	ldr	r3, [pc, #8]	@ (800fe7c <raise+0xc>)
 800fe72:	4601      	mov	r1, r0
 800fe74:	6818      	ldr	r0, [r3, #0]
 800fe76:	f7ff bfd2 	b.w	800fe1e <_raise_r>
 800fe7a:	bf00      	nop
 800fe7c:	20000a44 	.word	0x20000a44

0800fe80 <_kill_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4d07      	ldr	r5, [pc, #28]	@ (800fea0 <_kill_r+0x20>)
 800fe84:	2300      	movs	r3, #0
 800fe86:	4604      	mov	r4, r0
 800fe88:	4608      	mov	r0, r1
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	602b      	str	r3, [r5, #0]
 800fe8e:	f000 f95f 	bl	8010150 <_kill>
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	d102      	bne.n	800fe9c <_kill_r+0x1c>
 800fe96:	682b      	ldr	r3, [r5, #0]
 800fe98:	b103      	cbz	r3, 800fe9c <_kill_r+0x1c>
 800fe9a:	6023      	str	r3, [r4, #0]
 800fe9c:	bd38      	pop	{r3, r4, r5, pc}
 800fe9e:	bf00      	nop
 800fea0:	2000353c 	.word	0x2000353c

0800fea4 <_getpid_r>:
 800fea4:	f000 b944 	b.w	8010130 <_getpid>

0800fea8 <expf>:
 800fea8:	b508      	push	{r3, lr}
 800feaa:	ed2d 8b02 	vpush	{d8}
 800feae:	eef0 8a40 	vmov.f32	s17, s0
 800feb2:	f000 f85f 	bl	800ff74 <__ieee754_expf>
 800feb6:	eeb0 8a40 	vmov.f32	s16, s0
 800feba:	eeb0 0a68 	vmov.f32	s0, s17
 800febe:	f000 f829 	bl	800ff14 <finitef>
 800fec2:	b160      	cbz	r0, 800fede <expf+0x36>
 800fec4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800ff04 <expf+0x5c>
 800fec8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed0:	dd0a      	ble.n	800fee8 <expf+0x40>
 800fed2:	f7fe f8f7 	bl	800e0c4 <__errno>
 800fed6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800ff08 <expf+0x60>
 800feda:	2322      	movs	r3, #34	@ 0x22
 800fedc:	6003      	str	r3, [r0, #0]
 800fede:	eeb0 0a48 	vmov.f32	s0, s16
 800fee2:	ecbd 8b02 	vpop	{d8}
 800fee6:	bd08      	pop	{r3, pc}
 800fee8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ff0c <expf+0x64>
 800feec:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef4:	d5f3      	bpl.n	800fede <expf+0x36>
 800fef6:	f7fe f8e5 	bl	800e0c4 <__errno>
 800fefa:	2322      	movs	r3, #34	@ 0x22
 800fefc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800ff10 <expf+0x68>
 800ff00:	6003      	str	r3, [r0, #0]
 800ff02:	e7ec      	b.n	800fede <expf+0x36>
 800ff04:	42b17217 	.word	0x42b17217
 800ff08:	7f800000 	.word	0x7f800000
 800ff0c:	c2cff1b5 	.word	0xc2cff1b5
 800ff10:	00000000 	.word	0x00000000

0800ff14 <finitef>:
 800ff14:	ee10 3a10 	vmov	r3, s0
 800ff18:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ff1c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ff20:	bfac      	ite	ge
 800ff22:	2000      	movge	r0, #0
 800ff24:	2001      	movlt	r0, #1
 800ff26:	4770      	bx	lr

0800ff28 <with_errnof>:
 800ff28:	b510      	push	{r4, lr}
 800ff2a:	ed2d 8b02 	vpush	{d8}
 800ff2e:	eeb0 8a40 	vmov.f32	s16, s0
 800ff32:	4604      	mov	r4, r0
 800ff34:	f7fe f8c6 	bl	800e0c4 <__errno>
 800ff38:	eeb0 0a48 	vmov.f32	s0, s16
 800ff3c:	ecbd 8b02 	vpop	{d8}
 800ff40:	6004      	str	r4, [r0, #0]
 800ff42:	bd10      	pop	{r4, pc}

0800ff44 <xflowf>:
 800ff44:	b130      	cbz	r0, 800ff54 <xflowf+0x10>
 800ff46:	eef1 7a40 	vneg.f32	s15, s0
 800ff4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ff4e:	2022      	movs	r0, #34	@ 0x22
 800ff50:	f7ff bfea 	b.w	800ff28 <with_errnof>
 800ff54:	eef0 7a40 	vmov.f32	s15, s0
 800ff58:	e7f7      	b.n	800ff4a <xflowf+0x6>
	...

0800ff5c <__math_uflowf>:
 800ff5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ff64 <__math_uflowf+0x8>
 800ff60:	f7ff bff0 	b.w	800ff44 <xflowf>
 800ff64:	10000000 	.word	0x10000000

0800ff68 <__math_oflowf>:
 800ff68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ff70 <__math_oflowf+0x8>
 800ff6c:	f7ff bfea 	b.w	800ff44 <xflowf>
 800ff70:	70000000 	.word	0x70000000

0800ff74 <__ieee754_expf>:
 800ff74:	ee10 2a10 	vmov	r2, s0
 800ff78:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800ff7c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ff80:	d902      	bls.n	800ff88 <__ieee754_expf+0x14>
 800ff82:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff86:	4770      	bx	lr
 800ff88:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ff8c:	d106      	bne.n	800ff9c <__ieee754_expf+0x28>
 800ff8e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80100c8 <__ieee754_expf+0x154>
 800ff92:	2900      	cmp	r1, #0
 800ff94:	bf18      	it	ne
 800ff96:	eeb0 0a67 	vmovne.f32	s0, s15
 800ff9a:	4770      	bx	lr
 800ff9c:	484b      	ldr	r0, [pc, #300]	@ (80100cc <__ieee754_expf+0x158>)
 800ff9e:	4282      	cmp	r2, r0
 800ffa0:	dd02      	ble.n	800ffa8 <__ieee754_expf+0x34>
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	f7ff bfe0 	b.w	800ff68 <__math_oflowf>
 800ffa8:	2a00      	cmp	r2, #0
 800ffaa:	da05      	bge.n	800ffb8 <__ieee754_expf+0x44>
 800ffac:	4a48      	ldr	r2, [pc, #288]	@ (80100d0 <__ieee754_expf+0x15c>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d902      	bls.n	800ffb8 <__ieee754_expf+0x44>
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	f7ff bfd2 	b.w	800ff5c <__math_uflowf>
 800ffb8:	4a46      	ldr	r2, [pc, #280]	@ (80100d4 <__ieee754_expf+0x160>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800ffc0:	d952      	bls.n	8010068 <__ieee754_expf+0xf4>
 800ffc2:	4a45      	ldr	r2, [pc, #276]	@ (80100d8 <__ieee754_expf+0x164>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800ffca:	d834      	bhi.n	8010036 <__ieee754_expf+0xc2>
 800ffcc:	4b43      	ldr	r3, [pc, #268]	@ (80100dc <__ieee754_expf+0x168>)
 800ffce:	4413      	add	r3, r2
 800ffd0:	ed93 7a00 	vldr	s14, [r3]
 800ffd4:	4b42      	ldr	r3, [pc, #264]	@ (80100e0 <__ieee754_expf+0x16c>)
 800ffd6:	4413      	add	r3, r2
 800ffd8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ffdc:	f1c1 0201 	rsb	r2, r1, #1
 800ffe0:	edd3 7a00 	vldr	s15, [r3]
 800ffe4:	1a52      	subs	r2, r2, r1
 800ffe6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ffea:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ffee:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80100e4 <__ieee754_expf+0x170>
 800fff2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80100e8 <__ieee754_expf+0x174>
 800fff6:	eee6 6a05 	vfma.f32	s13, s12, s10
 800fffa:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80100ec <__ieee754_expf+0x178>
 800fffe:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010002:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80100f0 <__ieee754_expf+0x17c>
 8010006:	eee5 6a06 	vfma.f32	s13, s10, s12
 801000a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80100f4 <__ieee754_expf+0x180>
 801000e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010012:	eef0 6a40 	vmov.f32	s13, s0
 8010016:	eee5 6a46 	vfms.f32	s13, s10, s12
 801001a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801001e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8010022:	bb92      	cbnz	r2, 801008a <__ieee754_expf+0x116>
 8010024:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8010028:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801002c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010030:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8010034:	4770      	bx	lr
 8010036:	4b30      	ldr	r3, [pc, #192]	@ (80100f8 <__ieee754_expf+0x184>)
 8010038:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80100fc <__ieee754_expf+0x188>
 801003c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8010100 <__ieee754_expf+0x18c>
 8010040:	4413      	add	r3, r2
 8010042:	edd3 7a00 	vldr	s15, [r3]
 8010046:	eee0 7a07 	vfma.f32	s15, s0, s14
 801004a:	eeb0 7a40 	vmov.f32	s14, s0
 801004e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010052:	ee17 2a90 	vmov	r2, s15
 8010056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801005a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801005e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8010104 <__ieee754_expf+0x190>
 8010062:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010066:	e7be      	b.n	800ffe6 <__ieee754_expf+0x72>
 8010068:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801006c:	d20b      	bcs.n	8010086 <__ieee754_expf+0x112>
 801006e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8010108 <__ieee754_expf+0x194>
 8010072:	ee70 6a26 	vadd.f32	s13, s0, s13
 8010076:	eef4 6ae5 	vcmpe.f32	s13, s11
 801007a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007e:	dd02      	ble.n	8010086 <__ieee754_expf+0x112>
 8010080:	ee30 0a25 	vadd.f32	s0, s0, s11
 8010084:	4770      	bx	lr
 8010086:	2200      	movs	r2, #0
 8010088:	e7af      	b.n	800ffea <__ieee754_expf+0x76>
 801008a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801008e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8010092:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8010096:	bfb8      	it	lt
 8010098:	3264      	addlt	r2, #100	@ 0x64
 801009a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801009e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80100a6:	ee17 3a90 	vmov	r3, s15
 80100aa:	bfab      	itete	ge
 80100ac:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80100b0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80100b4:	ee00 3a10 	vmovge	s0, r3
 80100b8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801010c <__ieee754_expf+0x198>
 80100bc:	bfbc      	itt	lt
 80100be:	ee00 3a10 	vmovlt	s0, r3
 80100c2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80100c6:	4770      	bx	lr
 80100c8:	00000000 	.word	0x00000000
 80100cc:	42b17217 	.word	0x42b17217
 80100d0:	42cff1b5 	.word	0x42cff1b5
 80100d4:	3eb17218 	.word	0x3eb17218
 80100d8:	3f851591 	.word	0x3f851591
 80100dc:	0802a420 	.word	0x0802a420
 80100e0:	0802a418 	.word	0x0802a418
 80100e4:	3331bb4c 	.word	0x3331bb4c
 80100e8:	b5ddea0e 	.word	0xb5ddea0e
 80100ec:	388ab355 	.word	0x388ab355
 80100f0:	bb360b61 	.word	0xbb360b61
 80100f4:	3e2aaaab 	.word	0x3e2aaaab
 80100f8:	0802a428 	.word	0x0802a428
 80100fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8010100:	3f317180 	.word	0x3f317180
 8010104:	3717f7d1 	.word	0x3717f7d1
 8010108:	7149f2ca 	.word	0x7149f2ca
 801010c:	0d800000 	.word	0x0d800000

08010110 <_close>:
 8010110:	4b02      	ldr	r3, [pc, #8]	@ (801011c <_close+0xc>)
 8010112:	2258      	movs	r2, #88	@ 0x58
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	f04f 30ff 	mov.w	r0, #4294967295
 801011a:	4770      	bx	lr
 801011c:	2000353c 	.word	0x2000353c

08010120 <_fstat>:
 8010120:	4b02      	ldr	r3, [pc, #8]	@ (801012c <_fstat+0xc>)
 8010122:	2258      	movs	r2, #88	@ 0x58
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	f04f 30ff 	mov.w	r0, #4294967295
 801012a:	4770      	bx	lr
 801012c:	2000353c 	.word	0x2000353c

08010130 <_getpid>:
 8010130:	4b02      	ldr	r3, [pc, #8]	@ (801013c <_getpid+0xc>)
 8010132:	2258      	movs	r2, #88	@ 0x58
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	f04f 30ff 	mov.w	r0, #4294967295
 801013a:	4770      	bx	lr
 801013c:	2000353c 	.word	0x2000353c

08010140 <_isatty>:
 8010140:	4b02      	ldr	r3, [pc, #8]	@ (801014c <_isatty+0xc>)
 8010142:	2258      	movs	r2, #88	@ 0x58
 8010144:	601a      	str	r2, [r3, #0]
 8010146:	2000      	movs	r0, #0
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop
 801014c:	2000353c 	.word	0x2000353c

08010150 <_kill>:
 8010150:	4b02      	ldr	r3, [pc, #8]	@ (801015c <_kill+0xc>)
 8010152:	2258      	movs	r2, #88	@ 0x58
 8010154:	601a      	str	r2, [r3, #0]
 8010156:	f04f 30ff 	mov.w	r0, #4294967295
 801015a:	4770      	bx	lr
 801015c:	2000353c 	.word	0x2000353c

08010160 <_lseek>:
 8010160:	4b02      	ldr	r3, [pc, #8]	@ (801016c <_lseek+0xc>)
 8010162:	2258      	movs	r2, #88	@ 0x58
 8010164:	601a      	str	r2, [r3, #0]
 8010166:	f04f 30ff 	mov.w	r0, #4294967295
 801016a:	4770      	bx	lr
 801016c:	2000353c 	.word	0x2000353c

08010170 <_read>:
 8010170:	4b02      	ldr	r3, [pc, #8]	@ (801017c <_read+0xc>)
 8010172:	2258      	movs	r2, #88	@ 0x58
 8010174:	601a      	str	r2, [r3, #0]
 8010176:	f04f 30ff 	mov.w	r0, #4294967295
 801017a:	4770      	bx	lr
 801017c:	2000353c 	.word	0x2000353c

08010180 <_write>:
 8010180:	4b02      	ldr	r3, [pc, #8]	@ (801018c <_write+0xc>)
 8010182:	2258      	movs	r2, #88	@ 0x58
 8010184:	601a      	str	r2, [r3, #0]
 8010186:	f04f 30ff 	mov.w	r0, #4294967295
 801018a:	4770      	bx	lr
 801018c:	2000353c 	.word	0x2000353c

08010190 <_exit>:
 8010190:	e7fe      	b.n	8010190 <_exit>
	...

08010194 <_init>:
 8010194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010196:	bf00      	nop
 8010198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801019a:	bc08      	pop	{r3}
 801019c:	469e      	mov	lr, r3
 801019e:	4770      	bx	lr

080101a0 <_fini>:
 80101a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a2:	bf00      	nop
 80101a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101a6:	bc08      	pop	{r3}
 80101a8:	469e      	mov	lr, r3
 80101aa:	4770      	bx	lr
